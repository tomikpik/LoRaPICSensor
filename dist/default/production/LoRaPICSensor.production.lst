

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Mon Mar 21 00:23:04 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataCOMRAM
    74  001498                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _randx
    78  001498  0001               	dw	1
    79  00149A  0000               	dw	0
    80                           
    81                           	psect	mediumconst
    82  00FE9A                     __pmediumconst:
    83                           	opt stack 0
    84  00FE9A  00                 	db	0
    85  00FE9B                     _dpowers:
    86                           	opt stack 0
    87  00FE9B  0001               	dw	1
    88  00FE9D  000A               	dw	10
    89  00FE9F  0064               	dw	100
    90  00FEA1  03E8               	dw	1000
    91  00FEA3  2710               	dw	10000
    92  00FEA5                     __end_of_dpowers:
    93                           	opt stack 0
    94  00FEA5                     _hexpowers:
    95                           	opt stack 0
    96  00FEA5  0001               	dw	1
    97  00FEA7  0010               	dw	16
    98  00FEA9  0100               	dw	256
    99  00FEAB  1000               	dw	4096
   100  00FEAD                     __end_of_hexpowers:
   101                           	opt stack 0
   102  00FEAD                     STR_20:
   103  00FEAD  72                 	db	114	;'r'
   104  00FEAE  61                 	db	97	;'a'
   105  00FEAF  64                 	db	100	;'d'
   106  00FEB0  69                 	db	105	;'i'
   107  00FEB1  6F                 	db	111	;'o'
   108  00FEB2  20                 	db	32
   109  00FEB3  74                 	db	116	;'t'
   110  00FEB4  78                 	db	120	;'x'
   111  00FEB5  20                 	db	32
   112  00FEB6  34                 	db	52	;'4'
   113  00FEB7  31                 	db	49	;'1'
   114  00FEB8  25                 	db	37
   115  00FEB9  73                 	db	115	;'s'
   116  00FEBA  25                 	db	37
   117  00FEBB  30                 	db	48	;'0'
   118  00FEBC  32                 	db	50	;'2'
   119  00FEBD  58                 	db	88	;'X'
   120  00FEBE  25                 	db	37
   121  00FEBF  30                 	db	48	;'0'
   122  00FEC0  32                 	db	50	;'2'
   123  00FEC1  58                 	db	88	;'X'
   124  00FEC2  25                 	db	37
   125  00FEC3  30                 	db	48	;'0'
   126  00FEC4  32                 	db	50	;'2'
   127  00FEC5  58                 	db	88	;'X'
   128  00FEC6  25                 	db	37
   129  00FEC7  30                 	db	48	;'0'
   130  00FEC8  32                 	db	50	;'2'
   131  00FEC9  58                 	db	88	;'X'
   132  00FECA  30                 	db	48	;'0'
   133  00FECB  30                 	db	48	;'0'
   134  00FECC  30                 	db	48	;'0'
   135  00FECD  30                 	db	48	;'0'
   136  00FECE  0D                 	db	13
   137  00FECF  0A                 	db	10
   138  00FED0  00                 	db	0
   139  00FED1                     STR_15:
   140  00FED1  72                 	db	114	;'r'
   141  00FED2  61                 	db	97	;'a'
   142  00FED3  64                 	db	100	;'d'
   143  00FED4  69                 	db	105	;'i'
   144  00FED5  6F                 	db	111	;'o'
   145  00FED6  20                 	db	32
   146  00FED7  73                 	db	115	;'s'
   147  00FED8  65                 	db	101	;'e'
   148  00FED9  74                 	db	116	;'t'
   149  00FEDA  20                 	db	32
   150  00FEDB  62                 	db	98	;'b'
   151  00FEDC  77                 	db	119	;'w'
   152  00FEDD  20                 	db	32
   153  00FEDE  35                 	db	53	;'5'
   154  00FEDF  30                 	db	48	;'0'
   155  00FEE0  30                 	db	48	;'0'
   156  00FEE1  0D                 	db	13
   157  00FEE2  0A                 	db	10
   158  00FEE3  00                 	db	0
   159  00FEE4                     STR_14:
   160  00FEE4  72                 	db	114	;'r'
   161  00FEE5  61                 	db	97	;'a'
   162  00FEE6  64                 	db	100	;'d'
   163  00FEE7  69                 	db	105	;'i'
   164  00FEE8  6F                 	db	111	;'o'
   165  00FEE9  20                 	db	32
   166  00FEEA  73                 	db	115	;'s'
   167  00FEEB  65                 	db	101	;'e'
   168  00FEEC  74                 	db	116	;'t'
   169  00FEED  20                 	db	32
   170  00FEEE  70                 	db	112	;'p'
   171  00FEEF  77                 	db	119	;'w'
   172  00FEF0  72                 	db	114	;'r'
   173  00FEF1  20                 	db	32
   174  00FEF2  2D                 	db	45
   175  00FEF3  32                 	db	50	;'2'
   176  00FEF4  0D                 	db	13
   177  00FEF5  0A                 	db	10
   178  00FEF6  00                 	db	0
   179  00FEF7                     STR_16:
   180  00FEF7  72                 	db	114	;'r'
   181  00FEF8  61                 	db	97	;'a'
   182  00FEF9  64                 	db	100	;'d'
   183  00FEFA  69                 	db	105	;'i'
   184  00FEFB  6F                 	db	111	;'o'
   185  00FEFC  20                 	db	32
   186  00FEFD  73                 	db	115	;'s'
   187  00FEFE  65                 	db	101	;'e'
   188  00FEFF  74                 	db	116	;'t'
   189  00FF00  20                 	db	32
   190  00FF01  73                 	db	115	;'s'
   191  00FF02  66                 	db	102	;'f'
   192  00FF03  20                 	db	32
   193  00FF04  73                 	db	115	;'s'
   194  00FF05  66                 	db	102	;'f'
   195  00FF06  37                 	db	55	;'7'
   196  00FF07  0D                 	db	13
   197  00FF08  0A                 	db	10
   198  00FF09  00                 	db	0
   199  00FF0A                     STR_17:
   200  00FF0A  72                 	db	114	;'r'
   201  00FF0B  61                 	db	97	;'a'
   202  00FF0C  64                 	db	100	;'d'
   203  00FF0D  69                 	db	105	;'i'
   204  00FF0E  6F                 	db	111	;'o'
   205  00FF0F  20                 	db	32
   206  00FF10  73                 	db	115	;'s'
   207  00FF11  65                 	db	101	;'e'
   208  00FF12  74                 	db	116	;'t'
   209  00FF13  20                 	db	32
   210  00FF14  63                 	db	99	;'c'
   211  00FF15  72                 	db	114	;'r'
   212  00FF16  20                 	db	32
   213  00FF17  34                 	db	52	;'4'
   214  00FF18  2F                 	db	47
   215  00FF19  38                 	db	56	;'8'
   216  00FF1A  0D                 	db	13
   217  00FF1B  0A                 	db	10
   218  00FF1C  00                 	db	0
   219  00FF1D                     STR_19:
   220  00FF1D  72                 	db	114	;'r'
   221  00FF1E  61                 	db	97	;'a'
   222  00FF1F  64                 	db	100	;'d'
   223  00FF20  69                 	db	105	;'i'
   224  00FF21  6F                 	db	111	;'o'
   225  00FF22  20                 	db	32
   226  00FF23  73                 	db	115	;'s'
   227  00FF24  65                 	db	101	;'e'
   228  00FF25  74                 	db	116	;'t'
   229  00FF26  20                 	db	32
   230  00FF27  77                 	db	119	;'w'
   231  00FF28  64                 	db	100	;'d'
   232  00FF29  74                 	db	116	;'t'
   233  00FF2A  20                 	db	32
   234  00FF2B  25                 	db	37
   235  00FF2C  64                 	db	100	;'d'
   236  00FF2D  0D                 	db	13
   237  00FF2E  0A                 	db	10
   238  00FF2F  00                 	db	0
   239  00FF30                     STR_18:
   240  00FF30  72                 	db	114	;'r'
   241  00FF31  61                 	db	97	;'a'
   242  00FF32  64                 	db	100	;'d'
   243  00FF33  69                 	db	105	;'i'
   244  00FF34  6F                 	db	111	;'o'
   245  00FF35  20                 	db	32
   246  00FF36  73                 	db	115	;'s'
   247  00FF37  65                 	db	101	;'e'
   248  00FF38  74                 	db	116	;'t'
   249  00FF39  20                 	db	32
   250  00FF3A  63                 	db	99	;'c'
   251  00FF3B  72                 	db	114	;'r'
   252  00FF3C  63                 	db	99	;'c'
   253  00FF3D  20                 	db	32
   254  00FF3E  6F                 	db	111	;'o'
   255  00FF3F  6E                 	db	110	;'n'
   256  00FF40  0D                 	db	13
   257  00FF41  0A                 	db	10
   258  00FF42  00                 	db	0
   259  00FF43                     STR_11:
   260  00FF43  72                 	db	114	;'r'
   261  00FF44  61                 	db	97	;'a'
   262  00FF45  64                 	db	100	;'d'
   263  00FF46  69                 	db	105	;'i'
   264  00FF47  6F                 	db	111	;'o'
   265  00FF48  20                 	db	32
   266  00FF49  67                 	db	103	;'g'
   267  00FF4A  65                 	db	101	;'e'
   268  00FF4B  74                 	db	116	;'t'
   269  00FF4C  20                 	db	32
   270  00FF4D  70                 	db	112	;'p'
   271  00FF4E  72                 	db	114	;'r'
   272  00FF4F  6C                 	db	108	;'l'
   273  00FF50  65                 	db	101	;'e'
   274  00FF51  6E                 	db	110	;'n'
   275  00FF52  0D                 	db	13
   276  00FF53  0A                 	db	10
   277  00FF54  00                 	db	0
   278  00FF55                     STR_22:
   279  00FF55  30                 	db	48	;'0'
   280  00FF56  31                 	db	49	;'1'
   281  00FF57  32                 	db	50	;'2'
   282  00FF58  33                 	db	51	;'3'
   283  00FF59  34                 	db	52	;'4'
   284  00FF5A  35                 	db	53	;'5'
   285  00FF5B  36                 	db	54	;'6'
   286  00FF5C  37                 	db	55	;'7'
   287  00FF5D  38                 	db	56	;'8'
   288  00FF5E  39                 	db	57	;'9'
   289  00FF5F  41                 	db	65	;'A'
   290  00FF60  42                 	db	66	;'B'
   291  00FF61  43                 	db	67	;'C'
   292  00FF62  44                 	db	68	;'D'
   293  00FF63  45                 	db	69	;'E'
   294  00FF64  46                 	db	70	;'F'
   295  00FF65  00                 	db	0
   296  00FF66                     STR_5:
   297  00FF66  73                 	db	115	;'s'
   298  00FF67  79                 	db	121	;'y'
   299  00FF68  73                 	db	115	;'s'
   300  00FF69  20                 	db	32
   301  00FF6A  67                 	db	103	;'g'
   302  00FF6B  65                 	db	101	;'e'
   303  00FF6C  74                 	db	116	;'t'
   304  00FF6D  20                 	db	32
   305  00FF6E  68                 	db	104	;'h'
   306  00FF6F  77                 	db	119	;'w'
   307  00FF70  65                 	db	101	;'e'
   308  00FF71  75                 	db	117	;'u'
   309  00FF72  69                 	db	105	;'i'
   310  00FF73  0D                 	db	13
   311  00FF74  0A                 	db	10
   312  00FF75  00                 	db	0
   313  00FF76                     STR_12:
   314  00FF76  72                 	db	114	;'r'
   315  00FF77  61                 	db	97	;'a'
   316  00FF78  64                 	db	100	;'d'
   317  00FF79  69                 	db	105	;'i'
   318  00FF7A  6F                 	db	111	;'o'
   319  00FF7B  20                 	db	32
   320  00FF7C  67                 	db	103	;'g'
   321  00FF7D  65                 	db	101	;'e'
   322  00FF7E  74                 	db	116	;'t'
   323  00FF7F  20                 	db	32
   324  00FF80  70                 	db	112	;'p'
   325  00FF81  77                 	db	119	;'w'
   326  00FF82  72                 	db	114	;'r'
   327  00FF83  0D                 	db	13
   328  00FF84  0A                 	db	10
   329  00FF85  00                 	db	0
   330  00FF86                     STR_8:
   331  00FF86  72                 	db	114	;'r'
   332  00FF87  61                 	db	97	;'a'
   333  00FF88  64                 	db	100	;'d'
   334  00FF89  69                 	db	105	;'i'
   335  00FF8A  6F                 	db	111	;'o'
   336  00FF8B  20                 	db	32
   337  00FF8C  67                 	db	103	;'g'
   338  00FF8D  65                 	db	101	;'e'
   339  00FF8E  74                 	db	116	;'t'
   340  00FF8F  20                 	db	32
   341  00FF90  73                 	db	115	;'s'
   342  00FF91  66                 	db	102	;'f'
   343  00FF92  0D                 	db	13
   344  00FF93  0A                 	db	10
   345  00FF94  00                 	db	0
   346  00FF95                     STR_10:
   347  00FF95  72                 	db	114	;'r'
   348  00FF96  61                 	db	97	;'a'
   349  00FF97  64                 	db	100	;'d'
   350  00FF98  69                 	db	105	;'i'
   351  00FF99  6F                 	db	111	;'o'
   352  00FF9A  20                 	db	32
   353  00FF9B  67                 	db	103	;'g'
   354  00FF9C  65                 	db	101	;'e'
   355  00FF9D  74                 	db	116	;'t'
   356  00FF9E  20                 	db	32
   357  00FF9F  63                 	db	99	;'c'
   358  00FFA0  72                 	db	114	;'r'
   359  00FFA1  0D                 	db	13
   360  00FFA2  0A                 	db	10
   361  00FFA3  00                 	db	0
   362  00FFA4                     STR_9:
   363  00FFA4  72                 	db	114	;'r'
   364  00FFA5  61                 	db	97	;'a'
   365  00FFA6  64                 	db	100	;'d'
   366  00FFA7  69                 	db	105	;'i'
   367  00FFA8  6F                 	db	111	;'o'
   368  00FFA9  20                 	db	32
   369  00FFAA  67                 	db	103	;'g'
   370  00FFAB  65                 	db	101	;'e'
   371  00FFAC  74                 	db	116	;'t'
   372  00FFAD  20                 	db	32
   373  00FFAE  62                 	db	98	;'b'
   374  00FFAF  77                 	db	119	;'w'
   375  00FFB0  0D                 	db	13
   376  00FFB1  0A                 	db	10
   377  00FFB2  00                 	db	0
   378  00FFB3                     STR_7:
   379  00FFB3  73                 	db	115	;'s'
   380  00FFB4  79                 	db	121	;'y'
   381  00FFB5  73                 	db	115	;'s'
   382  00FFB6  20                 	db	32
   383  00FFB7  67                 	db	103	;'g'
   384  00FFB8  65                 	db	101	;'e'
   385  00FFB9  74                 	db	116	;'t'
   386  00FFBA  20                 	db	32
   387  00FFBB  76                 	db	118	;'v'
   388  00FFBC  65                 	db	101	;'e'
   389  00FFBD  72                 	db	114	;'r'
   390  00FFBE  0D                 	db	13
   391  00FFBF  0A                 	db	10
   392  00FFC0  00                 	db	0
   393  00FFC1                     STR_13:
   394  00FFC1  6D                 	db	109	;'m'
   395  00FFC2  61                 	db	97	;'a'
   396  00FFC3  63                 	db	99	;'c'
   397  00FFC4  20                 	db	32
   398  00FFC5  70                 	db	112	;'p'
   399  00FFC6  61                 	db	97	;'a'
   400  00FFC7  75                 	db	117	;'u'
   401  00FFC8  73                 	db	115	;'s'
   402  00FFC9  65                 	db	101	;'e'
   403  00FFCA  0D                 	db	13
   404  00FFCB  0A                 	db	10
   405  00FFCC  00                 	db	0
   406  00FFCD                     STR_6:
   407  00FFCD  73                 	db	115	;'s'
   408  00FFCE  79                 	db	121	;'y'
   409  00FFCF  73                 	db	115	;'s'
   410  00FFD0  20                 	db	32
   411  00FFD1  72                 	db	114	;'r'
   412  00FFD2  65                 	db	101	;'e'
   413  00FFD3  73                 	db	115	;'s'
   414  00FFD4  65                 	db	101	;'e'
   415  00FFD5  74                 	db	116	;'t'
   416  00FFD6  0D                 	db	13
   417  00FFD7  0A                 	db	10
   418  00FFD8  00                 	db	0
   419  00FFD9                     STR_3:
   420  00FFD9  72                 	db	114	;'r'
   421  00FFDA  61                 	db	97	;'a'
   422  00FFDB  64                 	db	100	;'d'
   423  00FFDC  69                 	db	105	;'i'
   424  00FFDD  6F                 	db	111	;'o'
   425  00FFDE  5F                 	db	95	;'_'
   426  00FFDF  74                 	db	116	;'t'
   427  00FFE0  78                 	db	120	;'x'
   428  00FFE1  5F                 	db	95	;'_'
   429  00FFE2  6F                 	db	111	;'o'
   430  00FFE3  6B                 	db	107	;'k'
   431  00FFE4  00                 	db	0
   432  00FFE5                     STR_1:
   433  00FFE5  72                 	db	114	;'r'
   434  00FFE6  61                 	db	97	;'a'
   435  00FFE7  64                 	db	100	;'d'
   436  00FFE8  69                 	db	105	;'i'
   437  00FFE9  6F                 	db	111	;'o'
   438  00FFEA  5F                 	db	95	;'_'
   439  00FFEB  65                 	db	101	;'e'
   440  00FFEC  72                 	db	114	;'r'
   441  00FFED  72                 	db	114	;'r'
   442  00FFEE  00                 	db	0
   443  00FFEF                     STR_2:
   444  00FFEF  72                 	db	114	;'r'
   445  00FFF0  61                 	db	97	;'a'
   446  00FFF1  64                 	db	100	;'d'
   447  00FFF2  69                 	db	105	;'i'
   448  00FFF3  6F                 	db	111	;'o'
   449  00FFF4  5F                 	db	95	;'_'
   450  00FFF5  72                 	db	114	;'r'
   451  00FFF6  78                 	db	120	;'x'
   452  00FFF7  00                 	db	0
   453  00FFF8                     STR_21:
   454  00FFF8  28                 	db	40
   455  00FFF9  6E                 	db	110	;'n'
   456  00FFFA  75                 	db	117	;'u'
   457  00FFFB  6C                 	db	108	;'l'
   458  00FFFC  6C                 	db	108	;'l'
   459  00FFFD  29                 	db	41
   460  00FFFE  00                 	db	0
   461  0000                     
   462                           ; #config settings
   463  00FFFF  00                 	db	0	; dummy byte at the end
   464  0000                     
   465                           	psect	nvCOMRAM
   466  00003A                     __pnvCOMRAM:
   467                           	opt stack 0
   468  00003A                     _eusart1TxBufferRemaining:
   469                           	opt stack 0
   470  00003A                     	ds	1
   471  0000                     _ANSELA	set	3896
   472  0000                     _ANSELB	set	3897
   473  0000                     _ANSELC	set	3898
   474  0000                     _ANSELCbits	set	3898
   475  0000                     _CCPTMRS0bits	set	3913
   476  0000                     _BAUDCON1	set	4024
   477  0000                     _CCP1CON	set	4029
   478  0000                     _CCPR1H	set	4031
   479  0000                     _CCPR1L	set	4030
   480  0000                     _ECCP1AS	set	4022
   481  0000                     _INTCON2bits	set	4081
   482  0000                     _INTCONbits	set	4082
   483  0000                     _IPR1bits	set	3999
   484  0000                     _LATA	set	3977
   485  0000                     _LATB	set	3978
   486  0000                     _LATC	set	3979
   487  0000                     _OSCCON	set	4051
   488  0000                     _OSCCON2	set	4050
   489  0000                     _OSCTUNE	set	3995
   490  0000                     _PIE1bits	set	3997
   491  0000                     _PIR1bits	set	3998
   492  0000                     _PORTCbits	set	3970
   493  0000                     _PR2	set	4027
   494  0000                     _PSTR1CON	set	4025
   495  0000                     _PWM1CON	set	4023
   496  0000                     _RCONbits	set	4048
   497  0000                     _RCREG1	set	4014
   498  0000                     _RCSTA1	set	4011
   499  0000                     _RCSTA1bits	set	4011
   500  0000                     _SPBRG1	set	4015
   501  0000                     _SPBRGH1	set	4016
   502  0000                     _T2CON	set	4026
   503  0000                     _T2CONbits	set	4026
   504  0000                     _TMR2	set	4028
   505  0000                     _TRISA	set	3986
   506  0000                     _TRISB	set	3987
   507  0000                     _TRISC	set	3988
   508  0000                     _TXREG1	set	4013
   509  0000                     _TXSTA1	set	4012
   510  0000                     _WPUB	set	3937
   511  0000                     _LATC3	set	31835
   512  0000                     _LATC4	set	31836
   513  0000                     _TRISC3	set	31907
   514  0000                     _TRISC4	set	31908
   515                           
   516                           	psect	cinit
   517  000F2A                     __pcinit:
   518                           	opt stack 0
   519  000F2A                     start_initialization:
   520                           	opt stack 0
   521  000F2A                     __initialization:
   522                           	opt stack 0
   523                           
   524                           ; Clear objects allocated to BANK2 (128 bytes)
   525  000F2A  EE02  F000         	lfsr	0,__pbssBANK2
   526  000F2E  0E80               	movlw	128
   527  000F30                     clear_0:
   528  000F30  6AEE               	clrf	postinc0,c
   529  000F32  06E8               	decf	wreg,f,c
   530  000F34  E1FD               	bnz	clear_0
   531                           
   532                           ; Clear objects allocated to BANK1 (256 bytes)
   533  000F36  EE01  F000         	lfsr	0,__pbssBANK1
   534  000F3A  EE11 F000          	lfsr	1,256
   535  000F3E                     clear_1:
   536  000F3E  6AEE               	clrf	postinc0,c
   537  000F40  50E5               	movf	postdec1,w,c
   538  000F42  50E1               	movf	fsr1l,w,c
   539  000F44  E1FC               	bnz	clear_1
   540  000F46  50E2               	movf	fsr1h,w,c
   541  000F48  E1FA               	bnz	clear_1
   542                           
   543                           ; Clear objects allocated to BANK0 (41 bytes)
   544  000F4A  EE00  F060         	lfsr	0,__pbssBANK0
   545  000F4E  0E29               	movlw	41
   546  000F50                     clear_2:
   547  000F50  6AEE               	clrf	postinc0,c
   548  000F52  06E8               	decf	wreg,f,c
   549  000F54  E1FD               	bnz	clear_2
   550                           
   551                           ; Clear objects allocated to COMRAM (10 bytes)
   552  000F56  EE00  F02C         	lfsr	0,__pbssCOMRAM
   553  000F5A  0E0A               	movlw	10
   554  000F5C                     clear_3:
   555  000F5C  6AEE               	clrf	postinc0,c
   556  000F5E  06E8               	decf	wreg,f,c
   557  000F60  E1FD               	bnz	clear_3
   558                           
   559                           ; Initialize objects allocated to COMRAM (4 bytes)
   560                           ; load TBLPTR registers with __pidataCOMRAM
   561  000F62  0E98               	movlw	low __pidataCOMRAM
   562  000F64  6EF6               	movwf	tblptrl,c
   563  000F66  0E14               	movlw	high __pidataCOMRAM
   564  000F68  6EF7               	movwf	tblptrh,c
   565  000F6A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   566  000F6C  6EF8               	movwf	tblptru,c
   567  000F6E  EE00  F036         	lfsr	0,__pdataCOMRAM
   568  000F72  EE10 F004          	lfsr	1,4
   569  000F76                     copy_data0:
   570  000F76  0009               	tblrd		*+
   571  000F78  CFF5 FFEE          	movff	tablat,postinc0
   572  000F7C  50E5               	movf	postdec1,w,c
   573  000F7E  50E1               	movf	fsr1l,w,c
   574  000F80  E1FA               	bnz	copy_data0
   575  000F82                     end_of_initialization:
   576                           	opt stack 0
   577  000F82                     __end_of__initialization:
   578                           	opt stack 0
   579  000F82  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   580  000F84  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   581  000F86  0100               	movlb	0
   582  000F88  EF5E  F005         	goto	_main	;jump to C main() function
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1h	equ	0xFE2
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	bssCOMRAM
   594  00002C                     __pbssCOMRAM:
   595                           	opt stack 0
   596  00002C                     _index:
   597                           	opt stack 0
   598  00002C                     	ds	2
   599  00002E                     _eusart1RxCount:
   600                           	opt stack 0
   601  00002E                     	ds	1
   602  00002F                     _eusart1RxHead:
   603                           	opt stack 0
   604  00002F                     	ds	1
   605  000030                     _eusart1RxTail:
   606                           	opt stack 0
   607  000030                     	ds	1
   608  000031                     _eusart1TxHead:
   609                           	opt stack 0
   610  000031                     	ds	1
   611  000032                     _eusart1TxTail:
   612                           	opt stack 0
   613  000032                     	ds	1
   614  000033                     _ready:
   615                           	opt stack 0
   616  000033                     	ds	1
   617  000034                     _uartState:
   618                           	opt stack 0
   619  000034                     	ds	1
   620  000035                     _val:
   621                           	opt stack 0
   622  000035                     	ds	1
   623                           tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           postdec1	equ	0xFE5
   630                           fsr1h	equ	0xFE2
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	dataCOMRAM
   634  000036                     __pdataCOMRAM:
   635                           	opt stack 0
   636  000036                     _randx:
   637                           	opt stack 0
   638  000036                     	ds	4
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           postdec1	equ	0xFE5
   646                           fsr1h	equ	0xFE2
   647                           fsr1l	equ	0xFE1
   648                           
   649                           	psect	bssBANK0
   650  000060                     __pbssBANK0:
   651                           	opt stack 0
   652  000060                     _inc:
   653                           	opt stack 0
   654  000060                     	ds	1
   655  000061                     _uuid:
   656                           	opt stack 0
   657  000061                     	ds	40
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           postdec1	equ	0xFE5
   665                           fsr1h	equ	0xFE2
   666                           fsr1l	equ	0xFE1
   667                           
   668                           	psect	bssBANK1
   669  000100                     __pbssBANK1:
   670                           	opt stack 0
   671  000100                     _eusart1TxBuffer:
   672                           	opt stack 0
   673  000100                     	ds	128
   674  000180                     _line:
   675                           	opt stack 0
   676  000180                     	ds	128
   677                           tblptru	equ	0xFF8
   678                           tblptrh	equ	0xFF7
   679                           tblptrl	equ	0xFF6
   680                           tablat	equ	0xFF5
   681                           postinc0	equ	0xFEE
   682                           wreg	equ	0xFE8
   683                           postdec1	equ	0xFE5
   684                           fsr1h	equ	0xFE2
   685                           fsr1l	equ	0xFE1
   686                           
   687                           	psect	bssBANK2
   688  000200                     __pbssBANK2:
   689                           	opt stack 0
   690  000200                     _eusart1RxBuffer:
   691                           	opt stack 0
   692  000200                     	ds	128
   693                           tblptru	equ	0xFF8
   694                           tblptrh	equ	0xFF7
   695                           tblptrl	equ	0xFF6
   696                           tablat	equ	0xFF5
   697                           postinc0	equ	0xFEE
   698                           wreg	equ	0xFE8
   699                           postdec1	equ	0xFE5
   700                           fsr1h	equ	0xFE2
   701                           fsr1l	equ	0xFE1
   702                           
   703                           	psect	cstackBANK0
   704  000089                     __pcstackBANK0:
   705                           	opt stack 0
   706  000089                     ?___lwmod:
   707                           	opt stack 0
   708  000089                     ?___lmul:
   709                           	opt stack 0
   710  000089                     ___lwmod@dividend:
   711                           	opt stack 0
   712  000089                     ___lmul@multiplier:
   713                           	opt stack 0
   714                           
   715                           ; 4 bytes @ 0x0
   716  000089                     	ds	2
   717  00008B                     ___lwmod@divisor:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x2
   721  00008B                     	ds	2
   722  00008D                     ___lwmod@counter:
   723                           	opt stack 0
   724  00008D                     ___lmul@multiplicand:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x4
   728  00008D                     	ds	1
   729  00008E                     ?_printf:
   730                           	opt stack 0
   731  00008E                     printf@f:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x5
   735  00008E                     	ds	3
   736  000091                     ?___awmod:
   737                           	opt stack 0
   738  000091                     ?_strtol:
   739                           	opt stack 0
   740  000091                     wait_5ms@j:
   741                           	opt stack 0
   742  000091                     ___awmod@dividend:
   743                           	opt stack 0
   744  000091                     strtol@s:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x8
   748  000091                     	ds	2
   749  000093                     ??_wait_5ms:
   750  000093                     ___awmod@divisor:
   751                           	opt stack 0
   752  000093                     strtol@endptr:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0xA
   756  000093                     	ds	2
   757  000095                     ___awmod@counter:
   758                           	opt stack 0
   759  000095                     strtol@base:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0xC
   763  000095                     	ds	1
   764  000096                     ___awmod@sign:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0xD
   768  000096                     	ds	1
   769  000097                     ??_strtol:
   770                           
   771                           ; 1 bytes @ 0xE
   772  000097                     	ds	3
   773  00009A                     ??_printf:
   774                           
   775                           ; 1 bytes @ 0x11
   776  00009A                     	ds	1
   777  00009B                     strtol@sign:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x12
   781  00009B                     	ds	1
   782  00009C                     strtol@a:
   783                           	opt stack 0
   784                           
   785                           ; 4 bytes @ 0x13
   786  00009C                     	ds	2
   787  00009E                     printf@idx:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x15
   791  00009E                     	ds	1
   792  00009F                     printf@prec:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x16
   796  00009F                     	ds	1
   797  0000A0                     strtol@c:
   798                           	opt stack 0
   799  0000A0                     printf@cp:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x17
   803  0000A0                     	ds	1
   804  0000A1                     srand@x:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x18
   808  0000A1                     	ds	1
   809  0000A2                     printf@ap:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x19
   813  0000A2                     	ds	2
   814  0000A4                     printf@len:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x1B
   818  0000A4                     	ds	2
   819  0000A6                     printf@val:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x1D
   823  0000A6                     	ds	2
   824  0000A8                     printf@flag:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x1F
   828  0000A8                     	ds	1
   829  0000A9                     printf@width:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x20
   833  0000A9                     	ds	2
   834  0000AB                     printf@c:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x22
   838  0000AB                     	ds	1
   839  0000AC                     InitRadio@delay:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x23
   843  0000AC                     	ds	2
   844  0000AE                     main@crc:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x25
   848  0000AE                     	ds	1
   849  0000AF                     main@msb:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x26
   853  0000AF                     	ds	1
   854  0000B0                     main@lsb:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x27
   858  0000B0                     	ds	1
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           postdec1	equ	0xFE5
   866                           fsr1h	equ	0xFE2
   867                           fsr1l	equ	0xFE1
   868                           
   869                           	psect	cstackCOMRAM
   870  000001                     __pcstackCOMRAM:
   871                           	opt stack 0
   872  000001                     ?_strcmp:
   873                           	opt stack 0
   874  000001                     ?_strlen:
   875                           	opt stack 0
   876  000001                     ?_strchr:
   877                           	opt stack 0
   878  000001                     EUSART1_Read@readValue:
   879                           	opt stack 0
   880  000001                     strcmp@s1:
   881                           	opt stack 0
   882  000001                     strchr@ptr:
   883                           	opt stack 0
   884  000001                     strlen@s:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x0
   888  000001                     	ds	2
   889  000003                     ??_strlen:
   890  000003                     strcmp@s2:
   891                           	opt stack 0
   892  000003                     strchr@chr:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x2
   896  000003                     	ds	2
   897  000005                     ??_strcmp:
   898  000005                     strlen@cp:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x4
   902  000005                     	ds	1
   903  000006                     strcmp@r:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x5
   907  000006                     	ds	1
   908  000007                     ?_strncmp:
   909                           	opt stack 0
   910  000007                     strncmp@s1:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x6
   914  000007                     	ds	2
   915  000009                     strncmp@s2:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x8
   919  000009                     	ds	2
   920  00000B                     strncmp@len:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0xA
   924  00000B                     	ds	2
   925  00000D                     ??_strncmp:
   926                           
   927                           ; 1 bytes @ 0xC
   928  00000D                     	ds	3
   929  000010                     ?_strstr:
   930                           	opt stack 0
   931  000010                     strstr@s1:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0xF
   935  000010                     	ds	2
   936  000012                     strstr@s2:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x11
   940  000012                     	ds	2
   941  000014                     ??_EUSART1_Receive_ISR:
   942  000014                     
   943                           ; 1 bytes @ 0x13
   944  000014                     	ds	1
   945  000015                     EUSART1_Receive_ISR@state:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x14
   949  000015                     	ds	2
   950  000017                     ??_INTERRUPT_InterruptManager:
   951                           
   952                           ; 1 bytes @ 0x16
   953  000017                     	ds	14
   954  000025                     ??_I2C_Init:
   955  000025                     ??_isdigit:
   956  000025                     ??_isspace:
   957  000025                     ??_isupper:
   958  000025                     ?___wmul:
   959                           	opt stack 0
   960  000025                     ?___lwdiv:
   961                           	opt stack 0
   962  000025                     EUSART1_Write@txData:
   963                           	opt stack 0
   964  000025                     I2C_Write_Byte@byt:
   965                           	opt stack 0
   966  000025                     I2C_Read_Byte@ack:
   967                           	opt stack 0
   968  000025                     toupper@c:
   969                           	opt stack 0
   970  000025                     ___wmul@multiplier:
   971                           	opt stack 0
   972  000025                     ___lwdiv@dividend:
   973                           	opt stack 0
   974  000025                     strcpy@to:
   975                           	opt stack 0
   976  000025                     ___lmul@product:
   977                           	opt stack 0
   978                           
   979                           ; 4 bytes @ 0x24
   980  000025                     	ds	1
   981  000026                     putch@txData:
   982                           	opt stack 0
   983  000026                     I2C_Write_Byte@i:
   984                           	opt stack 0
   985  000026                     I2C_Read_Byte@val:
   986                           	opt stack 0
   987  000026                     _isdigit$1236:
   988                           	opt stack 0
   989  000026                     _isspace$1481:
   990                           	opt stack 0
   991  000026                     _isupper$1484:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x25
   995  000026                     	ds	1
   996  000027                     I2C_Read_Byte@i:
   997                           	opt stack 0
   998  000027                     isdigit@c:
   999                           	opt stack 0
  1000  000027                     isspace@c:
  1001                           	opt stack 0
  1002  000027                     isupper@c:
  1003                           	opt stack 0
  1004  000027                     ___wmul@multiplicand:
  1005                           	opt stack 0
  1006  000027                     ___lwdiv@divisor:
  1007                           	opt stack 0
  1008  000027                     strcpy@from:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x26
  1012  000027                     	ds	1
  1013  000028                     ??_isalpha:
  1014                           
  1015                           ; 1 bytes @ 0x27
  1016  000028                     	ds	1
  1017  000029                     ?_rand:
  1018                           	opt stack 0
  1019  000029                     _isalpha$1478:
  1020                           	opt stack 0
  1021  000029                     ___wmul@product:
  1022                           	opt stack 0
  1023  000029                     ___lwdiv@quotient:
  1024                           	opt stack 0
  1025  000029                     strcpy@cp:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x28
  1029  000029                     	ds	1
  1030  00002A                     isalpha@c:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x29
  1034  00002A                     	ds	1
  1035  00002B                     wait_5ms@i:
  1036                           	opt stack 0
  1037  00002B                     ___lwdiv@counter:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x2A
  1041  00002B                     	ds	1
  1042  00002C                     tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1h	equ	0xFE2
  1050                           fsr1l	equ	0xFE1
  1051                           
  1052                           ; 1 bytes @ 0x2B
  1053 ;;
  1054 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1055 ;;
  1056 ;; *************** function _main *****************
  1057 ;; Defined at:
  1058 ;;		line 105 in file "main.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;		None
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  lsb             1   39[BANK0 ] unsigned char 
  1063 ;;  msb             1   38[BANK0 ] unsigned char 
  1064 ;;  crc             1   37[BANK0 ] unsigned char 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1077 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1078 ;;Total ram usage:        3 bytes
  1079 ;; Hardware stack levels required when called:    9
  1080 ;; This function calls:
  1081 ;;		_I2C_Read_Byte
  1082 ;;		_I2C_Start
  1083 ;;		_I2C_Stop
  1084 ;;		_I2C_Write_Byte
  1085 ;;		_InitRadio
  1086 ;;		_InitSensor
  1087 ;;		_SYSTEM_Initialize
  1088 ;;		_printf
  1089 ;;		_rand
  1090 ;;		_read_line
  1091 ;;		_wait_5ms
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  000ABC                     __ptext0:
  1099                           	opt stack 0
  1100  000ABC                     _main:
  1101                           	opt stack 22
  1102                           
  1103                           ;main.c: 106: SYSTEM_Initialize();
  1104                           
  1105                           ;incstack = 0
  1106  000ABC  EC08  F00A         	call	_SYSTEM_Initialize	;wreg free
  1107                           
  1108                           ;main.c: 107: (INTCONbits.GIE = 1);
  1109  000AC0  8EF2               	bsf	intcon,7,c	;volatile
  1110                           
  1111                           ;main.c: 108: (INTCONbits.PEIE = 1);
  1112  000AC2  8CF2               	bsf	intcon,6,c	;volatile
  1113                           
  1114                           ;main.c: 110: InitRadio();
  1115  000AC4  ECEE  F003         	call	_InitRadio	;wreg free
  1116                           
  1117                           ;main.c: 111: InitSensor();
  1118  000AC8  EC57  F009         	call	_InitSensor	;wreg free
  1119  000ACC                     l3405:
  1120                           
  1121                           ;main.c: 116: I2C_Start();
  1122  000ACC  EC12  F009         	call	_I2C_Start	;wreg free
  1123                           
  1124                           ;main.c: 117: I2C_Write_Byte(0x88);
  1125  000AD0  0E88               	movlw	136
  1126  000AD2  EC27  F007         	call	_I2C_Write_Byte
  1127                           
  1128                           ;main.c: 118: I2C_Write_Byte(0x00);
  1129  000AD6  0E00               	movlw	0
  1130  000AD8  EC27  F007         	call	_I2C_Write_Byte
  1131                           
  1132                           ;main.c: 119: I2C_Start();
  1133  000ADC  EC12  F009         	call	_I2C_Start	;wreg free
  1134                           
  1135                           ;main.c: 120: I2C_Write_Byte(0x89);
  1136  000AE0  0E89               	movlw	137
  1137  000AE2  EC27  F007         	call	_I2C_Write_Byte
  1138                           
  1139                           ;main.c: 121: uint8_t msb = I2C_Read_Byte(1);
  1140  000AE6  0E01               	movlw	1
  1141  000AE8  EC0C  F006         	call	_I2C_Read_Byte
  1142  000AEC  0100               	movlb	0	; () banked
  1143  000AEE  6FAF               	movwf	main@msb& (0+255),b
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;main.c: 122: uint8_t lsb = I2C_Read_Byte(0);
  1147  000AF0  0E00               	movlw	0
  1148  000AF2  EC0C  F006         	call	_I2C_Read_Byte
  1149  000AF6  0100               	movlb	0	; () banked
  1150  000AF8  6FB0               	movwf	main@lsb& (0+255),b
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;main.c: 123: I2C_Stop();
  1154  000AFA  ECDB  F009         	call	_I2C_Stop	;wreg free
  1155                           
  1156                           ;main.c: 124: uint8_t crc = msb ^ lsb;
  1157  000AFE  0100               	movlb	0	; () banked
  1158  000B00  51AF               	movf	main@msb& (0+255),w,b
  1159  000B02  0100               	movlb	0	; () banked
  1160  000B04  19B0               	xorwf	main@lsb& (0+255),w,b
  1161  000B06  0100               	movlb	0	; () banked
  1162  000B08  6FAE               	movwf	main@crc& (0+255),b
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;main.c: 128: printf("radio tx 41%s%02X%02X%02X%02X0000\r\n",uuid,inc++,msb,lsb,crc);
  1166  000B0A  0EAD               	movlw	low STR_20
  1167  000B0C  0100               	movlb	0	; () banked
  1168  000B0E  6F8E               	movwf	printf@f& (0+255),b
  1169  000B10  0EFE               	movlw	high STR_20
  1170  000B12  0100               	movlb	0	; () banked
  1171  000B14  6F8F               	movwf	(printf@f+1)& (0+255),b
  1172  000B16  0E61               	movlw	low _uuid
  1173  000B18  0100               	movlb	0	; () banked
  1174  000B1A  6F90               	movwf	(?_printf+2)& (0+255),b
  1175  000B1C  0E00               	movlw	high _uuid
  1176  000B1E  0100               	movlb	0	; () banked
  1177  000B20  6F91               	movwf	(?_printf+3)& (0+255),b
  1178  000B22  C060  F092         	movff	_inc,?_printf+4
  1179  000B26  0100               	movlb	0	; () banked
  1180  000B28  6B93               	clrf	(?_printf+5)& (0+255),b
  1181  000B2A  C0AF  F094         	movff	main@msb,?_printf+6
  1182  000B2E  0100               	movlb	0	; () banked
  1183  000B30  6B95               	clrf	(?_printf+7)& (0+255),b
  1184  000B32  C0B0  F096         	movff	main@lsb,?_printf+8
  1185  000B36  0100               	movlb	0	; () banked
  1186  000B38  6B97               	clrf	(?_printf+9)& (0+255),b
  1187  000B3A  C0AE  F098         	movff	main@crc,?_printf+10
  1188  000B3E  0100               	movlb	0	; () banked
  1189  000B40  6B99               	clrf	(?_printf+11)& (0+255),b
  1190  000B42  EC4C  F000         	call	_printf	;wreg free
  1191  000B46  0100               	movlb	0	; () banked
  1192  000B48  2B60               	incf	_inc& (0+255),f,b
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 129: read_line();
  1196  000B4A  EC36  F00A         	call	_read_line	;wreg free
  1197                           
  1198                           ;main.c: 130: read_line();
  1199  000B4E  EC36  F00A         	call	_read_line	;wreg free
  1200                           
  1201                           ;main.c: 133: wait_5ms(200);
  1202  000B52  0E00               	movlw	0
  1203  000B54  0100               	movlb	0	; () banked
  1204  000B56  6F92               	movwf	(wait_5ms@j+1)& (0+255),b
  1205  000B58  0EC8               	movlw	200
  1206  000B5A  6F91               	movwf	wait_5ms@j& (0+255),b
  1207  000B5C  EC4A  F008         	call	_wait_5ms	;wreg free
  1208                           
  1209                           ;main.c: 134: wait_5ms((rand()%4));
  1210  000B60  ECF7  F007         	call	_rand	;wreg free
  1211  000B64  0E03               	movlw	3
  1212  000B66  1429               	andwf	?_rand,w,c
  1213  000B68  0100               	movlb	0	; () banked
  1214  000B6A  6F91               	movwf	wait_5ms@j& (0+255),b
  1215  000B6C  0100               	movlb	0	; () banked
  1216  000B6E  6B92               	clrf	(wait_5ms@j+1)& (0+255),b
  1217  000B70  EC4A  F008         	call	_wait_5ms	;wreg free
  1218  000B74  D7AB               	goto	l3405
  1219  000B76                     __end_of_main:
  1220                           	opt stack 0
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           intcon	equ	0xFF2
  1226                           postinc0	equ	0xFEE
  1227                           wreg	equ	0xFE8
  1228                           postdec1	equ	0xFE5
  1229                           fsr1h	equ	0xFE2
  1230                           fsr1l	equ	0xFE1
  1231                           
  1232 ;; *************** function _SYSTEM_Initialize *****************
  1233 ;; Defined at:
  1234 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;		None
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;		None
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;Total ram usage:        0 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    6
  1255 ;; This function calls:
  1256 ;;		_EPWM1_Initialize
  1257 ;;		_EUSART1_Initialize
  1258 ;;		_INTERRUPT_Initialize
  1259 ;;		_OSCILLATOR_Initialize
  1260 ;;		_PIN_MANAGER_Initialize
  1261 ;;		_TMR2_Initialize
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text1
  1268  001410                     __ptext1:
  1269                           	opt stack 0
  1270  001410                     _SYSTEM_Initialize:
  1271                           	opt stack 24
  1272                           
  1273                           ;mcc.c: 115: INTERRUPT_Initialize();
  1274                           
  1275                           ;incstack = 0
  1276  001410  EC42  F00A         	call	_INTERRUPT_Initialize	;wreg free
  1277                           
  1278                           ;mcc.c: 116: PIN_MANAGER_Initialize();
  1279  001414  ECC4  F008         	call	_PIN_MANAGER_Initialize	;wreg free
  1280                           
  1281                           ;mcc.c: 117: OSCILLATOR_Initialize();
  1282  001418  EC28  F00A         	call	_OSCILLATOR_Initialize	;wreg free
  1283                           
  1284                           ;mcc.c: 118: EPWM1_Initialize();
  1285  00141C  ECBB  F009         	call	_EPWM1_Initialize	;wreg free
  1286                           
  1287                           ;mcc.c: 119: TMR2_Initialize();
  1288  001420  EC1F  F00A         	call	_TMR2_Initialize	;wreg free
  1289                           
  1290                           ;mcc.c: 120: EUSART1_Initialize();
  1291  001424  ECDE  F008         	call	_EUSART1_Initialize	;wreg free
  1292  001428  0012               	return		;funcret
  1293  00142A                     __end_of_SYSTEM_Initialize:
  1294                           	opt stack 0
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           intcon	equ	0xFF2
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           postdec1	equ	0xFE5
  1303                           fsr1h	equ	0xFE2
  1304                           fsr1l	equ	0xFE1
  1305                           
  1306 ;; *************** function _TMR2_Initialize *****************
  1307 ;; Defined at:
  1308 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    5
  1329 ;; This function calls:
  1330 ;;		_TMR2_StartTimer
  1331 ;; This function is called by:
  1332 ;;		_SYSTEM_Initialize
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text2
  1337  00143E                     __ptext2:
  1338                           	opt stack 0
  1339  00143E                     _TMR2_Initialize:
  1340                           	opt stack 24
  1341                           
  1342                           ;tmr2.c: 63: T2CON = 0x00;
  1343                           
  1344                           ;incstack = 0
  1345  00143E  0E00               	movlw	0
  1346  001440  6EBA               	movwf	4026,c	;volatile
  1347                           
  1348                           ;tmr2.c: 66: PR2 = 0xFF;
  1349  001442  68BB               	setf	4027,c	;volatile
  1350                           
  1351                           ;tmr2.c: 69: TMR2 = 0x00;
  1352  001444  0E00               	movlw	0
  1353  001446  6EBC               	movwf	4028,c	;volatile
  1354                           
  1355                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  1356  001448  929E               	bcf	3998,1,c	;volatile
  1357                           
  1358                           ;tmr2.c: 75: TMR2_StartTimer();
  1359  00144A  EC4E  F00A         	call	_TMR2_StartTimer	;wreg free
  1360  00144E  0012               	return		;funcret
  1361  001450                     __end_of_TMR2_Initialize:
  1362                           	opt stack 0
  1363                           tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           intcon	equ	0xFF2
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           postdec1	equ	0xFE5
  1371                           fsr1h	equ	0xFE2
  1372                           fsr1l	equ	0xFE1
  1373                           
  1374 ;; *************** function _TMR2_StartTimer *****************
  1375 ;; Defined at:
  1376 ;;		line 78 in file "mcc_generated_files/tmr2.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		None
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;Total ram usage:        0 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    4
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_TMR2_Initialize
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text3
  1405  00149C                     __ptext3:
  1406                           	opt stack 0
  1407  00149C                     _TMR2_StartTimer:
  1408                           	opt stack 24
  1409                           
  1410                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
  1411                           
  1412                           ;incstack = 0
  1413  00149C  84BA               	bsf	4026,2,c	;volatile
  1414  00149E  0012               	return		;funcret
  1415  0014A0                     __end_of_TMR2_StartTimer:
  1416                           	opt stack 0
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           intcon	equ	0xFF2
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           postdec1	equ	0xFE5
  1425                           fsr1h	equ	0xFE2
  1426                           fsr1l	equ	0xFE1
  1427                           
  1428 ;; *************** function _PIN_MANAGER_Initialize *****************
  1429 ;; Defined at:
  1430 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;		None
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;		None
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      void 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1448 ;;Total ram usage:        0 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:    4
  1451 ;; This function calls:
  1452 ;;		Nothing
  1453 ;; This function is called by:
  1454 ;;		_SYSTEM_Initialize
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text4
  1459  001188                     __ptext4:
  1460                           	opt stack 0
  1461  001188                     _PIN_MANAGER_Initialize:
  1462                           	opt stack 25
  1463                           
  1464                           ;pin_manager.c: 51: LATB = 0x0;
  1465                           
  1466                           ;incstack = 0
  1467  001188  0E00               	movlw	0
  1468  00118A  6E8A               	movwf	3978,c	;volatile
  1469                           
  1470                           ;pin_manager.c: 52: LATA = 0x0;
  1471  00118C  0E00               	movlw	0
  1472  00118E  6E89               	movwf	3977,c	;volatile
  1473                           
  1474                           ;pin_manager.c: 53: LATC = 0x0;
  1475  001190  0E00               	movlw	0
  1476  001192  6E8B               	movwf	3979,c	;volatile
  1477                           
  1478                           ;pin_manager.c: 54: ANSELA = 0x2F;
  1479  001194  0E2F               	movlw	47
  1480  001196  010F               	movlb	15	; () banked
  1481  001198  6F38               	movwf	56,b	;volatile
  1482                           
  1483                           ;pin_manager.c: 55: ANSELB = 0x3E;
  1484  00119A  0E3E               	movlw	62
  1485  00119C  010F               	movlb	15	; () banked
  1486  00119E  6F39               	movwf	57,b	;volatile
  1487                           
  1488                           ;pin_manager.c: 56: ANSELC = 0x38;
  1489  0011A0  0E38               	movlw	56
  1490  0011A2  010F               	movlb	15	; () banked
  1491  0011A4  6F3A               	movwf	58,b	;volatile
  1492                           
  1493                           ;pin_manager.c: 57: TRISB = 0xC8;
  1494  0011A6  0EC8               	movlw	200
  1495  0011A8  6E93               	movwf	3987,c	;volatile
  1496                           
  1497                           ;pin_manager.c: 58: TRISC = 0xF9;
  1498  0011AA  0EF9               	movlw	249
  1499  0011AC  6E94               	movwf	3988,c	;volatile
  1500                           
  1501                           ;pin_manager.c: 59: WPUB = 0xFE;
  1502  0011AE  0EFE               	movlw	254
  1503  0011B0  6E61               	movwf	3937,c	;volatile
  1504                           
  1505                           ;pin_manager.c: 60: TRISA = 0xEF;
  1506  0011B2  0EEF               	movlw	239
  1507  0011B4  6E92               	movwf	3986,c	;volatile
  1508                           
  1509                           ; BSR set to: 15
  1510                           ;pin_manager.c: 62: INTCON2bits.nRBPU = 0x1;
  1511  0011B6  8EF1               	bsf	intcon2,7,c	;volatile
  1512                           
  1513                           ; BSR set to: 15
  1514                           ;pin_manager.c: 66: INTCONbits.RBIE = 0;
  1515  0011B8  96F2               	bcf	intcon,3,c	;volatile
  1516                           
  1517                           ; BSR set to: 15
  1518  0011BA  0012               	return		;funcret
  1519  0011BC                     __end_of_PIN_MANAGER_Initialize:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           intcon	equ	0xFF2
  1526                           intcon2	equ	0xFF1
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           postdec1	equ	0xFE5
  1530                           fsr1h	equ	0xFE2
  1531                           fsr1l	equ	0xFE1
  1532                           
  1533 ;; *************** function _OSCILLATOR_Initialize *****************
  1534 ;; Defined at:
  1535 ;;		line 123 in file "mcc_generated_files/mcc.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, status,2
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;Total ram usage:        0 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    4
  1556 ;; This function calls:
  1557 ;;		Nothing
  1558 ;; This function is called by:
  1559 ;;		_SYSTEM_Initialize
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text5
  1564  001450                     __ptext5:
  1565                           	opt stack 0
  1566  001450                     _OSCILLATOR_Initialize:
  1567                           	opt stack 25
  1568                           
  1569                           ;mcc.c: 126: OSCCON = 0x70;
  1570                           
  1571                           ; BSR set to: 15
  1572                           ;incstack = 0
  1573  001450  0E70               	movlw	112
  1574  001452  6ED3               	movwf	4051,c	;volatile
  1575                           
  1576                           ;mcc.c: 128: OSCCON2 = 0x04;
  1577  001454  0E04               	movlw	4
  1578  001456  6ED2               	movwf	4050,c	;volatile
  1579                           
  1580                           ;mcc.c: 130: OSCTUNE = 0x40;
  1581  001458  0E40               	movlw	64
  1582  00145A  6E9B               	movwf	3995,c	;volatile
  1583  00145C  0012               	return		;funcret
  1584  00145E                     __end_of_OSCILLATOR_Initialize:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           intcon	equ	0xFF2
  1591                           intcon2	equ	0xFF1
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1h	equ	0xFE2
  1596                           fsr1l	equ	0xFE1
  1597                           
  1598 ;; *************** function _INTERRUPT_Initialize *****************
  1599 ;; Defined at:
  1600 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;		None
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		None
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;Total ram usage:        0 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    4
  1621 ;; This function calls:
  1622 ;;		Nothing
  1623 ;; This function is called by:
  1624 ;;		_SYSTEM_Initialize
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text6
  1629  001484                     __ptext6:
  1630                           	opt stack 0
  1631  001484                     _INTERRUPT_Initialize:
  1632                           	opt stack 25
  1633                           
  1634                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  1635                           
  1636                           ;incstack = 0
  1637  001484  9ED0               	bcf	4048,7,c	;volatile
  1638                           
  1639                           ;interrupt_manager.c: 60: INTCON2bits.TMR0IP = 0;
  1640  001486  94F1               	bcf	intcon2,2,c	;volatile
  1641                           
  1642                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  1643  001488  989F               	bcf	3999,4,c	;volatile
  1644                           
  1645                           ;interrupt_manager.c: 64: IPR1bits.RC1IP = 0;
  1646  00148A  9A9F               	bcf	3999,5,c	;volatile
  1647  00148C  0012               	return		;funcret
  1648  00148E                     __end_of_INTERRUPT_Initialize:
  1649                           	opt stack 0
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           intcon	equ	0xFF2
  1655                           intcon2	equ	0xFF1
  1656                           postinc0	equ	0xFEE
  1657                           wreg	equ	0xFE8
  1658                           postdec1	equ	0xFE5
  1659                           fsr1h	equ	0xFE2
  1660                           fsr1l	equ	0xFE1
  1661                           
  1662 ;; *************** function _EUSART1_Initialize *****************
  1663 ;; Defined at:
  1664 ;;		line 84 in file "mcc_generated_files/eusart1.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    4
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_SYSTEM_Initialize
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text7
  1693  0011BC                     __ptext7:
  1694                           	opt stack 0
  1695  0011BC                     _EUSART1_Initialize:
  1696                           	opt stack 25
  1697                           
  1698                           ;eusart1.c: 87: PIE1bits.RC1IE = 0;
  1699                           
  1700                           ;incstack = 0
  1701  0011BC  9A9D               	bcf	3997,5,c	;volatile
  1702                           
  1703                           ;eusart1.c: 88: PIE1bits.TX1IE = 0;
  1704  0011BE  989D               	bcf	3997,4,c	;volatile
  1705                           
  1706                           ;eusart1.c: 93: BAUDCON1 = 0x00;
  1707  0011C0  0E00               	movlw	0
  1708  0011C2  6EB8               	movwf	4024,c	;volatile
  1709                           
  1710                           ;eusart1.c: 96: RCSTA1 = 0x90;
  1711  0011C4  0E90               	movlw	144
  1712  0011C6  6EAB               	movwf	4011,c	;volatile
  1713                           
  1714                           ;eusart1.c: 99: TXSTA1 = 0x20;
  1715  0011C8  0E20               	movlw	32
  1716  0011CA  6EAC               	movwf	4012,c	;volatile
  1717                           
  1718                           ;eusart1.c: 102: SPBRG1 = 0x10;
  1719  0011CC  0E10               	movlw	16
  1720  0011CE  6EAF               	movwf	4015,c	;volatile
  1721                           
  1722                           ;eusart1.c: 105: SPBRGH1 = 0x00;
  1723  0011D0  0E00               	movlw	0
  1724  0011D2  6EB0               	movwf	4016,c	;volatile
  1725                           
  1726                           ;eusart1.c: 109: eusart1TxHead = 0;
  1727  0011D4  0E00               	movlw	0
  1728  0011D6  6E31               	movwf	_eusart1TxHead,c
  1729                           
  1730                           ;eusart1.c: 110: eusart1TxTail = 0;
  1731  0011D8  0E00               	movlw	0
  1732  0011DA  6E32               	movwf	_eusart1TxTail,c
  1733                           
  1734                           ;eusart1.c: 111: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1735  0011DC  0E80               	movlw	128
  1736  0011DE  6E3A               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1737                           
  1738                           ;eusart1.c: 113: eusart1RxHead = 0;
  1739  0011E0  0E00               	movlw	0
  1740  0011E2  6E2F               	movwf	_eusart1RxHead,c
  1741                           
  1742                           ;eusart1.c: 114: eusart1RxTail = 0;
  1743  0011E4  0E00               	movlw	0
  1744  0011E6  6E30               	movwf	_eusart1RxTail,c
  1745                           
  1746                           ;eusart1.c: 115: eusart1RxCount = 0;
  1747  0011E8  0E00               	movlw	0
  1748  0011EA  6E2E               	movwf	_eusart1RxCount,c	;volatile
  1749                           
  1750                           ;eusart1.c: 118: PIE1bits.RC1IE = 1;
  1751  0011EC  8A9D               	bsf	3997,5,c	;volatile
  1752  0011EE  0012               	return		;funcret
  1753  0011F0                     __end_of_EUSART1_Initialize:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           intcon	equ	0xFF2
  1760                           intcon2	equ	0xFF1
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1h	equ	0xFE2
  1765                           fsr1l	equ	0xFE1
  1766                           
  1767 ;; *************** function _EPWM1_Initialize *****************
  1768 ;; Defined at:
  1769 ;;		line 64 in file "mcc_generated_files/epwm1.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    4
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_SYSTEM_Initialize
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text8
  1798  001376                     __ptext8:
  1799                           	opt stack 0
  1800  001376                     _EPWM1_Initialize:
  1801                           	opt stack 25
  1802                           
  1803                           ;epwm1.c: 69: CCP1CON = 0x0E;
  1804                           
  1805                           ;incstack = 0
  1806  001376  0E0E               	movlw	14
  1807  001378  6EBD               	movwf	4029,c	;volatile
  1808                           
  1809                           ;epwm1.c: 72: ECCP1AS = 0x00;
  1810  00137A  0E00               	movlw	0
  1811  00137C  6EB6               	movwf	4022,c	;volatile
  1812                           
  1813                           ;epwm1.c: 75: PWM1CON = 0x82;
  1814  00137E  0E82               	movlw	130
  1815  001380  6EB7               	movwf	4023,c	;volatile
  1816                           
  1817                           ;epwm1.c: 78: PSTR1CON = 0x01;
  1818  001382  0E01               	movlw	1
  1819  001384  6EB9               	movwf	4025,c	;volatile
  1820                           
  1821                           ;epwm1.c: 81: CCPR1L = 0x00;
  1822  001386  0E00               	movlw	0
  1823  001388  6EBE               	movwf	4030,c	;volatile
  1824                           
  1825                           ;epwm1.c: 84: CCPR1H = 0x00;
  1826  00138A  0E00               	movlw	0
  1827  00138C  6EBF               	movwf	4031,c	;volatile
  1828                           
  1829                           ;epwm1.c: 88: CCPTMRS0bits.C1TSEL = 0x0;
  1830  00138E  0EFC               	movlw	-4
  1831  001390  010F               	movlb	15	; () banked
  1832  001392  1749               	andwf	73,f,b	;volatile
  1833                           
  1834                           ; BSR set to: 15
  1835  001394  0012               	return		;funcret
  1836  001396                     __end_of_EPWM1_Initialize:
  1837                           	opt stack 0
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           intcon	equ	0xFF2
  1843                           intcon2	equ	0xFF1
  1844                           postinc0	equ	0xFEE
  1845                           wreg	equ	0xFE8
  1846                           postdec1	equ	0xFE5
  1847                           fsr1h	equ	0xFE2
  1848                           fsr1l	equ	0xFE1
  1849                           
  1850 ;; *************** function _InitSensor *****************
  1851 ;; Defined at:
  1852 ;;		line 94 in file "main.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, status,2, status,0, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;Total ram usage:        0 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    6
  1873 ;; This function calls:
  1874 ;;		_I2C_Init
  1875 ;;		_I2C_Start
  1876 ;;		_I2C_Stop
  1877 ;;		_I2C_Write_Byte
  1878 ;; This function is called by:
  1879 ;;		_main
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text9
  1884  0012AE                     __ptext9:
  1885                           	opt stack 0
  1886  0012AE                     _InitSensor:
  1887                           	opt stack 24
  1888                           
  1889                           ;main.c: 95: ANSELCbits.ANSC4=0;
  1890                           
  1891                           ; BSR set to: 15
  1892                           ;incstack = 0
  1893  0012AE  010F               	movlb	15	; () banked
  1894  0012B0  993A               	bcf	58,4,b	;volatile
  1895                           
  1896                           ; BSR set to: 15
  1897                           ;main.c: 96: I2C_Init();
  1898  0012B2  ECCB  F009         	call	_I2C_Init	;wreg free
  1899                           
  1900                           ;main.c: 97: I2C_Start();
  1901  0012B6  EC12  F009         	call	_I2C_Start	;wreg free
  1902                           
  1903                           ;main.c: 98: I2C_Write_Byte(0x88);
  1904  0012BA  0E88               	movlw	136
  1905  0012BC  EC27  F007         	call	_I2C_Write_Byte
  1906                           
  1907                           ;main.c: 99: I2C_Write_Byte(0x01);
  1908  0012C0  0E01               	movlw	1
  1909  0012C2  EC27  F007         	call	_I2C_Write_Byte
  1910                           
  1911                           ;main.c: 100: I2C_Write_Byte(0xC4);
  1912  0012C6  0EC4               	movlw	196
  1913  0012C8  EC27  F007         	call	_I2C_Write_Byte
  1914                           
  1915                           ;main.c: 101: I2C_Write_Byte(0x10);
  1916  0012CC  0E10               	movlw	16
  1917  0012CE  EC27  F007         	call	_I2C_Write_Byte
  1918                           
  1919                           ;main.c: 102: I2C_Stop();
  1920  0012D2  ECDB  F009         	call	_I2C_Stop	;wreg free
  1921  0012D6  0012               	return		;funcret
  1922  0012D8                     __end_of_InitSensor:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           intcon	equ	0xFF2
  1929                           intcon2	equ	0xFF1
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           postdec1	equ	0xFE5
  1933                           fsr1h	equ	0xFE2
  1934                           fsr1l	equ	0xFE1
  1935                           
  1936 ;; *************** function _I2C_Write_Byte *****************
  1937 ;; Defined at:
  1938 ;;		line 61 in file "soft_i2c.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  byt             1    wreg     unsigned char 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  byt             1   36[COMRAM] unsigned char 
  1943 ;;  i               1   37[COMRAM] unsigned char 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      void 
  1946 ;; Registers used:
  1947 ;;		wreg, status,2, status,0, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;Total ram usage:        2 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    5
  1960 ;; This function calls:
  1961 ;;		_I2C_SCL_CLEAR
  1962 ;;		_I2C_SCL_SET
  1963 ;;		_I2C_SDA_CLEAR
  1964 ;;		_I2C_SDA_IN_SET
  1965 ;;		_I2C_SDA_OUT_SET
  1966 ;;		_I2C_SDA_SET
  1967 ;; This function is called by:
  1968 ;;		_InitSensor
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text10
  1974  000E4E                     __ptext10:
  1975                           	opt stack 0
  1976  000E4E                     _I2C_Write_Byte:
  1977                           	opt stack 24
  1978                           
  1979                           ;incstack = 0
  1980                           ;I2C_Write_Byte@byt stored from wreg
  1981  000E4E  6E25               	movwf	I2C_Write_Byte@byt,c
  1982                           
  1983                           ;soft_i2c.c: 63: char i;
  1984                           ;soft_i2c.c: 64: I2C_SDA_OUT_SET();
  1985  000E50  EC54  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  1986                           
  1987                           ;soft_i2c.c: 66: for(i=0;i<8;i++)
  1988  000E54  0E00               	movlw	0
  1989  000E56  6E26               	movwf	I2C_Write_Byte@i,c
  1990  000E58                     l2703:
  1991  000E58  0E07               	movlw	7
  1992  000E5A  6426               	cpfsgt	I2C_Write_Byte@i,c
  1993  000E5C  D001               	goto	l356
  1994  000E5E  D01E               	goto	l2727
  1995  000E60                     l356:
  1996                           
  1997                           ;soft_i2c.c: 67: {
  1998                           ;soft_i2c.c: 68: if(byt & 0x80)
  1999  000E60  AE25               	btfss	I2C_Write_Byte@byt,7,c
  2000  000E62  D006               	goto	l2711
  2001                           
  2002                           ;soft_i2c.c: 69: {
  2003                           ;soft_i2c.c: 70: I2C_SDA_SET();
  2004  000E64  EC52  F00A         	call	_I2C_SDA_SET	;wreg free
  2005                           
  2006                           ;soft_i2c.c: 71: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2007  000E68  0E6A               	movlw	106
  2008  000E6A                     u3017:
  2009  000E6A  2EE8               	decfsz	wreg,f,c
  2010  000E6C  D7FE               	goto	u3017
  2011  000E6E  D005               	goto	L1
  2012  000E70                     l2711:
  2013                           
  2014                           ;soft_i2c.c: 73: else
  2015                           ;soft_i2c.c: 74: {
  2016                           ;soft_i2c.c: 75: I2C_SDA_CLEAR();
  2017  000E70  EC58  F00A         	call	_I2C_SDA_CLEAR	;wreg free
  2018                           
  2019                           ;soft_i2c.c: 76: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2020  000E74  0E6A               	movlw	106
  2021  000E76                     u3027:
  2022  000E76  2EE8               	decfsz	wreg,f,c
  2023  000E78  D7FE               	goto	u3027
  2024  000E7A                     L1:
  2025  000E7A  D000               	nop2		;nop
  2026                           
  2027                           ;soft_i2c.c: 77: }
  2028                           ;soft_i2c.c: 79: I2C_SCL_SET();
  2029  000E7C  EC5A  F00A         	call	_I2C_SCL_SET	;wreg free
  2030                           
  2031                           ;soft_i2c.c: 80: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2032  000E80  0E6A               	movlw	106
  2033  000E82                     u3037:
  2034  000E82  2EE8               	decfsz	wreg,f,c
  2035  000E84  D7FE               	goto	u3037
  2036  000E86  D000               	nop2		;nop
  2037                           
  2038                           ;soft_i2c.c: 81: I2C_SCL_CLEAR();
  2039  000E88  EC5C  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  2040                           
  2041                           ;soft_i2c.c: 82: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2042  000E8C  0E6A               	movlw	106
  2043  000E8E                     u3047:
  2044  000E8E  2EE8               	decfsz	wreg,f,c
  2045  000E90  D7FE               	goto	u3047
  2046  000E92  D000               	nop2		;nop
  2047                           
  2048                           ;soft_i2c.c: 83: byt<<=1;
  2049  000E94  90D8               	bcf	status,0,c
  2050  000E96  3625               	rlcf	I2C_Write_Byte@byt,f,c
  2051  000E98  2A26               	incf	I2C_Write_Byte@i,f,c
  2052  000E9A  D7DE               	goto	l2703
  2053  000E9C                     l2727:
  2054                           
  2055                           ;soft_i2c.c: 84: }
  2056                           ;soft_i2c.c: 85: I2C_SDA_IN_SET();
  2057  000E9C  EC56  F00A         	call	_I2C_SDA_IN_SET	;wreg free
  2058                           
  2059                           ;soft_i2c.c: 86: I2C_SCL_SET();
  2060  000EA0  EC5A  F00A         	call	_I2C_SCL_SET	;wreg free
  2061                           
  2062                           ;soft_i2c.c: 87: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2063  000EA4  0E6A               	movlw	106
  2064  000EA6                     u3057:
  2065  000EA6  2EE8               	decfsz	wreg,f,c
  2066  000EA8  D7FE               	goto	u3057
  2067  000EAA  D000               	nop2		;nop
  2068                           
  2069                           ;soft_i2c.c: 88: I2C_SCL_CLEAR();
  2070  000EAC  EC5C  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  2071                           
  2072                           ;soft_i2c.c: 89: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2073  000EB0  0E6A               	movlw	106
  2074  000EB2                     u3067:
  2075  000EB2  2EE8               	decfsz	wreg,f,c
  2076  000EB4  D7FE               	goto	u3067
  2077  000EB6  D000               	nop2		;nop
  2078                           
  2079                           ;soft_i2c.c: 91: I2C_SDA_OUT_SET();
  2080  000EB8  EC54  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  2081  000EBC  0012               	return		;funcret
  2082  000EBE                     __end_of_I2C_Write_Byte:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           intcon	equ	0xFF2
  2089                           intcon2	equ	0xFF1
  2090                           postinc0	equ	0xFEE
  2091                           wreg	equ	0xFE8
  2092                           postdec1	equ	0xFE5
  2093                           fsr1h	equ	0xFE2
  2094                           fsr1l	equ	0xFE1
  2095                           status	equ	0xFD8
  2096                           
  2097 ;; *************** function _I2C_Stop *****************
  2098 ;; Defined at:
  2099 ;;		line 50 in file "soft_i2c.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;Total ram usage:        0 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    5
  2120 ;; This function calls:
  2121 ;;		_I2C_SCL_SET
  2122 ;;		_I2C_SDA_OUT_SET
  2123 ;;		_I2C_SDA_SET
  2124 ;; This function is called by:
  2125 ;;		_InitSensor
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text11
  2131  0013B6                     __ptext11:
  2132                           	opt stack 0
  2133  0013B6                     _I2C_Stop:
  2134                           	opt stack 24
  2135                           
  2136                           ;soft_i2c.c: 52: I2C_SDA_OUT_SET();
  2137                           
  2138                           ;incstack = 0
  2139  0013B6  EC54  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  2140                           
  2141                           ;soft_i2c.c: 55: I2C_SCL_SET();
  2142  0013BA  EC5A  F00A         	call	_I2C_SCL_SET	;wreg free
  2143                           
  2144                           ;soft_i2c.c: 56: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2145  0013BE  0E6A               	movlw	106
  2146  0013C0                     u3077:
  2147  0013C0  2EE8               	decfsz	wreg,f,c
  2148  0013C2  D7FE               	goto	u3077
  2149  0013C4  D000               	nop2		;nop
  2150                           
  2151                           ;soft_i2c.c: 57: I2C_SDA_SET();
  2152  0013C6  EC52  F00A         	call	_I2C_SDA_SET	;wreg free
  2153                           
  2154                           ;soft_i2c.c: 58: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2155  0013CA  0E6A               	movlw	106
  2156  0013CC                     u3087:
  2157  0013CC  2EE8               	decfsz	wreg,f,c
  2158  0013CE  D7FE               	goto	u3087
  2159  0013D0  D000               	nop2		;nop
  2160  0013D2  0012               	return		;funcret
  2161  0013D4                     __end_of_I2C_Stop:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           intcon	equ	0xFF2
  2168                           intcon2	equ	0xFF1
  2169                           postinc0	equ	0xFEE
  2170                           wreg	equ	0xFE8
  2171                           postdec1	equ	0xFE5
  2172                           fsr1h	equ	0xFE2
  2173                           fsr1l	equ	0xFE1
  2174                           status	equ	0xFD8
  2175                           
  2176 ;; *************** function _I2C_Start *****************
  2177 ;; Defined at:
  2178 ;;		line 34 in file "soft_i2c.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;		None
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;		None
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  1    wreg      void 
  2185 ;; Registers used:
  2186 ;;		wreg, cstack
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;Total ram usage:        0 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; Hardware stack levels required when called:    5
  2199 ;; This function calls:
  2200 ;;		_I2C_SCL_CLEAR
  2201 ;;		_I2C_SCL_SET
  2202 ;;		_I2C_SDA_CLEAR
  2203 ;;		_I2C_SDA_OUT_SET
  2204 ;;		_I2C_SDA_SET
  2205 ;; This function is called by:
  2206 ;;		_InitSensor
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text12
  2212  001224                     __ptext12:
  2213                           	opt stack 0
  2214  001224                     _I2C_Start:
  2215                           	opt stack 24
  2216                           
  2217                           ;soft_i2c.c: 36: I2C_SDA_OUT_SET();
  2218                           
  2219                           ;incstack = 0
  2220  001224  EC54  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  2221                           
  2222                           ;soft_i2c.c: 39: I2C_SDA_SET();
  2223  001228  EC52  F00A         	call	_I2C_SDA_SET	;wreg free
  2224                           
  2225                           ;soft_i2c.c: 40: I2C_SCL_SET();
  2226  00122C  EC5A  F00A         	call	_I2C_SCL_SET	;wreg free
  2227                           
  2228                           ;soft_i2c.c: 41: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2229  001230  0E6A               	movlw	106
  2230  001232                     u3097:
  2231  001232  2EE8               	decfsz	wreg,f,c
  2232  001234  D7FE               	goto	u3097
  2233  001236  D000               	nop2		;nop
  2234                           
  2235                           ;soft_i2c.c: 44: I2C_SDA_CLEAR();
  2236  001238  EC58  F00A         	call	_I2C_SDA_CLEAR	;wreg free
  2237                           
  2238                           ;soft_i2c.c: 45: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2239  00123C  0E6A               	movlw	106
  2240  00123E                     u3107:
  2241  00123E  2EE8               	decfsz	wreg,f,c
  2242  001240  D7FE               	goto	u3107
  2243  001242  D000               	nop2		;nop
  2244                           
  2245                           ;soft_i2c.c: 46: I2C_SCL_CLEAR();
  2246  001244  EC5C  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  2247                           
  2248                           ;soft_i2c.c: 47: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2249  001248  0E6A               	movlw	106
  2250  00124A                     u3117:
  2251  00124A  2EE8               	decfsz	wreg,f,c
  2252  00124C  D7FE               	goto	u3117
  2253  00124E  D000               	nop2		;nop
  2254  001250  0012               	return		;funcret
  2255  001252                     __end_of_I2C_Start:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           intcon	equ	0xFF2
  2262                           intcon2	equ	0xFF1
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           postdec1	equ	0xFE5
  2266                           fsr1h	equ	0xFE2
  2267                           fsr1l	equ	0xFE1
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _I2C_Init *****************
  2271 ;; Defined at:
  2272 ;;		line 25 in file "soft_i2c.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;		None
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      void 
  2279 ;; Registers used:
  2280 ;;		wreg, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;Total ram usage:        1 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    5
  2293 ;; This function calls:
  2294 ;;		_I2C_SCL_OUT_SET
  2295 ;;		_I2C_SCL_SET
  2296 ;;		_I2C_SDA_OUT_SET
  2297 ;;		_I2C_SDA_SET
  2298 ;; This function is called by:
  2299 ;;		_InitSensor
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text13
  2304  001396                     __ptext13:
  2305                           	opt stack 0
  2306  001396                     _I2C_Init:
  2307                           	opt stack 24
  2308                           
  2309                           ;soft_i2c.c: 27: I2C_SDA_OUT_SET();
  2310                           
  2311                           ;incstack = 0
  2312  001396  EC54  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  2313                           
  2314                           ;soft_i2c.c: 28: I2C_SCL_OUT_SET();
  2315  00139A  EC50  F00A         	call	_I2C_SCL_OUT_SET	;wreg free
  2316                           
  2317                           ;soft_i2c.c: 29: I2C_SCL_SET();
  2318  00139E  EC5A  F00A         	call	_I2C_SCL_SET	;wreg free
  2319                           
  2320                           ;soft_i2c.c: 30: I2C_SDA_SET();
  2321  0013A2  EC52  F00A         	call	_I2C_SDA_SET	;wreg free
  2322                           
  2323                           ;soft_i2c.c: 31: _delay((unsigned long)((10)*(64000000/4000.0)));
  2324  0013A6  0ED0               	movlw	208
  2325  0013A8  6E25               	movwf	??_I2C_Init& (0+255),c
  2326  0013AA  0ECA               	movlw	202
  2327  0013AC                     u3127:
  2328  0013AC  2EE8               	decfsz	wreg,f,c
  2329  0013AE  D7FE               	goto	u3127
  2330  0013B0  2E25               	decfsz	??_I2C_Init& (0+255),f,c
  2331  0013B2  D7FC               	goto	u3127
  2332  0013B4  0012               	return		;funcret
  2333  0013B6                     __end_of_I2C_Init:
  2334                           	opt stack 0
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           intcon	equ	0xFF2
  2340                           intcon2	equ	0xFF1
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           postdec1	equ	0xFE5
  2344                           fsr1h	equ	0xFE2
  2345                           fsr1l	equ	0xFE1
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function _I2C_SCL_OUT_SET *****************
  2349 ;; Defined at:
  2350 ;;		line 20 in file "soft_i2c.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;		None
  2355 ;; Return value:  Size  Location     Type
  2356 ;;                  1    wreg      void 
  2357 ;; Registers used:
  2358 ;;		None
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;Total ram usage:        0 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    4
  2371 ;; This function calls:
  2372 ;;		Nothing
  2373 ;; This function is called by:
  2374 ;;		_I2C_Init
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text14
  2379  0014A0                     __ptext14:
  2380                           	opt stack 0
  2381  0014A0                     _I2C_SCL_OUT_SET:
  2382                           	opt stack 24
  2383                           
  2384                           ;incstack = 0
  2385  0014A0  9694               	bcf	3988,3,c	;volatile
  2386  0014A2  0012               	return		;funcret
  2387  0014A4                     __end_of_I2C_SCL_OUT_SET:
  2388                           	opt stack 0
  2389                           tblptru	equ	0xFF8
  2390                           tblptrh	equ	0xFF7
  2391                           tblptrl	equ	0xFF6
  2392                           tablat	equ	0xFF5
  2393                           intcon	equ	0xFF2
  2394                           intcon2	equ	0xFF1
  2395                           postinc0	equ	0xFEE
  2396                           wreg	equ	0xFE8
  2397                           postdec1	equ	0xFE5
  2398                           fsr1h	equ	0xFE2
  2399                           fsr1l	equ	0xFE1
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _InitRadio *****************
  2403 ;; Defined at:
  2404 ;;		line 56 in file "main.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  delay           2   35[BANK0 ] int 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      void 
  2411 ;; Registers used:
  2412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;Total ram usage:        2 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    8
  2425 ;; This function calls:
  2426 ;;		___awmod
  2427 ;;		_getUUID
  2428 ;;		_printf
  2429 ;;		_rand
  2430 ;;		_read_line
  2431 ;;		_srand
  2432 ;;		_strtol
  2433 ;;		_wait_5ms
  2434 ;; This function is called by:
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text15
  2440  0007DC                     __ptext15:
  2441                           	opt stack 0
  2442  0007DC                     _InitRadio:
  2443                           	opt stack 22
  2444                           
  2445                           ;main.c: 57: wait_5ms(5);
  2446                           
  2447                           ;incstack = 0
  2448  0007DC  0E00               	movlw	0
  2449  0007DE  0100               	movlb	0	; () banked
  2450  0007E0  6F92               	movwf	(wait_5ms@j+1)& (0+255),b
  2451  0007E2  0E05               	movlw	5
  2452  0007E4  6F91               	movwf	wait_5ms@j& (0+255),b
  2453  0007E6  EC4A  F008         	call	_wait_5ms	;wreg free
  2454                           
  2455                           ;main.c: 58: printf("sys reset\r\n");
  2456  0007EA  0ECD               	movlw	low STR_6
  2457  0007EC  0100               	movlb	0	; () banked
  2458  0007EE  6F8E               	movwf	printf@f& (0+255),b
  2459  0007F0  0EFF               	movlw	high STR_6
  2460  0007F2  0100               	movlb	0	; () banked
  2461  0007F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  2462  0007F6  EC4C  F000         	call	_printf	;wreg free
  2463                           
  2464                           ;main.c: 59: wait_5ms(5);
  2465  0007FA  0E00               	movlw	0
  2466  0007FC  0100               	movlb	0	; () banked
  2467  0007FE  6F92               	movwf	(wait_5ms@j+1)& (0+255),b
  2468  000800  0E05               	movlw	5
  2469  000802  6F91               	movwf	wait_5ms@j& (0+255),b
  2470  000804  EC4A  F008         	call	_wait_5ms	;wreg free
  2471                           
  2472                           ;main.c: 60: printf("sys get ver\r\n");
  2473  000808  0EB3               	movlw	low STR_7
  2474  00080A  0100               	movlb	0	; () banked
  2475  00080C  6F8E               	movwf	printf@f& (0+255),b
  2476  00080E  0EFF               	movlw	high STR_7
  2477  000810  0100               	movlb	0	; () banked
  2478  000812  6F8F               	movwf	(printf@f+1)& (0+255),b
  2479  000814  EC4C  F000         	call	_printf	;wreg free
  2480                           
  2481                           ;main.c: 61: read_line();
  2482  000818  EC36  F00A         	call	_read_line	;wreg free
  2483                           
  2484                           ;main.c: 62: printf("radio get sf\r\n");
  2485  00081C  0E86               	movlw	low STR_8
  2486  00081E  0100               	movlb	0	; () banked
  2487  000820  6F8E               	movwf	printf@f& (0+255),b
  2488  000822  0EFF               	movlw	high STR_8
  2489  000824  0100               	movlb	0	; () banked
  2490  000826  6F8F               	movwf	(printf@f+1)& (0+255),b
  2491  000828  EC4C  F000         	call	_printf	;wreg free
  2492                           
  2493                           ;main.c: 63: read_line();
  2494  00082C  EC36  F00A         	call	_read_line	;wreg free
  2495                           
  2496                           ;main.c: 64: printf("radio get bw\r\n");
  2497  000830  0EA4               	movlw	low STR_9
  2498  000832  0100               	movlb	0	; () banked
  2499  000834  6F8E               	movwf	printf@f& (0+255),b
  2500  000836  0EFF               	movlw	high STR_9
  2501  000838  0100               	movlb	0	; () banked
  2502  00083A  6F8F               	movwf	(printf@f+1)& (0+255),b
  2503  00083C  EC4C  F000         	call	_printf	;wreg free
  2504                           
  2505                           ;main.c: 65: read_line();
  2506  000840  EC36  F00A         	call	_read_line	;wreg free
  2507                           
  2508                           ;main.c: 66: printf("radio get cr\r\n");
  2509  000844  0E95               	movlw	low STR_10
  2510  000846  0100               	movlb	0	; () banked
  2511  000848  6F8E               	movwf	printf@f& (0+255),b
  2512  00084A  0EFF               	movlw	high STR_10
  2513  00084C  0100               	movlb	0	; () banked
  2514  00084E  6F8F               	movwf	(printf@f+1)& (0+255),b
  2515  000850  EC4C  F000         	call	_printf	;wreg free
  2516                           
  2517                           ;main.c: 67: read_line();
  2518  000854  EC36  F00A         	call	_read_line	;wreg free
  2519                           
  2520                           ;main.c: 68: printf("radio get prlen\r\n");
  2521  000858  0E43               	movlw	low STR_11
  2522  00085A  0100               	movlb	0	; () banked
  2523  00085C  6F8E               	movwf	printf@f& (0+255),b
  2524  00085E  0EFF               	movlw	high STR_11
  2525  000860  0100               	movlb	0	; () banked
  2526  000862  6F8F               	movwf	(printf@f+1)& (0+255),b
  2527  000864  EC4C  F000         	call	_printf	;wreg free
  2528                           
  2529                           ;main.c: 69: read_line();
  2530  000868  EC36  F00A         	call	_read_line	;wreg free
  2531                           
  2532                           ;main.c: 70: printf("radio get pwr\r\n");
  2533  00086C  0E76               	movlw	low STR_12
  2534  00086E  0100               	movlb	0	; () banked
  2535  000870  6F8E               	movwf	printf@f& (0+255),b
  2536  000872  0EFF               	movlw	high STR_12
  2537  000874  0100               	movlb	0	; () banked
  2538  000876  6F8F               	movwf	(printf@f+1)& (0+255),b
  2539  000878  EC4C  F000         	call	_printf	;wreg free
  2540                           
  2541                           ;main.c: 71: read_line();
  2542  00087C  EC36  F00A         	call	_read_line	;wreg free
  2543                           
  2544                           ;main.c: 72: printf("mac pause\r\n");
  2545  000880  0EC1               	movlw	low STR_13
  2546  000882  0100               	movlb	0	; () banked
  2547  000884  6F8E               	movwf	printf@f& (0+255),b
  2548  000886  0EFF               	movlw	high STR_13
  2549  000888  0100               	movlb	0	; () banked
  2550  00088A  6F8F               	movwf	(printf@f+1)& (0+255),b
  2551  00088C  EC4C  F000         	call	_printf	;wreg free
  2552                           
  2553                           ;main.c: 73: read_line();
  2554  000890  EC36  F00A         	call	_read_line	;wreg free
  2555                           
  2556                           ;main.c: 75: printf("radio set pwr -2\r\n");
  2557  000894  0EE4               	movlw	low STR_14
  2558  000896  0100               	movlb	0	; () banked
  2559  000898  6F8E               	movwf	printf@f& (0+255),b
  2560  00089A  0EFE               	movlw	high STR_14
  2561  00089C  0100               	movlb	0	; () banked
  2562  00089E  6F8F               	movwf	(printf@f+1)& (0+255),b
  2563  0008A0  EC4C  F000         	call	_printf	;wreg free
  2564                           
  2565                           ;main.c: 76: read_line();
  2566  0008A4  EC36  F00A         	call	_read_line	;wreg free
  2567                           
  2568                           ;main.c: 77: printf("radio set bw 500\r\n");
  2569  0008A8  0ED1               	movlw	low STR_15
  2570  0008AA  0100               	movlb	0	; () banked
  2571  0008AC  6F8E               	movwf	printf@f& (0+255),b
  2572  0008AE  0EFE               	movlw	high STR_15
  2573  0008B0  0100               	movlb	0	; () banked
  2574  0008B2  6F8F               	movwf	(printf@f+1)& (0+255),b
  2575  0008B4  EC4C  F000         	call	_printf	;wreg free
  2576                           
  2577                           ;main.c: 78: read_line();
  2578  0008B8  EC36  F00A         	call	_read_line	;wreg free
  2579                           
  2580                           ;main.c: 79: printf("radio set sf sf7\r\n");
  2581  0008BC  0EF7               	movlw	low STR_16
  2582  0008BE  0100               	movlb	0	; () banked
  2583  0008C0  6F8E               	movwf	printf@f& (0+255),b
  2584  0008C2  0EFE               	movlw	high STR_16
  2585  0008C4  0100               	movlb	0	; () banked
  2586  0008C6  6F8F               	movwf	(printf@f+1)& (0+255),b
  2587  0008C8  EC4C  F000         	call	_printf	;wreg free
  2588                           
  2589                           ;main.c: 80: read_line();
  2590  0008CC  EC36  F00A         	call	_read_line	;wreg free
  2591                           
  2592                           ;main.c: 81: printf("radio set cr 4/8\r\n");
  2593  0008D0  0E0A               	movlw	low STR_17
  2594  0008D2  0100               	movlb	0	; () banked
  2595  0008D4  6F8E               	movwf	printf@f& (0+255),b
  2596  0008D6  0EFF               	movlw	high STR_17
  2597  0008D8  0100               	movlb	0	; () banked
  2598  0008DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  2599  0008DC  EC4C  F000         	call	_printf	;wreg free
  2600                           
  2601                           ;main.c: 82: read_line();
  2602  0008E0  EC36  F00A         	call	_read_line	;wreg free
  2603                           
  2604                           ;main.c: 83: printf("radio set crc on\r\n");
  2605  0008E4  0E30               	movlw	low STR_18
  2606  0008E6  0100               	movlb	0	; () banked
  2607  0008E8  6F8E               	movwf	printf@f& (0+255),b
  2608  0008EA  0EFF               	movlw	high STR_18
  2609  0008EC  0100               	movlb	0	; () banked
  2610  0008EE  6F8F               	movwf	(printf@f+1)& (0+255),b
  2611  0008F0  EC4C  F000         	call	_printf	;wreg free
  2612                           
  2613                           ;main.c: 84: read_line();
  2614  0008F4  EC36  F00A         	call	_read_line	;wreg free
  2615                           
  2616                           ;main.c: 86: getUUID();
  2617  0008F8  EC6C  F009         	call	_getUUID	;wreg free
  2618                           
  2619                           ;main.c: 88: srand((int)strtol(uuid, (0), 0));
  2620  0008FC  0E61               	movlw	low _uuid
  2621  0008FE  0100               	movlb	0	; () banked
  2622  000900  6F91               	movwf	strtol@s& (0+255),b
  2623  000902  0E00               	movlw	high _uuid
  2624  000904  0100               	movlb	0	; () banked
  2625  000906  6F92               	movwf	(strtol@s+1)& (0+255),b
  2626  000908  0E00               	movlw	0
  2627  00090A  0100               	movlb	0	; () banked
  2628  00090C  6F93               	movwf	strtol@endptr& (0+255),b
  2629  00090E  0E00               	movlw	0
  2630  000910  0100               	movlb	0	; () banked
  2631  000912  6F94               	movwf	(strtol@endptr+1)& (0+255),b
  2632  000914  0E00               	movlw	0
  2633  000916  0100               	movlb	0	; () banked
  2634  000918  6F96               	movwf	(strtol@base+1)& (0+255),b
  2635  00091A  0E00               	movlw	0
  2636  00091C  6F95               	movwf	strtol@base& (0+255),b
  2637  00091E  ECCB  F002         	call	_strtol	;wreg free
  2638  000922  C091  F0A1         	movff	?_strtol,srand@x
  2639  000926  C092  F0A2         	movff	?_strtol+1,srand@x+1
  2640  00092A  EC2F  F00A         	call	_srand	;wreg free
  2641                           
  2642                           ;main.c: 89: int delay = 2000+(rand()%1000);
  2643  00092E  ECF7  F007         	call	_rand	;wreg free
  2644  000932  C029  F091         	movff	?_rand,___awmod@dividend
  2645  000936  C02A  F092         	movff	?_rand+1,___awmod@dividend+1
  2646  00093A  0E03               	movlw	3
  2647  00093C  0100               	movlb	0	; () banked
  2648  00093E  6F94               	movwf	(___awmod@divisor+1)& (0+255),b
  2649  000940  0EE8               	movlw	232
  2650  000942  6F93               	movwf	___awmod@divisor& (0+255),b
  2651  000944  ECBB  F005         	call	___awmod	;wreg free
  2652  000948  0ED0               	movlw	208
  2653  00094A  0100               	movlb	0	; () banked
  2654  00094C  2591               	addwf	?___awmod& (0+255),w,b
  2655  00094E  0100               	movlb	0	; () banked
  2656  000950  6FAC               	movwf	InitRadio@delay& (0+255),b
  2657  000952  0E07               	movlw	7
  2658  000954  0100               	movlb	0	; () banked
  2659  000956  2192               	addwfc	(?___awmod+1)& (0+255),w,b
  2660  000958  0100               	movlb	0	; () banked
  2661  00095A  6FAD               	movwf	(InitRadio@delay+1)& (0+255),b
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;main.c: 90: printf("radio set wdt %d\r\n",delay);
  2665  00095C  0E1D               	movlw	low STR_19
  2666  00095E  0100               	movlb	0	; () banked
  2667  000960  6F8E               	movwf	printf@f& (0+255),b
  2668  000962  0EFF               	movlw	high STR_19
  2669  000964  0100               	movlb	0	; () banked
  2670  000966  6F8F               	movwf	(printf@f+1)& (0+255),b
  2671  000968  C0AC  F090         	movff	InitRadio@delay,?_printf+2
  2672  00096C  C0AD  F091         	movff	InitRadio@delay+1,?_printf+3
  2673  000970  EC4C  F000         	call	_printf	;wreg free
  2674                           
  2675                           ;main.c: 91: read_line();
  2676  000974  EC36  F00A         	call	_read_line	;wreg free
  2677  000978  0012               	return		;funcret
  2678  00097A                     __end_of_InitRadio:
  2679                           	opt stack 0
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           intcon	equ	0xFF2
  2685                           intcon2	equ	0xFF1
  2686                           postinc0	equ	0xFEE
  2687                           wreg	equ	0xFE8
  2688                           postdec1	equ	0xFE5
  2689                           fsr1h	equ	0xFE2
  2690                           fsr1l	equ	0xFE1
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function _wait_5ms *****************
  2694 ;; Defined at:
  2695 ;;		line 42 in file "main.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  j               2    8[BANK0 ] int 
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;  i               1   42[COMRAM] unsigned char 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, status,2, status,0
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2709 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;Total ram usage:        6 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    4
  2716 ;; This function calls:
  2717 ;;		Nothing
  2718 ;; This function is called by:
  2719 ;;		_InitRadio
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text16
  2725  001094                     __ptext16:
  2726                           	opt stack 0
  2727  001094                     _wait_5ms:
  2728                           	opt stack 26
  2729                           
  2730                           ;main.c: 43: for(uint8_t i=0;i<j;i++) { _delay((unsigned long)((5)*(64000000/4000.0))); 
      +                          }
  2731                           
  2732                           ;incstack = 0
  2733  001094  0E00               	movlw	0
  2734  001096  6E2B               	movwf	wait_5ms@i,c
  2735  001098  D00A               	goto	l284
  2736  00109A                     l3217:
  2737  00109A  0E68               	movlw	104
  2738  00109C  0100               	movlb	0	; () banked
  2739  00109E  6F93               	movwf	??_wait_5ms& (0+255),b
  2740  0010A0  0EE4               	movlw	228
  2741  0010A2                     u3137:
  2742  0010A2  2EE8               	decfsz	wreg,f,c
  2743  0010A4  D7FE               	goto	u3137
  2744  0010A6  2F93               	decfsz	??_wait_5ms& (0+255),f,b
  2745  0010A8  D7FC               	goto	u3137
  2746  0010AA  D000               	nop2	
  2747  0010AC  2A2B               	incf	wait_5ms@i,f,c
  2748  0010AE                     l284:
  2749  0010AE  502B               	movf	wait_5ms@i,w,c
  2750  0010B0  0100               	movlb	0	; () banked
  2751  0010B2  6F93               	movwf	??_wait_5ms& (0+255),b
  2752  0010B4  6B94               	clrf	(??_wait_5ms+1)& (0+255),b
  2753  0010B6  0100               	movlb	0	; () banked
  2754  0010B8  5191               	movf	wait_5ms@j& (0+255),w,b
  2755  0010BA  0100               	movlb	0	; () banked
  2756  0010BC  5D93               	subwf	??_wait_5ms& (0+255),w,b
  2757  0010BE  0100               	movlb	0	; () banked
  2758  0010C0  5194               	movf	(??_wait_5ms+1)& (0+255),w,b
  2759  0010C2  0A80               	xorlw	128
  2760  0010C4  0100               	movlb	0	; () banked
  2761  0010C6  6F95               	movwf	(??_wait_5ms+2)& (0+255),b
  2762  0010C8  0100               	movlb	0	; () banked
  2763  0010CA  5192               	movf	(wait_5ms@j+1)& (0+255),w,b
  2764  0010CC  0A80               	xorlw	128
  2765  0010CE  0100               	movlb	0	; () banked
  2766  0010D0  5995               	subwfb	(??_wait_5ms+2)& (0+255),w,b
  2767  0010D2  B0D8               	btfsc	status,0,c
  2768  0010D4  0012               	return	
  2769  0010D6  D7E1               	goto	l3217
  2770  0010D8                     __end_of_wait_5ms:
  2771                           	opt stack 0
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           intcon	equ	0xFF2
  2777                           intcon2	equ	0xFF1
  2778                           postinc0	equ	0xFEE
  2779                           wreg	equ	0xFE8
  2780                           postdec1	equ	0xFE5
  2781                           fsr1h	equ	0xFE2
  2782                           fsr1l	equ	0xFE1
  2783                           status	equ	0xFD8
  2784                           
  2785 ;; *************** function _strtol *****************
  2786 ;; Defined at:
  2787 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strtol.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  2790 ;;		 -> uuid(40), 
  2791 ;;  endptr          2   10[BANK0 ] PTR PTR unsigned char 
  2792 ;;		 -> NULL(0), 
  2793 ;;  base            2   12[BANK0 ] int 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  a               4   19[BANK0 ] long 
  2796 ;;  c               1   23[BANK0 ] unsigned char 
  2797 ;;  sign            1   18[BANK0 ] unsigned char 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  4    8[BANK0 ] long 
  2800 ;; Registers used:
  2801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2807 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;Total ram usage:       16 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    6
  2814 ;; This function calls:
  2815 ;;		___lmul
  2816 ;;		_isalpha
  2817 ;;		_isdigit
  2818 ;;		_isspace
  2819 ;;		_toupper
  2820 ;; This function is called by:
  2821 ;;		_InitRadio
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text17
  2826  000596                     __ptext17:
  2827                           	opt stack 0
  2828  000596                     _strtol:
  2829                           	opt stack 23
  2830  000596  C091  FFD9         	movff	strtol@s,fsr2l
  2831  00059A  C092  FFDA         	movff	strtol@s+1,fsr2h
  2832  00059E  50DF               	movf	indf2,w,c
  2833  0005A0  0100               	movlb	0	; () banked
  2834  0005A2  6FA0               	movwf	strtol@c& (0+255),b
  2835                           
  2836                           ; BSR set to: 0
  2837  0005A4  0100               	movlb	0	; () banked
  2838  0005A6  4B91               	infsnz	strtol@s& (0+255),f,b
  2839  0005A8  2B92               	incf	(strtol@s+1)& (0+255),f,b
  2840                           
  2841                           ; BSR set to: 0
  2842  0005AA  0100               	movlb	0	; () banked
  2843  0005AC  51A0               	movf	strtol@c& (0+255),w,b
  2844  0005AE  EC95  F009         	call	_isspace
  2845  0005B2  B0D8               	btfsc	status,0,c
  2846  0005B4  D7F0               	goto	l3227
  2847  0005B6  0E00               	movlw	0
  2848  0005B8  0100               	movlb	0	; () banked
  2849  0005BA  6F9C               	movwf	strtol@a& (0+255),b
  2850  0005BC  0E00               	movlw	0
  2851  0005BE  6F9D               	movwf	(strtol@a+1)& (0+255),b
  2852  0005C0  0E00               	movlw	0
  2853  0005C2  6F9E               	movwf	(strtol@a+2)& (0+255),b
  2854  0005C4  0E00               	movlw	0
  2855  0005C6  6F9F               	movwf	(strtol@a+3)& (0+255),b
  2856  0005C8  0E00               	movlw	0
  2857  0005CA  0100               	movlb	0	; () banked
  2858  0005CC  6F9B               	movwf	strtol@sign& (0+255),b
  2859                           
  2860                           ; BSR set to: 0
  2861  0005CE  0E2D               	movlw	45
  2862  0005D0  0100               	movlb	0	; () banked
  2863  0005D2  19A0               	xorwf	strtol@c& (0+255),w,b
  2864  0005D4  A4D8               	btfss	status,2,c
  2865  0005D6  D008               	goto	l3243
  2866                           
  2867                           ; BSR set to: 0
  2868  0005D8  0E01               	movlw	1
  2869  0005DA  0100               	movlb	0	; () banked
  2870  0005DC  6F9B               	movwf	strtol@sign& (0+255),b
  2871  0005DE  D009               	goto	l3245
  2872  0005E0                     l3241:
  2873                           
  2874                           ; BSR set to: 0
  2875  0005E0  0100               	movlb	0	; () banked
  2876  0005E2  4B91               	infsnz	strtol@s& (0+255),f,b
  2877  0005E4  2B92               	incf	(strtol@s+1)& (0+255),f,b
  2878  0005E6  D00D               	goto	l3249
  2879  0005E8                     l3243:
  2880                           
  2881                           ; BSR set to: 0
  2882  0005E8  0E2B               	movlw	43
  2883  0005EA  0100               	movlb	0	; () banked
  2884  0005EC  19A0               	xorwf	strtol@c& (0+255),w,b
  2885  0005EE  A4D8               	btfss	status,2,c
  2886  0005F0  D008               	goto	l3249
  2887  0005F2                     l3245:
  2888                           
  2889                           ; BSR set to: 0
  2890  0005F2  C091  FFD9         	movff	strtol@s,fsr2l
  2891  0005F6  C092  FFDA         	movff	strtol@s+1,fsr2h
  2892  0005FA  50DF               	movf	indf2,w,c
  2893  0005FC  0100               	movlb	0	; () banked
  2894  0005FE  6FA0               	movwf	strtol@c& (0+255),b
  2895  000600  D7EF               	goto	l3241
  2896  000602                     l3249:
  2897                           
  2898                           ; BSR set to: 0
  2899  000602  0E30               	movlw	48
  2900  000604  0100               	movlb	0	; () banked
  2901  000606  19A0               	xorwf	strtol@c& (0+255),w,b
  2902  000608  A4D8               	btfss	status,2,c
  2903  00060A  D03C               	goto	l3273
  2904                           
  2905                           ; BSR set to: 0
  2906  00060C  C091  FFD9         	movff	strtol@s,fsr2l
  2907  000610  C092  FFDA         	movff	strtol@s+1,fsr2h
  2908  000614  50DF               	movf	indf2,w,c
  2909  000616  0100               	movlb	0	; () banked
  2910  000618  6FA0               	movwf	strtol@c& (0+255),b
  2911                           
  2912                           ; BSR set to: 0
  2913  00061A  0100               	movlb	0	; () banked
  2914  00061C  4B91               	infsnz	strtol@s& (0+255),f,b
  2915  00061E  2B92               	incf	(strtol@s+1)& (0+255),f,b
  2916                           
  2917                           ; BSR set to: 0
  2918  000620  0100               	movlb	0	; () banked
  2919  000622  5195               	movf	strtol@base& (0+255),w,b
  2920  000624  0100               	movlb	0	; () banked
  2921  000626  1196               	iorwf	(strtol@base+1)& (0+255),w,b
  2922  000628  B4D8               	btfsc	status,2,c
  2923  00062A  D007               	goto	l3259
  2924                           
  2925                           ; BSR set to: 0
  2926  00062C  0E10               	movlw	16
  2927  00062E  0100               	movlb	0	; () banked
  2928  000630  1995               	xorwf	strtol@base& (0+255),w,b
  2929  000632  0100               	movlb	0	; () banked
  2930  000634  1196               	iorwf	(strtol@base+1)& (0+255),w,b
  2931  000636  A4D8               	btfss	status,2,c
  2932  000638  D01A               	goto	l3269
  2933  00063A                     l3259:
  2934                           
  2935                           ; BSR set to: 0
  2936  00063A  0E78               	movlw	120
  2937  00063C  0100               	movlb	0	; () banked
  2938  00063E  19A0               	xorwf	strtol@c& (0+255),w,b
  2939  000640  B4D8               	btfsc	status,2,c
  2940  000642  D005               	goto	l3263
  2941                           
  2942                           ; BSR set to: 0
  2943  000644  0E58               	movlw	88
  2944  000646  0100               	movlb	0	; () banked
  2945  000648  19A0               	xorwf	strtol@c& (0+255),w,b
  2946  00064A  A4D8               	btfss	status,2,c
  2947  00064C  D010               	goto	l3269
  2948  00064E                     l3263:
  2949                           
  2950                           ; BSR set to: 0
  2951  00064E  0E00               	movlw	0
  2952  000650  0100               	movlb	0	; () banked
  2953  000652  6F96               	movwf	(strtol@base+1)& (0+255),b
  2954  000654  0E10               	movlw	16
  2955  000656  6F95               	movwf	strtol@base& (0+255),b
  2956                           
  2957                           ; BSR set to: 0
  2958  000658  C091  FFD9         	movff	strtol@s,fsr2l
  2959  00065C  C092  FFDA         	movff	strtol@s+1,fsr2h
  2960  000660  50DF               	movf	indf2,w,c
  2961  000662  0100               	movlb	0	; () banked
  2962  000664  6FA0               	movwf	strtol@c& (0+255),b
  2963                           
  2964                           ; BSR set to: 0
  2965  000666  0100               	movlb	0	; () banked
  2966  000668  4B91               	infsnz	strtol@s& (0+255),f,b
  2967  00066A  2B92               	incf	(strtol@s+1)& (0+255),f,b
  2968  00066C  D00B               	goto	l3273
  2969  00066E                     l3269:
  2970                           
  2971                           ; BSR set to: 0
  2972  00066E  0100               	movlb	0	; () banked
  2973  000670  5195               	movf	strtol@base& (0+255),w,b
  2974  000672  0100               	movlb	0	; () banked
  2975  000674  1196               	iorwf	(strtol@base+1)& (0+255),w,b
  2976  000676  A4D8               	btfss	status,2,c
  2977  000678  D005               	goto	l3273
  2978                           
  2979                           ; BSR set to: 0
  2980  00067A  0E00               	movlw	0
  2981  00067C  0100               	movlb	0	; () banked
  2982  00067E  6F96               	movwf	(strtol@base+1)& (0+255),b
  2983  000680  0E08               	movlw	8
  2984  000682  6F95               	movwf	strtol@base& (0+255),b
  2985  000684                     l3273:
  2986                           
  2987                           ; BSR set to: 0
  2988  000684  0100               	movlb	0	; () banked
  2989  000686  5195               	movf	strtol@base& (0+255),w,b
  2990  000688  0100               	movlb	0	; () banked
  2991  00068A  1196               	iorwf	(strtol@base+1)& (0+255),w,b
  2992  00068C  A4D8               	btfss	status,2,c
  2993  00068E  D005               	goto	l3277
  2994                           
  2995                           ; BSR set to: 0
  2996  000690  0E00               	movlw	0
  2997  000692  0100               	movlb	0	; () banked
  2998  000694  6F96               	movwf	(strtol@base+1)& (0+255),b
  2999  000696  0E0A               	movlw	10
  3000  000698  6F95               	movwf	strtol@base& (0+255),b
  3001  00069A                     l3277:
  3002                           
  3003                           ; BSR set to: 0
  3004  00069A  0100               	movlb	0	; () banked
  3005  00069C  51A0               	movf	strtol@c& (0+255),w,b
  3006  00069E  EC81  F009         	call	_isalpha
  3007  0006A2  A0D8               	btfss	status,0,c
  3008  0006A4  D008               	goto	l3281
  3009  0006A6  0100               	movlb	0	; () banked
  3010  0006A8  51A0               	movf	strtol@c& (0+255),w,b
  3011  0006AA  EC15  F00A         	call	_toupper
  3012  0006AE  0FC9               	addlw	201
  3013  0006B0  0100               	movlb	0	; () banked
  3014  0006B2  6FA0               	movwf	strtol@c& (0+255),b
  3015  0006B4  D009               	goto	l3285
  3016  0006B6                     l3281:
  3017  0006B6  0100               	movlb	0	; () banked
  3018  0006B8  51A0               	movf	strtol@c& (0+255),w,b
  3019  0006BA  ECF9  F009         	call	_isdigit
  3020  0006BE  A0D8               	btfss	status,0,c
  3021  0006C0  D04C               	goto	l3295
  3022  0006C2  0E30               	movlw	48
  3023  0006C4  0100               	movlb	0	; () banked
  3024  0006C6  5FA0               	subwf	strtol@c& (0+255),f,b
  3025  0006C8                     l3285:
  3026                           
  3027                           ; BSR set to: 0
  3028  0006C8  0100               	movlb	0	; () banked
  3029  0006CA  51A0               	movf	strtol@c& (0+255),w,b
  3030  0006CC  0100               	movlb	0	; () banked
  3031  0006CE  6F97               	movwf	??_strtol& (0+255),b
  3032  0006D0  6B98               	clrf	(??_strtol+1)& (0+255),b
  3033  0006D2  0100               	movlb	0	; () banked
  3034  0006D4  5195               	movf	strtol@base& (0+255),w,b
  3035  0006D6  0100               	movlb	0	; () banked
  3036  0006D8  5D97               	subwf	??_strtol& (0+255),w,b
  3037  0006DA  0100               	movlb	0	; () banked
  3038  0006DC  5198               	movf	(??_strtol+1)& (0+255),w,b
  3039  0006DE  0A80               	xorlw	128
  3040  0006E0  0100               	movlb	0	; () banked
  3041  0006E2  6F99               	movwf	(??_strtol+2)& (0+255),b
  3042  0006E4  0100               	movlb	0	; () banked
  3043  0006E6  5196               	movf	(strtol@base+1)& (0+255),w,b
  3044  0006E8  0A80               	xorlw	128
  3045  0006EA  0100               	movlb	0	; () banked
  3046  0006EC  5999               	subwfb	(??_strtol+2)& (0+255),w,b
  3047  0006EE  B0D8               	btfsc	status,0,c
  3048  0006F0  D034               	goto	l3295
  3049                           
  3050                           ; BSR set to: 0
  3051                           
  3052                           ; BSR set to: 0
  3053                           
  3054                           ; BSR set to: 0
  3055  0006F2  C095  F089         	movff	strtol@base,___lmul@multiplier
  3056  0006F6  C096  F08A         	movff	strtol@base+1,___lmul@multiplier+1
  3057  0006FA  0100               	movlb	0	; () banked
  3058  0006FC  0E00               	movlw	0
  3059  0006FE  BF8A               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  3060  000700  0EFF               	movlw	-1
  3061  000702  6F8B               	movwf	(___lmul@multiplier+2)& (0+255),b
  3062  000704  6F8C               	movwf	(___lmul@multiplier+3)& (0+255),b
  3063  000706  C09C  F08D         	movff	strtol@a,___lmul@multiplicand
  3064  00070A  C09D  F08E         	movff	strtol@a+1,___lmul@multiplicand+1
  3065  00070E  C09E  F08F         	movff	strtol@a+2,___lmul@multiplicand+2
  3066  000712  C09F  F090         	movff	strtol@a+3,___lmul@multiplicand+3
  3067  000716  EC5F  F007         	call	___lmul	;wreg free
  3068  00071A  0100               	movlb	0	; () banked
  3069  00071C  51A0               	movf	strtol@c& (0+255),w,b
  3070  00071E  0100               	movlb	0	; () banked
  3071  000720  2589               	addwf	?___lmul& (0+255),w,b
  3072  000722  0100               	movlb	0	; () banked
  3073  000724  6F9C               	movwf	strtol@a& (0+255),b
  3074  000726  0E00               	movlw	0
  3075  000728  0100               	movlb	0	; () banked
  3076  00072A  218A               	addwfc	(?___lmul+1)& (0+255),w,b
  3077  00072C  0100               	movlb	0	; () banked
  3078  00072E  6F9D               	movwf	(strtol@a+1)& (0+255),b
  3079  000730  0E00               	movlw	0
  3080  000732  0100               	movlb	0	; () banked
  3081  000734  218B               	addwfc	(?___lmul+2)& (0+255),w,b
  3082  000736  0100               	movlb	0	; () banked
  3083  000738  6F9E               	movwf	(strtol@a+2)& (0+255),b
  3084  00073A  0E00               	movlw	0
  3085  00073C  0100               	movlb	0	; () banked
  3086  00073E  218C               	addwfc	(?___lmul+3)& (0+255),w,b
  3087  000740  0100               	movlb	0	; () banked
  3088  000742  6F9F               	movwf	(strtol@a+3)& (0+255),b
  3089                           
  3090                           ; BSR set to: 0
  3091  000744  C091  FFD9         	movff	strtol@s,fsr2l
  3092  000748  C092  FFDA         	movff	strtol@s+1,fsr2h
  3093  00074C  50DF               	movf	indf2,w,c
  3094  00074E  0100               	movlb	0	; () banked
  3095  000750  6FA0               	movwf	strtol@c& (0+255),b
  3096                           
  3097                           ; BSR set to: 0
  3098  000752  0100               	movlb	0	; () banked
  3099  000754  4B91               	infsnz	strtol@s& (0+255),f,b
  3100  000756  2B92               	incf	(strtol@s+1)& (0+255),f,b
  3101  000758  D7A0               	goto	l3277
  3102  00075A                     l3295:
  3103  00075A  0100               	movlb	0	; () banked
  3104  00075C  5193               	movf	strtol@endptr& (0+255),w,b
  3105  00075E  0100               	movlb	0	; () banked
  3106  000760  1194               	iorwf	(strtol@endptr+1)& (0+255),w,b
  3107  000762  B4D8               	btfsc	status,2,c
  3108  000764  D012               	goto	l3299
  3109                           
  3110                           ; BSR set to: 0
  3111  000766  0EFF               	movlw	255
  3112  000768  0100               	movlb	0	; () banked
  3113  00076A  2591               	addwf	strtol@s& (0+255),w,b
  3114  00076C  0100               	movlb	0	; () banked
  3115  00076E  6F97               	movwf	??_strtol& (0+255),b
  3116  000770  0EFF               	movlw	255
  3117  000772  0100               	movlb	0	; () banked
  3118  000774  2192               	addwfc	(strtol@s+1)& (0+255),w,b
  3119  000776  0100               	movlb	0	; () banked
  3120  000778  6F98               	movwf	(??_strtol+1)& (0+255),b
  3121  00077A  C093  FFD9         	movff	strtol@endptr,fsr2l
  3122  00077E  C094  FFDA         	movff	strtol@endptr+1,fsr2h
  3123  000782  C097  FFDE         	movff	??_strtol,postinc2
  3124  000786  C098  FFDD         	movff	??_strtol+1,postdec2
  3125  00078A                     l3299:
  3126                           
  3127                           ; BSR set to: 0
  3128  00078A  0100               	movlb	0	; () banked
  3129  00078C  519B               	movf	strtol@sign& (0+255),w,b
  3130  00078E  0100               	movlb	0	; () banked
  3131  000790  B4D8               	btfsc	status,2,c
  3132  000792  D01B               	goto	l1073
  3133                           
  3134                           ; BSR set to: 0
  3135  000794  C09C  F097         	movff	strtol@a,??_strtol
  3136  000798  C09D  F098         	movff	strtol@a+1,??_strtol+1
  3137  00079C  C09E  F099         	movff	strtol@a+2,??_strtol+2
  3138  0007A0  C09F  F09A         	movff	strtol@a+3,??_strtol+3
  3139  0007A4  0100               	movlb	0	; () banked
  3140  0007A6  1F97               	comf	??_strtol& (0+255),f,b
  3141  0007A8  1F98               	comf	(??_strtol+1)& (0+255),f,b
  3142  0007AA  1F99               	comf	(??_strtol+2)& (0+255),f,b
  3143  0007AC  1F9A               	comf	(??_strtol+3)& (0+255),f,b
  3144  0007AE  2B97               	incf	??_strtol& (0+255),f,b
  3145  0007B0  0E00               	movlw	0
  3146  0007B2  2398               	addwfc	(??_strtol+1)& (0+255),f,b
  3147  0007B4  2399               	addwfc	(??_strtol+2)& (0+255),f,b
  3148  0007B6  239A               	addwfc	(??_strtol+3)& (0+255),f,b
  3149  0007B8  C097  F091         	movff	??_strtol,?_strtol
  3150  0007BC  C098  F092         	movff	??_strtol+1,?_strtol+1
  3151  0007C0  C099  F093         	movff	??_strtol+2,?_strtol+2
  3152  0007C4  C09A  F094         	movff	??_strtol+3,?_strtol+3
  3153                           
  3154                           ; BSR set to: 0
  3155  0007C8  0012               	return	
  3156  0007CA                     l1073:
  3157                           
  3158                           ; BSR set to: 0
  3159  0007CA  C09C  F091         	movff	strtol@a,?_strtol
  3160  0007CE  C09D  F092         	movff	strtol@a+1,?_strtol+1
  3161  0007D2  C09E  F093         	movff	strtol@a+2,?_strtol+2
  3162  0007D6  C09F  F094         	movff	strtol@a+3,?_strtol+3
  3163                           
  3164                           ; BSR set to: 0
  3165  0007DA  0012               	return		;funcret
  3166  0007DC                     __end_of_strtol:
  3167                           	opt stack 0
  3168                           tblptru	equ	0xFF8
  3169                           tblptrh	equ	0xFF7
  3170                           tblptrl	equ	0xFF6
  3171                           tablat	equ	0xFF5
  3172                           intcon	equ	0xFF2
  3173                           intcon2	equ	0xFF1
  3174                           postinc0	equ	0xFEE
  3175                           wreg	equ	0xFE8
  3176                           postdec1	equ	0xFE5
  3177                           fsr1h	equ	0xFE2
  3178                           fsr1l	equ	0xFE1
  3179                           indf2	equ	0xFDF
  3180                           postinc2	equ	0xFDE
  3181                           postdec2	equ	0xFDD
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _toupper *****************
  3187 ;; Defined at:
  3188 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\toupper.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  c               1    wreg     unsigned char 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;  c               1   36[COMRAM] unsigned char 
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  1    wreg      unsigned char 
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;Total ram usage:        1 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    4
  3209 ;; This function calls:
  3210 ;;		Nothing
  3211 ;; This function is called by:
  3212 ;;		_strtol
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text18
  3217  00142A                     __ptext18:
  3218                           	opt stack 0
  3219  00142A                     _toupper:
  3220                           	opt stack 24
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;incstack = 0
  3224                           ;toupper@c stored from wreg
  3225  00142A  6E25               	movwf	toupper@c,c
  3226  00142C  0E7B               	movlw	123
  3227  00142E  6025               	cpfslt	toupper@c,c
  3228  001430  D004               	goto	l2505
  3229  001432  0E60               	movlw	96
  3230  001434  6425               	cpfsgt	toupper@c,c
  3231  001436  D001               	goto	l2505
  3232  001438  9A25               	bcf	toupper@c,5,c
  3233  00143A                     l2505:
  3234  00143A  5025               	movf	toupper@c,w,c
  3235  00143C  0012               	return	
  3236  00143E                     __end_of_toupper:
  3237                           	opt stack 0
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           intcon	equ	0xFF2
  3243                           intcon2	equ	0xFF1
  3244                           postinc0	equ	0xFEE
  3245                           wreg	equ	0xFE8
  3246                           postdec1	equ	0xFE5
  3247                           fsr1h	equ	0xFE2
  3248                           fsr1l	equ	0xFE1
  3249                           indf2	equ	0xFDF
  3250                           postinc2	equ	0xFDE
  3251                           postdec2	equ	0xFDD
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function _isspace *****************
  3257 ;; Defined at:
  3258 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isspace.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  c               1    wreg     unsigned char 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  c               1   38[COMRAM] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;		None               void
  3265 ;; Registers used:
  3266 ;;		wreg, status,2, status,0
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;Total ram usage:        3 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    4
  3279 ;; This function calls:
  3280 ;;		Nothing
  3281 ;; This function is called by:
  3282 ;;		_strtol
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           	psect	text19
  3287  00132A                     __ptext19:
  3288                           	opt stack 0
  3289  00132A                     _isspace:
  3290                           	opt stack 24
  3291                           
  3292                           ;incstack = 0
  3293                           ;isspace@c stored from wreg
  3294  00132A  6E27               	movwf	isspace@c,c
  3295  00132C  0E01               	movlw	1
  3296  00132E  6E26               	movwf	_isspace$1481,c
  3297  001330  0E20               	movlw	32
  3298  001332  1827               	xorwf	isspace@c,w,c
  3299  001334  B4D8               	btfsc	status,2,c
  3300  001336  D008               	goto	l2481
  3301  001338  0E0E               	movlw	14
  3302  00133A  6027               	cpfslt	isspace@c,c
  3303  00133C  D003               	goto	l2479
  3304  00133E  0E09               	movlw	9
  3305  001340  6027               	cpfslt	isspace@c,c
  3306  001342  D002               	goto	l2481
  3307  001344                     l2479:
  3308  001344  0E00               	movlw	0
  3309  001346  6E26               	movwf	_isspace$1481,c
  3310  001348                     l2481:
  3311  001348  C026  F025         	movff	_isspace$1481,??_isspace
  3312  00134C  3025               	rrcf	??_isspace,w,c
  3313  00134E  0012               	return	
  3314  001350                     __end_of_isspace:
  3315                           	opt stack 0
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           intcon	equ	0xFF2
  3321                           intcon2	equ	0xFF1
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec1	equ	0xFE5
  3325                           fsr1h	equ	0xFE2
  3326                           fsr1l	equ	0xFE1
  3327                           indf2	equ	0xFDF
  3328                           postinc2	equ	0xFDE
  3329                           postdec2	equ	0xFDD
  3330                           fsr2h	equ	0xFDA
  3331                           fsr2l	equ	0xFD9
  3332                           status	equ	0xFD8
  3333                           
  3334 ;; *************** function _isalpha *****************
  3335 ;; Defined at:
  3336 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isalpha.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  c               1    wreg     unsigned char 
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;  c               1   41[COMRAM] unsigned char 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;		None               void
  3343 ;; Registers used:
  3344 ;;		wreg, status,2, status,0, cstack
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;Total ram usage:        3 bytes
  3355 ;; Hardware stack levels used:    1
  3356 ;; Hardware stack levels required when called:    5
  3357 ;; This function calls:
  3358 ;;		_isupper
  3359 ;; This function is called by:
  3360 ;;		_strtol
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text20
  3365  001302                     __ptext20:
  3366                           	opt stack 0
  3367  001302                     _isalpha:
  3368                           	opt stack 23
  3369                           
  3370                           ;incstack = 0
  3371                           ;isalpha@c stored from wreg
  3372  001302  6E2A               	movwf	isalpha@c,c
  3373  001304  0E01               	movlw	1
  3374  001306  6E29               	movwf	_isalpha$1478,c
  3375  001308  0E7B               	movlw	123
  3376  00130A  602A               	cpfslt	isalpha@c,c
  3377  00130C  D003               	goto	l2491
  3378  00130E  0E61               	movlw	97
  3379  001310  602A               	cpfslt	isalpha@c,c
  3380  001312  D007               	goto	l2495
  3381  001314                     l2491:
  3382  001314  502A               	movf	isalpha@c,w,c
  3383  001316  ECEA  F009         	call	_isupper
  3384  00131A  B0D8               	btfsc	status,0,c
  3385  00131C  D002               	goto	l2495
  3386  00131E  0E00               	movlw	0
  3387  001320  6E29               	movwf	_isalpha$1478,c
  3388  001322                     l2495:
  3389  001322  C029  F028         	movff	_isalpha$1478,??_isalpha
  3390  001326  3028               	rrcf	??_isalpha,w,c
  3391  001328  0012               	return	
  3392  00132A                     __end_of_isalpha:
  3393                           	opt stack 0
  3394                           tblptru	equ	0xFF8
  3395                           tblptrh	equ	0xFF7
  3396                           tblptrl	equ	0xFF6
  3397                           tablat	equ	0xFF5
  3398                           intcon	equ	0xFF2
  3399                           intcon2	equ	0xFF1
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1h	equ	0xFE2
  3404                           fsr1l	equ	0xFE1
  3405                           indf2	equ	0xFDF
  3406                           postinc2	equ	0xFDE
  3407                           postdec2	equ	0xFDD
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _isupper *****************
  3413 ;; Defined at:
  3414 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isupper.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  c               1    wreg     unsigned char 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  c               1   38[COMRAM] unsigned char 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;		None               void
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;Total ram usage:        3 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    4
  3435 ;; This function calls:
  3436 ;;		Nothing
  3437 ;; This function is called by:
  3438 ;;		_isalpha
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           	psect	text21
  3443  0013D4                     __ptext21:
  3444                           	opt stack 0
  3445  0013D4                     _isupper:
  3446                           	opt stack 23
  3447                           
  3448                           ;incstack = 0
  3449                           ;isupper@c stored from wreg
  3450  0013D4  6E27               	movwf	isupper@c,c
  3451  0013D6  0E00               	movlw	0
  3452  0013D8  6E26               	movwf	_isupper$1484,c
  3453  0013DA  0E5B               	movlw	91
  3454  0013DC  6027               	cpfslt	isupper@c,c
  3455  0013DE  D005               	goto	l2227
  3456  0013E0  0E40               	movlw	64
  3457  0013E2  6427               	cpfsgt	isupper@c,c
  3458  0013E4  D002               	goto	l2227
  3459  0013E6  0E01               	movlw	1
  3460  0013E8  6E26               	movwf	_isupper$1484,c
  3461  0013EA                     l2227:
  3462  0013EA  C026  F025         	movff	_isupper$1484,??_isupper
  3463  0013EE  3025               	rrcf	??_isupper,w,c
  3464  0013F0  0012               	return	
  3465  0013F2                     __end_of_isupper:
  3466                           	opt stack 0
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           intcon	equ	0xFF2
  3472                           intcon2	equ	0xFF1
  3473                           postinc0	equ	0xFEE
  3474                           wreg	equ	0xFE8
  3475                           postdec1	equ	0xFE5
  3476                           fsr1h	equ	0xFE2
  3477                           fsr1l	equ	0xFE1
  3478                           indf2	equ	0xFDF
  3479                           postinc2	equ	0xFDE
  3480                           postdec2	equ	0xFDD
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8
  3484                           
  3485 ;; *************** function _srand *****************
  3486 ;; Defined at:
  3487 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\rand.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  x               2   24[BANK0 ] unsigned int 
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      void 
  3494 ;; Registers used:
  3495 ;;		status,2
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3501 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;Total ram usage:        2 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    4
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_InitRadio
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text22
  3516  00145E                     __ptext22:
  3517                           	opt stack 0
  3518  00145E                     _srand:
  3519                           	opt stack 25
  3520                           
  3521                           ;incstack = 0
  3522  00145E  C0A1  F036         	movff	srand@x,_randx
  3523  001462  C0A2  F037         	movff	srand@x+1,_randx+1
  3524  001466  6A38               	clrf	_randx+2,c
  3525  001468  6A39               	clrf	_randx+3,c
  3526  00146A  0012               	return		;funcret
  3527  00146C                     __end_of_srand:
  3528                           	opt stack 0
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           intcon	equ	0xFF2
  3534                           intcon2	equ	0xFF1
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           postdec1	equ	0xFE5
  3538                           fsr1h	equ	0xFE2
  3539                           fsr1l	equ	0xFE1
  3540                           indf2	equ	0xFDF
  3541                           postinc2	equ	0xFDE
  3542                           postdec2	equ	0xFDD
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _rand *****************
  3548 ;; Defined at:
  3549 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\rand.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  2   40[COMRAM] int 
  3556 ;; Registers used:
  3557 ;;		wreg, status,2, status,0, cstack
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3563 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;Total ram usage:        2 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    5
  3570 ;; This function calls:
  3571 ;;		___lmul
  3572 ;; This function is called by:
  3573 ;;		_InitRadio
  3574 ;;		_main
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text23
  3579  000FEE                     __ptext23:
  3580                           	opt stack 0
  3581  000FEE                     _rand:
  3582                           	opt stack 25
  3583                           
  3584                           ;incstack = 0
  3585  000FEE  C036  F089         	movff	_randx,___lmul@multiplier
  3586  000FF2  C037  F08A         	movff	_randx+1,___lmul@multiplier+1
  3587  000FF6  C038  F08B         	movff	_randx+2,___lmul@multiplier+2
  3588  000FFA  C039  F08C         	movff	_randx+3,___lmul@multiplier+3
  3589  000FFE  0E6D               	movlw	109
  3590  001000  0100               	movlb	0	; () banked
  3591  001002  6F8D               	movwf	___lmul@multiplicand& (0+255),b
  3592  001004  0E4E               	movlw	78
  3593  001006  6F8E               	movwf	(___lmul@multiplicand+1)& (0+255),b
  3594  001008  0EC6               	movlw	198
  3595  00100A  6F8F               	movwf	(___lmul@multiplicand+2)& (0+255),b
  3596  00100C  0E41               	movlw	65
  3597  00100E  6F90               	movwf	(___lmul@multiplicand+3)& (0+255),b
  3598  001010  EC5F  F007         	call	___lmul	;wreg free
  3599  001014  C089  F036         	movff	?___lmul,_randx
  3600  001018  C08A  F037         	movff	?___lmul+1,_randx+1
  3601  00101C  C08B  F038         	movff	?___lmul+2,_randx+2
  3602  001020  C08C  F039         	movff	?___lmul+3,_randx+3
  3603  001024  0E39               	movlw	57
  3604  001026  2636               	addwf	_randx,f,c
  3605  001028  0E30               	movlw	48
  3606  00102A  2237               	addwfc	_randx+1,f,c
  3607  00102C  0E00               	movlw	0
  3608  00102E  2238               	addwfc	_randx+2,f,c
  3609  001030  0E00               	movlw	0
  3610  001032  2239               	addwfc	_randx+3,f,c
  3611  001034  0EFF               	movlw	255
  3612  001036  1438               	andwf	_randx+2,w,c
  3613  001038  6E29               	movwf	?_rand,c
  3614  00103A  0E7F               	movlw	127
  3615  00103C  1439               	andwf	_randx+3,w,c
  3616  00103E  6E2A               	movwf	?_rand+1,c
  3617  001040  0012               	return	
  3618  001042                     __end_of_rand:
  3619                           	opt stack 0
  3620                           tblptru	equ	0xFF8
  3621                           tblptrh	equ	0xFF7
  3622                           tblptrl	equ	0xFF6
  3623                           tablat	equ	0xFF5
  3624                           intcon	equ	0xFF2
  3625                           intcon2	equ	0xFF1
  3626                           postinc0	equ	0xFEE
  3627                           wreg	equ	0xFE8
  3628                           postdec1	equ	0xFE5
  3629                           fsr1h	equ	0xFE2
  3630                           fsr1l	equ	0xFE1
  3631                           indf2	equ	0xFDF
  3632                           postinc2	equ	0xFDE
  3633                           postdec2	equ	0xFDD
  3634                           fsr2h	equ	0xFDA
  3635                           fsr2l	equ	0xFD9
  3636                           status	equ	0xFD8
  3637                           
  3638 ;; *************** function ___lmul *****************
  3639 ;; Defined at:
  3640 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul32.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3643 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  product         4   36[COMRAM] unsigned long 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  4    0[BANK0 ] unsigned long 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3655 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;Total ram usage:       12 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    4
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		_rand
  3666 ;;		_strtol
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text24
  3671  000EBE                     __ptext24:
  3672                           	opt stack 0
  3673  000EBE                     ___lmul:
  3674                           	opt stack 25
  3675                           
  3676                           ;incstack = 0
  3677  000EBE  0E00               	movlw	0
  3678  000EC0  6E25               	movwf	___lmul@product,c
  3679  000EC2  0E00               	movlw	0
  3680  000EC4  6E26               	movwf	___lmul@product+1,c
  3681  000EC6  0E00               	movlw	0
  3682  000EC8  6E27               	movwf	___lmul@product+2,c
  3683  000ECA  0E00               	movlw	0
  3684  000ECC  6E28               	movwf	___lmul@product+3,c
  3685  000ECE                     l3207:
  3686  000ECE  0100               	movlb	0	; () banked
  3687  000ED0  A189               	btfss	___lmul@multiplier& (0+255),0,b
  3688  000ED2  D00C               	goto	l3211
  3689                           
  3690                           ; BSR set to: 0
  3691  000ED4  0100               	movlb	0	; () banked
  3692  000ED6  518D               	movf	___lmul@multiplicand& (0+255),w,b
  3693  000ED8  2625               	addwf	___lmul@product,f,c
  3694  000EDA  0100               	movlb	0	; () banked
  3695  000EDC  518E               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  3696  000EDE  2226               	addwfc	___lmul@product+1,f,c
  3697  000EE0  0100               	movlb	0	; () banked
  3698  000EE2  518F               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  3699  000EE4  2227               	addwfc	___lmul@product+2,f,c
  3700  000EE6  0100               	movlb	0	; () banked
  3701  000EE8  5190               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  3702  000EEA  2228               	addwfc	___lmul@product+3,f,c
  3703  000EEC                     l3211:
  3704                           
  3705                           ; BSR set to: 0
  3706  000EEC  0100               	movlb	0	; () banked
  3707  000EEE  90D8               	bcf	status,0,c
  3708  000EF0  378D               	rlcf	___lmul@multiplicand& (0+255),f,b
  3709  000EF2  378E               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  3710  000EF4  378F               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  3711  000EF6  3790               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  3712                           
  3713                           ; BSR set to: 0
  3714  000EF8  0100               	movlb	0	; () banked
  3715  000EFA  90D8               	bcf	status,0,c
  3716  000EFC  338C               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  3717  000EFE  338B               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  3718  000F00  338A               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  3719  000F02  3389               	rrcf	___lmul@multiplier& (0+255),f,b
  3720  000F04  0100               	movlb	0	; () banked
  3721  000F06  5189               	movf	___lmul@multiplier& (0+255),w,b
  3722  000F08  0100               	movlb	0	; () banked
  3723  000F0A  118A               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  3724  000F0C  0100               	movlb	0	; () banked
  3725  000F0E  118B               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  3726  000F10  0100               	movlb	0	; () banked
  3727  000F12  118C               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  3728  000F14  A4D8               	btfss	status,2,c
  3729  000F16  D7DB               	goto	l3207
  3730                           
  3731                           ; BSR set to: 0
  3732  000F18  C025  F089         	movff	___lmul@product,?___lmul
  3733  000F1C  C026  F08A         	movff	___lmul@product+1,?___lmul+1
  3734  000F20  C027  F08B         	movff	___lmul@product+2,?___lmul+2
  3735  000F24  C028  F08C         	movff	___lmul@product+3,?___lmul+3
  3736                           
  3737                           ; BSR set to: 0
  3738  000F28  0012               	return		;funcret
  3739  000F2A                     __end_of___lmul:
  3740                           	opt stack 0
  3741                           tblptru	equ	0xFF8
  3742                           tblptrh	equ	0xFF7
  3743                           tblptrl	equ	0xFF6
  3744                           tablat	equ	0xFF5
  3745                           intcon	equ	0xFF2
  3746                           intcon2	equ	0xFF1
  3747                           postinc0	equ	0xFEE
  3748                           wreg	equ	0xFE8
  3749                           postdec1	equ	0xFE5
  3750                           fsr1h	equ	0xFE2
  3751                           fsr1l	equ	0xFE1
  3752                           indf2	equ	0xFDF
  3753                           postinc2	equ	0xFDE
  3754                           postdec2	equ	0xFDD
  3755                           fsr2h	equ	0xFDA
  3756                           fsr2l	equ	0xFD9
  3757                           status	equ	0xFD8
  3758                           
  3759 ;; *************** function _getUUID *****************
  3760 ;; Defined at:
  3761 ;;		line 50 in file "main.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;		None
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  1    wreg      void 
  3768 ;; Registers used:
  3769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;Total ram usage:        0 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    7
  3782 ;; This function calls:
  3783 ;;		_printf
  3784 ;;		_read_line
  3785 ;;		_strcpy
  3786 ;; This function is called by:
  3787 ;;		_InitRadio
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text25
  3792  0012D8                     __ptext25:
  3793                           	opt stack 0
  3794  0012D8                     _getUUID:
  3795                           	opt stack 22
  3796                           
  3797                           ;main.c: 51: printf("sys get hweui\r\n");
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;incstack = 0
  3801  0012D8  0E66               	movlw	low STR_5
  3802  0012DA  0100               	movlb	0	; () banked
  3803  0012DC  6F8E               	movwf	printf@f& (0+255),b
  3804  0012DE  0EFF               	movlw	high STR_5
  3805  0012E0  0100               	movlb	0	; () banked
  3806  0012E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  3807  0012E4  EC4C  F000         	call	_printf	;wreg free
  3808                           
  3809                           ;main.c: 52: read_line();
  3810  0012E8  EC36  F00A         	call	_read_line	;wreg free
  3811                           
  3812                           ;main.c: 53: strcpy(uuid,line);
  3813  0012EC  0E61               	movlw	low _uuid
  3814  0012EE  6E25               	movwf	strcpy@to,c
  3815  0012F0  0E00               	movlw	high _uuid
  3816  0012F2  6E26               	movwf	strcpy@to+1,c
  3817  0012F4  0E80               	movlw	low _line
  3818  0012F6  6E27               	movwf	strcpy@from,c
  3819  0012F8  0E01               	movlw	high _line
  3820  0012FA  6E28               	movwf	strcpy@from+1,c
  3821  0012FC  EC29  F009         	call	_strcpy	;wreg free
  3822  001300  0012               	return		;funcret
  3823  001302                     __end_of_getUUID:
  3824                           	opt stack 0
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           intcon	equ	0xFF2
  3830                           intcon2	equ	0xFF1
  3831                           postinc0	equ	0xFEE
  3832                           wreg	equ	0xFE8
  3833                           postdec1	equ	0xFE5
  3834                           fsr1h	equ	0xFE2
  3835                           fsr1l	equ	0xFE1
  3836                           indf2	equ	0xFDF
  3837                           postinc2	equ	0xFDE
  3838                           postdec2	equ	0xFDD
  3839                           fsr2h	equ	0xFDA
  3840                           fsr2l	equ	0xFD9
  3841                           status	equ	0xFD8
  3842                           
  3843 ;; *************** function _strcpy *****************
  3844 ;; Defined at:
  3845 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strcpy.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;  to              2   36[COMRAM] PTR unsigned char 
  3848 ;;		 -> uuid(40), 
  3849 ;;  from            2   38[COMRAM] PTR const unsigned char 
  3850 ;;		 -> line(128), 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  cp              2   40[COMRAM] PTR unsigned char 
  3853 ;;		 -> uuid(40), 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  2   36[COMRAM] PTR unsigned char 
  3856 ;; Registers used:
  3857 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3863 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;Total ram usage:        6 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    4
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_getUUID
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text26
  3878  001252                     __ptext26:
  3879                           	opt stack 0
  3880  001252                     _strcpy:
  3881                           	opt stack 24
  3882                           
  3883                           ;incstack = 0
  3884  001252  C025  F029         	movff	strcpy@to,strcpy@cp
  3885  001256  C026  F02A         	movff	strcpy@to+1,strcpy@cp+1
  3886  00125A  D004               	goto	l2405
  3887  00125C                     l2403:
  3888  00125C  4A29               	infsnz	strcpy@cp,f,c
  3889  00125E  2A2A               	incf	strcpy@cp+1,f,c
  3890  001260  4A27               	infsnz	strcpy@from,f,c
  3891  001262  2A28               	incf	strcpy@from+1,f,c
  3892  001264                     l2405:
  3893  001264  C027  FFD9         	movff	strcpy@from,fsr2l
  3894  001268  C028  FFDA         	movff	strcpy@from+1,fsr2h
  3895  00126C  C029  FFE1         	movff	strcpy@cp,fsr1l
  3896  001270  C02A  FFE2         	movff	strcpy@cp+1,fsr1h
  3897  001274  CFDF FFE7          	movff	indf2,indf1
  3898  001278  50E7               	movf	indf1,w,c
  3899  00127A  B4D8               	btfsc	status,2,c
  3900  00127C  0012               	return	
  3901  00127E  D7EE               	goto	l2403
  3902  001280                     __end_of_strcpy:
  3903                           	opt stack 0
  3904                           tblptru	equ	0xFF8
  3905                           tblptrh	equ	0xFF7
  3906                           tblptrl	equ	0xFF6
  3907                           tablat	equ	0xFF5
  3908                           intcon	equ	0xFF2
  3909                           intcon2	equ	0xFF1
  3910                           postinc0	equ	0xFEE
  3911                           wreg	equ	0xFE8
  3912                           indf1	equ	0xFE7
  3913                           postdec1	equ	0xFE5
  3914                           fsr1h	equ	0xFE2
  3915                           fsr1l	equ	0xFE1
  3916                           indf2	equ	0xFDF
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           fsr2h	equ	0xFDA
  3920                           fsr2l	equ	0xFD9
  3921                           status	equ	0xFD8
  3922                           
  3923 ;; *************** function _read_line *****************
  3924 ;; Defined at:
  3925 ;;		line 250 in file "mcc_generated_files/eusart1.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  2  147[None  ] int 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;Total ram usage:        0 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    4
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_getUUID
  3950 ;;		_InitRadio
  3951 ;;		_main
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           	psect	text27
  3956  00146C                     __ptext27:
  3957                           	opt stack 0
  3958  00146C                     _read_line:
  3959                           	opt stack 26
  3960  00146C                     l2233:
  3961  00146C  0433               	decf	_ready,w,c	;volatile
  3962  00146E  A4D8               	btfss	status,2,c
  3963  001470  D7FD               	goto	l2233
  3964                           
  3965                           ;eusart1.c: 252: }
  3966                           ;eusart1.c: 253: ready=0;
  3967  001472  0E00               	movlw	0
  3968  001474  6E33               	movwf	_ready,c	;volatile
  3969  001476  0012               	return	
  3970  001478                     __end_of_read_line:
  3971                           	opt stack 0
  3972                           tblptru	equ	0xFF8
  3973                           tblptrh	equ	0xFF7
  3974                           tblptrl	equ	0xFF6
  3975                           tablat	equ	0xFF5
  3976                           intcon	equ	0xFF2
  3977                           intcon2	equ	0xFF1
  3978                           postinc0	equ	0xFEE
  3979                           wreg	equ	0xFE8
  3980                           indf1	equ	0xFE7
  3981                           postdec1	equ	0xFE5
  3982                           fsr1h	equ	0xFE2
  3983                           fsr1l	equ	0xFE1
  3984                           indf2	equ	0xFDF
  3985                           postinc2	equ	0xFDE
  3986                           postdec2	equ	0xFDD
  3987                           fsr2h	equ	0xFDA
  3988                           fsr2l	equ	0xFD9
  3989                           status	equ	0xFD8
  3990                           
  3991 ;; *************** function _printf *****************
  3992 ;; Defined at:
  3993 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  f               2    5[BANK0 ] PTR const unsigned char 
  3996 ;;		 -> STR_20(36), STR_19(19), STR_18(19), STR_17(19), 
  3997 ;;		 -> STR_16(19), STR_15(19), STR_14(19), STR_13(12), 
  3998 ;;		 -> STR_12(16), STR_11(18), STR_10(15), STR_9(15), 
  3999 ;;		 -> STR_8(15), STR_7(14), STR_6(12), STR_5(16), 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  idx             1   21[BANK0 ] unsigned char 
  4002 ;;  tmpval          4    0        struct .
  4003 ;;  width           2   32[BANK0 ] int 
  4004 ;;  val             2   29[BANK0 ] unsigned int 
  4005 ;;  len             2   27[BANK0 ] unsigned int 
  4006 ;;  ap              2   25[BANK0 ] PTR void [1]
  4007 ;;		 -> ?_printf(2), 
  4008 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
  4009 ;;		 -> STR_21(7), uuid(40), 
  4010 ;;  c               1   34[BANK0 ] char 
  4011 ;;  flag            1   31[BANK0 ] unsigned char 
  4012 ;;  prec            1   22[BANK0 ] char 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  2    5[BANK0 ] int 
  4015 ;; Registers used:
  4016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4022 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;Total ram usage:       30 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    6
  4029 ;; This function calls:
  4030 ;;		___lwdiv
  4031 ;;		___lwmod
  4032 ;;		___wmul
  4033 ;;		_isdigit
  4034 ;;		_putch
  4035 ;; This function is called by:
  4036 ;;		_getUUID
  4037 ;;		_InitRadio
  4038 ;;		_main
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text28
  4043  000098                     __ptext28:
  4044                           	opt stack 0
  4045  000098                     _printf:
  4046                           	opt stack 24
  4047                           
  4048                           ;doprnt.c: 466: va_list ap;
  4049                           ;doprnt.c: 499: signed char c;
  4050                           ;doprnt.c: 501: int width;
  4051                           ;doprnt.c: 506: signed char prec;
  4052                           ;doprnt.c: 508: unsigned char flag;
  4053                           ;doprnt.c: 523: union {
  4054                           ;doprnt.c: 524: unsigned long vd;
  4055                           ;doprnt.c: 525: double integ;
  4056                           ;doprnt.c: 526: } tmpval;
  4057                           ;doprnt.c: 528: unsigned int val;
  4058                           ;doprnt.c: 529: unsigned len;
  4059                           ;doprnt.c: 530: const char * cp;
  4060                           ;doprnt.c: 533: *ap = __va_start();
  4061                           
  4062                           ;incstack = 0
  4063  000098  0E90               	movlw	low (?_printf+2)
  4064  00009A  0100               	movlb	0	; () banked
  4065  00009C  6FA2               	movwf	printf@ap& (0+255),b
  4066  00009E  0E00               	movlw	high (?_printf+2)
  4067  0000A0  0100               	movlb	0	; () banked
  4068  0000A2  6FA3               	movwf	(printf@ap+1)& (0+255),b
  4069                           
  4070                           ;doprnt.c: 536: while(c = *f++) {
  4071  0000A4  D268               	goto	l3203
  4072  0000A6                     l3047:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;doprnt.c: 538: if(c != '%')
  4076  0000A6  0E25               	movlw	37
  4077  0000A8  0100               	movlb	0	; () banked
  4078  0000AA  19AB               	xorwf	printf@c& (0+255),w,b
  4079  0000AC  B4D8               	btfsc	status,2,c
  4080  0000AE  D005               	goto	l3051
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;doprnt.c: 540: {
  4084                           ;doprnt.c: 541: (putch(c) );
  4085  0000B0  0100               	movlb	0	; () banked
  4086  0000B2  51AB               	movf	printf@c& (0+255),w,b
  4087  0000B4  EC47  F00A         	call	_putch
  4088                           
  4089                           ;doprnt.c: 542: continue;
  4090  0000B8  D25E               	goto	l3203
  4091  0000BA                     l3051:
  4092                           
  4093                           ;doprnt.c: 543: }
  4094                           ;doprnt.c: 546: width = 0;
  4095  0000BA  0E00               	movlw	0
  4096  0000BC  0100               	movlb	0	; () banked
  4097  0000BE  6FAA               	movwf	(printf@width+1)& (0+255),b
  4098  0000C0  0E00               	movlw	0
  4099  0000C2  6FA9               	movwf	printf@width& (0+255),b
  4100                           
  4101                           ;doprnt.c: 548: flag = 0;
  4102  0000C4  0E00               	movlw	0
  4103  0000C6  0100               	movlb	0	; () banked
  4104  0000C8  6FA8               	movwf	printf@flag& (0+255),b
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;doprnt.c: 551: switch(*f) {
  4108                           
  4109                           ;doprnt.c: 550: for(;;) {
  4110  0000CA  D005               	goto	l3057
  4111  0000CC                     l3053:
  4112                           
  4113                           ;doprnt.c: 580: flag |= 0x04;
  4114  0000CC  0100               	movlb	0	; () banked
  4115  0000CE  85A8               	bsf	printf@flag& (0+255),2,b
  4116                           
  4117                           ;doprnt.c: 581: f++;
  4118  0000D0  0100               	movlb	0	; () banked
  4119  0000D2  4B8E               	infsnz	printf@f& (0+255),f,b
  4120  0000D4  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4121  0000D6                     l3057:
  4122  0000D6  C08E  FFF6         	movff	printf@f,tblptrl
  4123  0000DA  C08F  FFF7         	movff	printf@f+1,tblptrh
  4124  0000DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4125  0000DE  6AF8               	clrf	tblptru,c
  4126  0000E0                     	endif
  4127  0000E0                     	if	0	;tblptru may be non-zero
  4128  0000E0                     	endif
  4129  0000E0  0008               	tblrd		*
  4130  0000E2  50F5               	movf	tablat,w,c
  4131                           
  4132                           ; Switch size 1, requested type "space"
  4133                           ; Number of cases is 1, Range of values is 48 to 48
  4134                           ; switch strategies available:
  4135                           ; Name         Instructions Cycles
  4136                           ; simple_byte            4     3 (average)
  4137                           ;	Chosen strategy is simple_byte
  4138  0000E4  0A30               	xorlw	48	; case 48
  4139  0000E6  B4D8               	btfsc	status,2,c
  4140  0000E8  D7F1               	goto	l3053
  4141                           
  4142                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4143                           
  4144                           ;doprnt.c: 586: }
  4145                           
  4146                           ;doprnt.c: 585: break;
  4147  0000EA  C08E  FFF6         	movff	printf@f,tblptrl
  4148  0000EE  C08F  FFF7         	movff	printf@f+1,tblptrh
  4149  0000F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4150  0000F2  6AF8               	clrf	tblptru,c
  4151  0000F4                     	endif
  4152  0000F4                     	if	0	;tblptru may be non-zero
  4153  0000F4                     	endif
  4154  0000F4  0008               	tblrd		*
  4155  0000F6  50F5               	movf	tablat,w,c
  4156  0000F8  ECF9  F009         	call	_isdigit
  4157  0000FC  A0D8               	btfss	status,0,c
  4158  0000FE  D0D1               	goto	l3105
  4159                           
  4160                           ;doprnt.c: 598: width = 0;
  4161  000100  0E00               	movlw	0
  4162  000102  0100               	movlb	0	; () banked
  4163  000104  6FAA               	movwf	(printf@width+1)& (0+255),b
  4164  000106  0E00               	movlw	0
  4165  000108  6FA9               	movwf	printf@width& (0+255),b
  4166  00010A                     l3063:
  4167                           
  4168                           ;doprnt.c: 600: width *= 10;
  4169  00010A  C0A9  F025         	movff	printf@width,___wmul@multiplier
  4170  00010E  C0AA  F026         	movff	printf@width+1,___wmul@multiplier+1
  4171  000112  0E00               	movlw	0
  4172  000114  6E28               	movwf	___wmul@multiplicand+1,c
  4173  000116  0E0A               	movlw	10
  4174  000118  6E27               	movwf	___wmul@multiplicand,c
  4175  00011A  ECA8  F009         	call	___wmul	;wreg free
  4176  00011E  C025  F0A9         	movff	?___wmul,printf@width
  4177  000122  C026  F0AA         	movff	?___wmul+1,printf@width+1
  4178                           
  4179                           ;doprnt.c: 601: width += *f++ - '0';
  4180  000126  0ED0               	movlw	208
  4181  000128  0100               	movlb	0	; () banked
  4182  00012A  6F9A               	movwf	??_printf& (0+255),b
  4183  00012C  0EFF               	movlw	255
  4184  00012E  0100               	movlb	0	; () banked
  4185  000130  6F9B               	movwf	(??_printf+1)& (0+255),b
  4186  000132  C08E  FFF6         	movff	printf@f,tblptrl
  4187  000136  C08F  FFF7         	movff	printf@f+1,tblptrh
  4188  00013A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4189  00013A  6AF8               	clrf	tblptru,c
  4190  00013C                     	endif
  4191  00013C                     	if	0	;tblptru may be non-zero
  4192  00013C                     	endif
  4193  00013C  0008               	tblrd		*
  4194  00013E  50F5               	movf	tablat,w,c
  4195  000140  0100               	movlb	0	; () banked
  4196  000142  6F9C               	movwf	(??_printf+2)& (0+255),b
  4197  000144  6B9D               	clrf	(??_printf+3)& (0+255),b
  4198  000146  0100               	movlb	0	; () banked
  4199  000148  519A               	movf	??_printf& (0+255),w,b
  4200  00014A  0100               	movlb	0	; () banked
  4201  00014C  279C               	addwf	(??_printf+2)& (0+255),f,b
  4202  00014E  0100               	movlb	0	; () banked
  4203  000150  519B               	movf	(??_printf+1)& (0+255),w,b
  4204  000152  0100               	movlb	0	; () banked
  4205  000154  239D               	addwfc	(??_printf+3)& (0+255),f,b
  4206  000156  0100               	movlb	0	; () banked
  4207  000158  519C               	movf	(??_printf+2)& (0+255),w,b
  4208  00015A  0100               	movlb	0	; () banked
  4209  00015C  27A9               	addwf	printf@width& (0+255),f,b
  4210  00015E  0100               	movlb	0	; () banked
  4211  000160  519D               	movf	(??_printf+3)& (0+255),w,b
  4212  000162  0100               	movlb	0	; () banked
  4213  000164  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  4214                           
  4215                           ; BSR set to: 0
  4216  000166  0100               	movlb	0	; () banked
  4217  000168  4B8E               	infsnz	printf@f& (0+255),f,b
  4218  00016A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4222  00016C  C08E  FFF6         	movff	printf@f,tblptrl
  4223  000170  C08F  FFF7         	movff	printf@f+1,tblptrh
  4224  000174                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4225  000174  6AF8               	clrf	tblptru,c
  4226  000176                     	endif
  4227  000176                     	if	0	;tblptru may be non-zero
  4228  000176                     	endif
  4229  000176  0008               	tblrd		*
  4230  000178  50F5               	movf	tablat,w,c
  4231  00017A  ECF9  F009         	call	_isdigit
  4232  00017E  A0D8               	btfss	status,0,c
  4233  000180  D090               	goto	l3105
  4234  000182  D7C3               	goto	l3063
  4235  000184                     l3071:
  4236                           
  4237                           ;doprnt.c: 718: case 'x':
  4238                           ;doprnt.c: 721: flag |= 0x80;
  4239  000184  0100               	movlb	0	; () banked
  4240  000186  8FA8               	bsf	printf@flag& (0+255),7,b
  4241                           
  4242                           ;doprnt.c: 723: break;
  4243  000188  D0AC               	goto	l402
  4244  00018A                     l3073:
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4248  00018A  C0A2  FFD9         	movff	printf@ap,fsr2l
  4249  00018E  C0A3  FFDA         	movff	printf@ap+1,fsr2h
  4250  000192  CFDE F0A0          	movff	postinc2,printf@cp
  4251  000196  CFDD F0A1          	movff	postdec2,printf@cp+1
  4252                           
  4253                           ; BSR set to: 0
  4254  00019A  0E02               	movlw	2
  4255  00019C  0100               	movlb	0	; () banked
  4256  00019E  27A2               	addwf	printf@ap& (0+255),f,b
  4257  0001A0  0E00               	movlw	0
  4258  0001A2  23A3               	addwfc	(printf@ap+1)& (0+255),f,b
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;doprnt.c: 740: if(!cp)
  4262  0001A4  0100               	movlb	0	; () banked
  4263  0001A6  51A0               	movf	printf@cp& (0+255),w,b
  4264  0001A8  0100               	movlb	0	; () banked
  4265  0001AA  11A1               	iorwf	(printf@cp+1)& (0+255),w,b
  4266  0001AC  A4D8               	btfss	status,2,c
  4267  0001AE  D006               	goto	l3081
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;doprnt.c: 741: cp = "(null)";
  4271  0001B0  0EF8               	movlw	low STR_21
  4272  0001B2  0100               	movlb	0	; () banked
  4273  0001B4  6FA0               	movwf	printf@cp& (0+255),b
  4274  0001B6  0EFF               	movlw	high STR_21
  4275  0001B8  0100               	movlb	0	; () banked
  4276  0001BA  6FA1               	movwf	(printf@cp+1)& (0+255),b
  4277  0001BC                     l3081:
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;doprnt.c: 745: len = 0;
  4281  0001BC  0E00               	movlw	0
  4282  0001BE  0100               	movlb	0	; () banked
  4283  0001C0  6FA5               	movwf	(printf@len+1)& (0+255),b
  4284  0001C2  0E00               	movlw	0
  4285  0001C4  6FA4               	movwf	printf@len& (0+255),b
  4286                           
  4287                           ;doprnt.c: 746: while(cp[len])
  4288  0001C6  D003               	goto	l3085
  4289  0001C8                     l3083:
  4290                           
  4291                           ;doprnt.c: 747: len++;
  4292  0001C8  0100               	movlb	0	; () banked
  4293  0001CA  4BA4               	infsnz	printf@len& (0+255),f,b
  4294  0001CC  2BA5               	incf	(printf@len+1)& (0+255),f,b
  4295  0001CE                     l3085:
  4296                           
  4297                           ; BSR set to: 0
  4298  0001CE  0100               	movlb	0	; () banked
  4299  0001D0  51A4               	movf	printf@len& (0+255),w,b
  4300  0001D2  0100               	movlb	0	; () banked
  4301  0001D4  25A0               	addwf	printf@cp& (0+255),w,b
  4302  0001D6  0100               	movlb	0	; () banked
  4303  0001D8  6F9A               	movwf	??_printf& (0+255),b
  4304  0001DA  0100               	movlb	0	; () banked
  4305  0001DC  51A5               	movf	(printf@len+1)& (0+255),w,b
  4306  0001DE  0100               	movlb	0	; () banked
  4307  0001E0  21A1               	addwfc	(printf@cp+1)& (0+255),w,b
  4308  0001E2  0100               	movlb	0	; () banked
  4309  0001E4  6F9B               	movwf	(??_printf+1)& (0+255),b
  4310  0001E6  C09A  FFF6         	movff	??_printf,tblptrl
  4311  0001EA  C09B  FFF7         	movff	??_printf+1,tblptrh
  4312  0001EE  0E00               	movlw	low (__mediumconst shr (0+16))
  4313  0001F0  6EF8               	movwf	tblptru,c
  4314  0001F2  0E0F               	movlw	(high __ramtop+-1)
  4315  0001F4  64F7               	cpfsgt	tblptrh,c
  4316  0001F6  D003               	bra	u2517
  4317  0001F8  0008               	tblrd		*
  4318  0001FA  50F5               	movf	tablat,w,c
  4319  0001FC  D005               	bra	u2510
  4320  0001FE                     u2517:
  4321  0001FE  CFF6 FFE1          	movff	tblptrl,fsr1l
  4322  000202  CFF7 FFE2          	movff	tblptrh,fsr1h
  4323  000206  50E7               	movf	indf1,w,c
  4324  000208                     u2510:
  4325  000208  0900               	iorlw	0
  4326  00020A  A4D8               	btfss	status,2,c
  4327  00020C  D7DD               	goto	l3083
  4328                           
  4329                           ;doprnt.c: 757: if(width > len)
  4330  00020E  0100               	movlb	0	; () banked
  4331  000210  51A9               	movf	printf@width& (0+255),w,b
  4332  000212  0100               	movlb	0	; () banked
  4333  000214  5DA4               	subwf	printf@len& (0+255),w,b
  4334  000216  0100               	movlb	0	; () banked
  4335  000218  51AA               	movf	(printf@width+1)& (0+255),w,b
  4336  00021A  0100               	movlb	0	; () banked
  4337  00021C  59A5               	subwfb	(printf@len+1)& (0+255),w,b
  4338  00021E  B0D8               	btfsc	status,0,c
  4339  000220  D009               	goto	l3091
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 758: width -= len;
  4343  000222  0100               	movlb	0	; () banked
  4344  000224  51A4               	movf	printf@len& (0+255),w,b
  4345  000226  0100               	movlb	0	; () banked
  4346  000228  5FA9               	subwf	printf@width& (0+255),f,b
  4347  00022A  0100               	movlb	0	; () banked
  4348  00022C  51A5               	movf	(printf@len+1)& (0+255),w,b
  4349  00022E  0100               	movlb	0	; () banked
  4350  000230  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  4351  000232  D009               	goto	l3095
  4352  000234                     l3091:
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;doprnt.c: 759: else
  4356                           ;doprnt.c: 760: width = 0;
  4357  000234  0E00               	movlw	0
  4358  000236  0100               	movlb	0	; () banked
  4359  000238  6FAA               	movwf	(printf@width+1)& (0+255),b
  4360  00023A  0E00               	movlw	0
  4361  00023C  6FA9               	movwf	printf@width& (0+255),b
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;doprnt.c: 764: while(width--)
  4365  00023E  D003               	goto	l3095
  4366  000240                     l3093:
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;doprnt.c: 765: (putch(' ') );
  4370  000240  0E20               	movlw	32
  4371  000242  EC47  F00A         	call	_putch
  4372  000246                     l3095:
  4373  000246  0100               	movlb	0	; () banked
  4374  000248  07A9               	decf	printf@width& (0+255),f,b
  4375  00024A  A0D8               	btfss	status,0,c
  4376  00024C  07AA               	decf	(printf@width+1)& (0+255),f,b
  4377  00024E  0100               	movlb	0	; () banked
  4378  000250  29A9               	incf	printf@width& (0+255),w,b
  4379  000252  E1F6               	bnz	l3093
  4380  000254  0100               	movlb	0	; () banked
  4381  000256  29AA               	incf	(printf@width+1)& (0+255),w,b
  4382  000258  B4D8               	btfsc	status,2,c
  4383  00025A  D017               	goto	l3101
  4384  00025C  D7F1               	goto	l3093
  4385  00025E                     l3097:
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;doprnt.c: 768: (putch(*cp++) );
  4389  00025E  C0A0  FFF6         	movff	printf@cp,tblptrl
  4390  000262  C0A1  FFF7         	movff	printf@cp+1,tblptrh
  4391  000266  0E00               	movlw	low (__mediumconst shr (0+16))
  4392  000268  6EF8               	movwf	tblptru,c
  4393  00026A  0E0F               	movlw	(high __ramtop+-1)
  4394  00026C  64F7               	cpfsgt	tblptrh,c
  4395  00026E  D003               	bra	u2557
  4396  000270  0008               	tblrd		*
  4397  000272  50F5               	movf	tablat,w,c
  4398  000274  D005               	bra	u2550
  4399  000276                     u2557:
  4400  000276  CFF6 FFE1          	movff	tblptrl,fsr1l
  4401  00027A  CFF7 FFE2          	movff	tblptrh,fsr1h
  4402  00027E  50E7               	movf	indf1,w,c
  4403  000280                     u2550:
  4404  000280  EC47  F00A         	call	_putch
  4405  000284  0100               	movlb	0	; () banked
  4406  000286  4BA0               	infsnz	printf@cp& (0+255),f,b
  4407  000288  2BA1               	incf	(printf@cp+1)& (0+255),f,b
  4408  00028A                     l3101:
  4409                           
  4410                           ; BSR set to: 0
  4411  00028A  0100               	movlb	0	; () banked
  4412  00028C  07A4               	decf	printf@len& (0+255),f,b
  4413  00028E  A0D8               	btfss	status,0,c
  4414  000290  07A5               	decf	(printf@len+1)& (0+255),f,b
  4415  000292  0100               	movlb	0	; () banked
  4416  000294  29A4               	incf	printf@len& (0+255),w,b
  4417  000296  E1E3               	bnz	l3097
  4418  000298  0100               	movlb	0	; () banked
  4419  00029A  29A5               	incf	(printf@len+1)& (0+255),w,b
  4420  00029C  B4D8               	btfsc	status,2,c
  4421  00029E  D16B               	goto	l3203
  4422  0002A0  D7DE               	goto	l3097
  4423  0002A2                     l3105:
  4424  0002A2  C08E  FFF6         	movff	printf@f,tblptrl
  4425  0002A6  C08F  FFF7         	movff	printf@f+1,tblptrh
  4426  0002AA  0100               	movlb	0	; () banked
  4427  0002AC  4B8E               	infsnz	printf@f& (0+255),f,b
  4428  0002AE  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4429  0002B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4430  0002B0  6AF8               	clrf	tblptru,c
  4431  0002B2                     	endif
  4432  0002B2                     	if	0	;tblptru may be non-zero
  4433  0002B2                     	endif
  4434  0002B2  0008               	tblrd		*
  4435  0002B4  CFF5 F0AB          	movff	tablat,printf@c
  4436  0002B8  0100               	movlb	0	; () banked
  4437  0002BA  51AB               	movf	printf@c& (0+255),w,b
  4438                           
  4439                           ; Switch size 1, requested type "space"
  4440                           ; Number of cases is 6, Range of values is 0 to 120
  4441                           ; switch strategies available:
  4442                           ; Name         Instructions Cycles
  4443                           ; simple_byte           19    10 (average)
  4444                           ;	Chosen strategy is simple_byte
  4445  0002BC  0A00               	xorlw	0	; case 0
  4446  0002BE  B4D8               	btfsc	status,2,c
  4447  0002C0  0012               	return	
  4448  0002C2  0A58               	xorlw	88	; case 88
  4449  0002C4  B4D8               	btfsc	status,2,c
  4450  0002C6  D75E               	goto	l3071
  4451  0002C8  0A3C               	xorlw	60	; case 100
  4452  0002CA  B4D8               	btfsc	status,2,c
  4453  0002CC  D00A               	goto	l402
  4454  0002CE  0A0D               	xorlw	13	; case 105
  4455  0002D0  B4D8               	btfsc	status,2,c
  4456  0002D2  D007               	goto	l402
  4457  0002D4  0A1A               	xorlw	26	; case 115
  4458  0002D6  B4D8               	btfsc	status,2,c
  4459  0002D8  D758               	goto	l3073
  4460  0002DA  0A0B               	xorlw	11	; case 120
  4461  0002DC  B4D8               	btfsc	status,2,c
  4462  0002DE  D752               	goto	l3071
  4463  0002E0  D14A               	goto	l3203
  4464  0002E2                     l402:
  4465                           
  4466                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4467  0002E2  0100               	movlb	0	; () banked
  4468  0002E4  BFA8               	btfsc	printf@flag& (0+255),7,b
  4469  0002E6  D019               	goto	l3117
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;doprnt.c: 1253: {
  4473                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4474  0002E8  C0A2  FFD9         	movff	printf@ap,fsr2l
  4475  0002EC  C0A3  FFDA         	movff	printf@ap+1,fsr2h
  4476  0002F0  CFDE F0A6          	movff	postinc2,printf@val
  4477  0002F4  CFDD F0A7          	movff	postdec2,printf@val+1
  4478                           
  4479                           ; BSR set to: 0
  4480  0002F8  0E02               	movlw	2
  4481  0002FA  0100               	movlb	0	; () banked
  4482  0002FC  27A2               	addwf	printf@ap& (0+255),f,b
  4483  0002FE  0E00               	movlw	0
  4484  000300  23A3               	addwfc	(printf@ap+1)& (0+255),f,b
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;doprnt.c: 1261: if((int)val < 0) {
  4488  000302  0100               	movlb	0	; () banked
  4489  000304  AFA7               	btfss	(printf@val+1)& (0+255),7,b
  4490  000306  D059               	goto	l3151
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;doprnt.c: 1262: flag |= 0x03;
  4494  000308  0E03               	movlw	3
  4495  00030A  0100               	movlb	0	; () banked
  4496  00030C  13A8               	iorwf	printf@flag& (0+255),f,b
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;doprnt.c: 1263: val = -val;
  4500  00030E  0100               	movlb	0	; () banked
  4501  000310  6DA6               	negf	printf@val& (0+255),b
  4502  000312  1FA7               	comf	(printf@val+1)& (0+255),f,b
  4503  000314  B0D8               	btfsc	status,0,c
  4504  000316  2BA7               	incf	(printf@val+1)& (0+255),f,b
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;doprnt.c: 1264: }
  4508                           ;doprnt.c: 1266: }
  4509  000318  D050               	goto	l3151
  4510  00031A                     l3117:
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;doprnt.c: 1268: else
  4514                           ;doprnt.c: 1273: {
  4515                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4516  00031A  C0A2  FFD9         	movff	printf@ap,fsr2l
  4517  00031E  C0A3  FFDA         	movff	printf@ap+1,fsr2h
  4518  000322  CFDE F0A6          	movff	postinc2,printf@val
  4519  000326  CFDD F0A7          	movff	postdec2,printf@val+1
  4520                           
  4521                           ; BSR set to: 0
  4522  00032A  0E02               	movlw	2
  4523  00032C  0100               	movlb	0	; () banked
  4524  00032E  27A2               	addwf	printf@ap& (0+255),f,b
  4525  000330  0E00               	movlw	0
  4526  000332  23A3               	addwfc	(printf@ap+1)& (0+255),f,b
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;doprnt.c: 1287: }
  4530                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4531  000334  D042               	goto	l3151
  4532  000336                     l3121:
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4536  000336  0E01               	movlw	1
  4537  000338  0100               	movlb	0	; () banked
  4538  00033A  6FAB               	movwf	printf@c& (0+255),b
  4539  00033C                     l3123:
  4540                           
  4541                           ; BSR set to: 0
  4542  00033C  0E05               	movlw	5
  4543  00033E  0100               	movlb	0	; () banked
  4544  000340  19AB               	xorwf	printf@c& (0+255),w,b
  4545  000342  B4D8               	btfsc	status,2,c
  4546  000344  D043               	goto	l3153
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;doprnt.c: 1306: if(val < dpowers[c])
  4550                           
  4551                           ; BSR set to: 0
  4552                           
  4553                           ; BSR set to: 0
  4554  000346  0100               	movlb	0	; () banked
  4555  000348  51AB               	movf	printf@c& (0+255),w,b
  4556  00034A  0D02               	mullw	2
  4557  00034C  0E9B               	movlw	low _dpowers
  4558  00034E  24F3               	addwf	prodl,w,c
  4559  000350  6EF6               	movwf	tblptrl,c
  4560  000352  0EFE               	movlw	high _dpowers
  4561  000354  20F4               	addwfc	prodh,w,c
  4562  000356  6EF7               	movwf	tblptrh,c
  4563  000358                     	if	1	;There are 3 active tblptr bytes
  4564  000358  6AF8               	clrf	tblptru,c
  4565  00035A  0E00               	movlw	low (__mediumconst shr (0+16))
  4566  00035C  22F8               	addwfc	tblptru,f,c
  4567  00035E                     	endif
  4568  00035E  0009               	tblrd		*+
  4569  000360  50F5               	movf	tablat,w,c
  4570  000362  0100               	movlb	0	; () banked
  4571  000364  5DA6               	subwf	printf@val& (0+255),w,b
  4572  000366  0009               	tblrd		*+
  4573  000368  50F5               	movf	tablat,w,c
  4574  00036A  0100               	movlb	0	; () banked
  4575  00036C  59A7               	subwfb	(printf@val+1)& (0+255),w,b
  4576  00036E  A0D8               	btfss	status,0,c
  4577  000370  D02D               	goto	l3153
  4578                           
  4579                           ; BSR set to: 0
  4580                           
  4581                           ; BSR set to: 0
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;doprnt.c: 1307: break;
  4585  000372  0100               	movlb	0	; () banked
  4586  000374  2BAB               	incf	printf@c& (0+255),f,b
  4587  000376  D7E2               	goto	l3123
  4588  000378                     l3135:
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4592  000378  0E01               	movlw	1
  4593  00037A  0100               	movlb	0	; () banked
  4594  00037C  6FAB               	movwf	printf@c& (0+255),b
  4595  00037E                     l3137:
  4596                           
  4597                           ; BSR set to: 0
  4598  00037E  0E04               	movlw	4
  4599  000380  0100               	movlb	0	; () banked
  4600  000382  19AB               	xorwf	printf@c& (0+255),w,b
  4601  000384  B4D8               	btfsc	status,2,c
  4602  000386  D022               	goto	l3153
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4606                           
  4607                           ; BSR set to: 0
  4608                           
  4609                           ; BSR set to: 0
  4610  000388  0100               	movlb	0	; () banked
  4611  00038A  51AB               	movf	printf@c& (0+255),w,b
  4612  00038C  0D02               	mullw	2
  4613  00038E  0EA5               	movlw	low _hexpowers
  4614  000390  24F3               	addwf	prodl,w,c
  4615  000392  6EF6               	movwf	tblptrl,c
  4616  000394  0EFE               	movlw	high _hexpowers
  4617  000396  20F4               	addwfc	prodh,w,c
  4618  000398  6EF7               	movwf	tblptrh,c
  4619  00039A                     	if	1	;There are 3 active tblptr bytes
  4620  00039A  6AF8               	clrf	tblptru,c
  4621  00039C  0E00               	movlw	low (__mediumconst shr (0+16))
  4622  00039E  22F8               	addwfc	tblptru,f,c
  4623  0003A0                     	endif
  4624  0003A0  0009               	tblrd		*+
  4625  0003A2  50F5               	movf	tablat,w,c
  4626  0003A4  0100               	movlb	0	; () banked
  4627  0003A6  5DA6               	subwf	printf@val& (0+255),w,b
  4628  0003A8  0009               	tblrd		*+
  4629  0003AA  50F5               	movf	tablat,w,c
  4630  0003AC  0100               	movlb	0	; () banked
  4631  0003AE  59A7               	subwfb	(printf@val+1)& (0+255),w,b
  4632  0003B0  A0D8               	btfss	status,0,c
  4633  0003B2  D00C               	goto	l3153
  4634                           
  4635                           ; BSR set to: 0
  4636                           
  4637                           ; BSR set to: 0
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;doprnt.c: 1318: break;
  4641  0003B4  0100               	movlb	0	; () banked
  4642  0003B6  2BAB               	incf	printf@c& (0+255),f,b
  4643  0003B8  D7E2               	goto	l3137
  4644  0003BA                     l3151:
  4645                           
  4646                           ; BSR set to: 0
  4647  0003BA  0100               	movlb	0	; () banked
  4648  0003BC  51A8               	movf	printf@flag& (0+255),w,b
  4649  0003BE  0B80               	andlw	128
  4650                           
  4651                           ; Switch size 1, requested type "space"
  4652                           ; Number of cases is 2, Range of values is 0 to 128
  4653                           ; switch strategies available:
  4654                           ; Name         Instructions Cycles
  4655                           ; simple_byte            7     4 (average)
  4656                           ;	Chosen strategy is simple_byte
  4657  0003C0  0A00               	xorlw	0	; case 0
  4658  0003C2  B4D8               	btfsc	status,2,c
  4659  0003C4  D7B8               	goto	l3121
  4660  0003C6  0A80               	xorlw	128	; case 128
  4661  0003C8  B4D8               	btfsc	status,2,c
  4662  0003CA  D7D6               	goto	l3135
  4663  0003CC                     l3153:
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4667  0003CC  0100               	movlb	0	; () banked
  4668  0003CE  51A9               	movf	printf@width& (0+255),w,b
  4669  0003D0  0100               	movlb	0	; () banked
  4670  0003D2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  4671  0003D4  B4D8               	btfsc	status,2,c
  4672  0003D6  D00B               	goto	l3159
  4673                           
  4674                           ; BSR set to: 0
  4675  0003D8  C0A8  F09A         	movff	printf@flag,??_printf
  4676  0003DC  0E03               	movlw	3
  4677  0003DE  0100               	movlb	0	; () banked
  4678  0003E0  179A               	andwf	??_printf& (0+255),f,b
  4679  0003E2  B4D8               	btfsc	status,2,c
  4680  0003E4  D004               	goto	l3159
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;doprnt.c: 1346: width--;
  4684  0003E6  0100               	movlb	0	; () banked
  4685  0003E8  07A9               	decf	printf@width& (0+255),f,b
  4686  0003EA  A0D8               	btfss	status,0,c
  4687  0003EC  07AA               	decf	(printf@width+1)& (0+255),f,b
  4688  0003EE                     l3159:
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;doprnt.c: 1381: if(width > c)
  4692  0003EE  0E80               	movlw	128
  4693  0003F0  0100               	movlb	0	; () banked
  4694  0003F2  BFAB               	btfsc	printf@c& (0+255),7,b
  4695  0003F4  0E7F               	movlw	127
  4696  0003F6  0100               	movlb	0	; () banked
  4697  0003F8  6F9A               	movwf	??_printf& (0+255),b
  4698  0003FA  0100               	movlb	0	; () banked
  4699  0003FC  51A9               	movf	printf@width& (0+255),w,b
  4700  0003FE  0100               	movlb	0	; () banked
  4701  000400  5DAB               	subwf	printf@c& (0+255),w,b
  4702  000402  0100               	movlb	0	; () banked
  4703  000404  51AA               	movf	(printf@width+1)& (0+255),w,b
  4704  000406  0A80               	xorlw	128
  4705  000408  0100               	movlb	0	; () banked
  4706  00040A  599A               	subwfb	??_printf& (0+255),w,b
  4707  00040C  B0D8               	btfsc	status,0,c
  4708  00040E  D00B               	goto	l3163
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;doprnt.c: 1382: width -= c;
  4712  000410  0100               	movlb	0	; () banked
  4713  000412  51AB               	movf	printf@c& (0+255),w,b
  4714  000414  0100               	movlb	0	; () banked
  4715  000416  5FA9               	subwf	printf@width& (0+255),f,b
  4716  000418  0E00               	movlw	0
  4717  00041A  0100               	movlb	0	; () banked
  4718  00041C  BFAB               	btfsc	printf@c& (0+255),7,b
  4719  00041E  0EFF               	movlw	255
  4720  000420  0100               	movlb	0	; () banked
  4721  000422  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  4722  000424  D005               	goto	l3165
  4723  000426                     l3163:
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;doprnt.c: 1383: else
  4727                           ;doprnt.c: 1384: width = 0;
  4728  000426  0E00               	movlw	0
  4729  000428  0100               	movlb	0	; () banked
  4730  00042A  6FAA               	movwf	(printf@width+1)& (0+255),b
  4731  00042C  0E00               	movlw	0
  4732  00042E  6FA9               	movwf	printf@width& (0+255),b
  4733  000430                     l3165:
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;doprnt.c: 1387: if(flag & 0x04) {
  4737  000430  0100               	movlb	0	; () banked
  4738  000432  A5A8               	btfss	printf@flag& (0+255),2,b
  4739  000434  D018               	goto	l3177
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;doprnt.c: 1392: if(flag & 0x03)
  4743  000436  C0A8  F09A         	movff	printf@flag,??_printf
  4744  00043A  0E03               	movlw	3
  4745  00043C  0100               	movlb	0	; () banked
  4746  00043E  179A               	andwf	??_printf& (0+255),f,b
  4747  000440  B4D8               	btfsc	status,2,c
  4748  000442  D003               	goto	l3171
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;doprnt.c: 1393: (putch('-') );
  4752  000444  0E2D               	movlw	45
  4753  000446  EC47  F00A         	call	_putch
  4754  00044A                     l3171:
  4755                           
  4756                           ;doprnt.c: 1415: if(width)
  4757  00044A  0100               	movlb	0	; () banked
  4758  00044C  51A9               	movf	printf@width& (0+255),w,b
  4759  00044E  0100               	movlb	0	; () banked
  4760  000450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  4761  000452  B4D8               	btfsc	status,2,c
  4762  000454  D025               	goto	l3187
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;doprnt.c: 1417: (putch('0') );
  4766                           
  4767                           ; BSR set to: 0
  4768                           
  4769                           ;doprnt.c: 1416: do
  4770  000456  0E30               	movlw	48
  4771  000458  EC47  F00A         	call	_putch
  4772                           
  4773                           ;doprnt.c: 1418: while(--width);
  4774  00045C  0100               	movlb	0	; () banked
  4775  00045E  07A9               	decf	printf@width& (0+255),f,b
  4776  000460  A0D8               	btfss	status,0,c
  4777  000462  07AA               	decf	(printf@width+1)& (0+255),f,b
  4778  000464  D7F2               	goto	l3171
  4779  000466                     l3177:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;doprnt.c: 1422: {
  4783                           ;doprnt.c: 1424: if(width
  4784                           ;doprnt.c: 1428: )
  4785  000466  0100               	movlb	0	; () banked
  4786  000468  51A9               	movf	printf@width& (0+255),w,b
  4787  00046A  0100               	movlb	0	; () banked
  4788  00046C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  4789  00046E  B4D8               	btfsc	status,2,c
  4790  000470  D00D               	goto	l3183
  4791  000472                     l3179:
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;doprnt.c: 1430: (putch(' ') );
  4795  000472  0E20               	movlw	32
  4796  000474  EC47  F00A         	call	_putch
  4797                           
  4798                           ;doprnt.c: 1431: while(--width);
  4799  000478  0100               	movlb	0	; () banked
  4800  00047A  07A9               	decf	printf@width& (0+255),f,b
  4801  00047C  A0D8               	btfss	status,0,c
  4802  00047E  07AA               	decf	(printf@width+1)& (0+255),f,b
  4803  000480  0100               	movlb	0	; () banked
  4804  000482  51A9               	movf	printf@width& (0+255),w,b
  4805  000484  0100               	movlb	0	; () banked
  4806  000486  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  4807  000488  A4D8               	btfss	status,2,c
  4808  00048A  D7F3               	goto	l3179
  4809  00048C                     l3183:
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;doprnt.c: 1438: if(flag & 0x03)
  4813  00048C  C0A8  F09A         	movff	printf@flag,??_printf
  4814  000490  0E03               	movlw	3
  4815  000492  0100               	movlb	0	; () banked
  4816  000494  179A               	andwf	??_printf& (0+255),f,b
  4817  000496  B4D8               	btfsc	status,2,c
  4818  000498  D003               	goto	l3187
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;doprnt.c: 1439: (putch('-') );
  4822  00049A  0E2D               	movlw	45
  4823  00049C  EC47  F00A         	call	_putch
  4824  0004A0                     l3187:
  4825                           
  4826                           ;doprnt.c: 1469: }
  4827                           ;doprnt.c: 1472: prec = c;
  4828  0004A0  C0AB  F09F         	movff	printf@c,printf@prec
  4829                           
  4830                           ;doprnt.c: 1474: while(prec--) {
  4831  0004A4  D062               	goto	l3201
  4832  0004A6                     l3189:
  4833                           
  4834                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4835  0004A6  0100               	movlb	0	; () banked
  4836  0004A8  519F               	movf	printf@prec& (0+255),w,b
  4837  0004AA  0D02               	mullw	2
  4838  0004AC  0E9B               	movlw	low _dpowers
  4839  0004AE  24F3               	addwf	prodl,w,c
  4840  0004B0  6EF6               	movwf	tblptrl,c
  4841  0004B2  0EFE               	movlw	high _dpowers
  4842  0004B4  20F4               	addwfc	prodh,w,c
  4843  0004B6  6EF7               	movwf	tblptrh,c
  4844  0004B8                     	if	1	;There are 3 active tblptr bytes
  4845  0004B8  6AF8               	clrf	tblptru,c
  4846  0004BA  0E00               	movlw	low (__mediumconst shr (0+16))
  4847  0004BC  22F8               	addwfc	tblptru,f,c
  4848  0004BE                     	endif
  4849  0004BE  0009               	tblrd		*+
  4850  0004C0  CFF5 F027          	movff	tablat,___lwdiv@divisor
  4851  0004C4  000A               	tblrd		*-
  4852  0004C6  CFF5 F028          	movff	tablat,___lwdiv@divisor+1
  4853  0004CA  C0A6  F025         	movff	printf@val,___lwdiv@dividend
  4854  0004CE  C0A7  F026         	movff	printf@val+1,___lwdiv@dividend+1
  4855  0004D2  EC21  F008         	call	___lwdiv	;wreg free
  4856  0004D6  C025  F089         	movff	?___lwdiv,___lwmod@dividend
  4857  0004DA  C026  F08A         	movff	?___lwdiv+1,___lwmod@dividend+1
  4858  0004DE  0E00               	movlw	0
  4859  0004E0  0100               	movlb	0	; () banked
  4860  0004E2  6F8C               	movwf	(___lwmod@divisor+1)& (0+255),b
  4861  0004E4  0E0A               	movlw	10
  4862  0004E6  6F8B               	movwf	___lwmod@divisor& (0+255),b
  4863  0004E8  ECC6  F007         	call	___lwmod	;wreg free
  4864  0004EC  0100               	movlb	0	; () banked
  4865  0004EE  5189               	movf	?___lwmod& (0+255),w,b
  4866  0004F0  0F30               	addlw	48
  4867  0004F2  0100               	movlb	0	; () banked
  4868  0004F4  6FAB               	movwf	printf@c& (0+255),b
  4869                           
  4870                           ;doprnt.c: 1491: break;
  4871  0004F6  D035               	goto	l3199
  4872  0004F8                     l3191:
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;doprnt.c: 1499: {
  4876                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4877  0004F8  C0A6  F025         	movff	printf@val,___lwdiv@dividend
  4878  0004FC  C0A7  F026         	movff	printf@val+1,___lwdiv@dividend+1
  4879  000500  0100               	movlb	0	; () banked
  4880  000502  519F               	movf	printf@prec& (0+255),w,b
  4881  000504  0D02               	mullw	2
  4882  000506  0EA5               	movlw	low _hexpowers
  4883  000508  24F3               	addwf	prodl,w,c
  4884  00050A  6EF6               	movwf	tblptrl,c
  4885  00050C  0EFE               	movlw	high _hexpowers
  4886  00050E  20F4               	addwfc	prodh,w,c
  4887  000510  6EF7               	movwf	tblptrh,c
  4888  000512                     	if	1	;There are 3 active tblptr bytes
  4889  000512  6AF8               	clrf	tblptru,c
  4890  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  4891  000516  22F8               	addwfc	tblptru,f,c
  4892  000518                     	endif
  4893  000518  0009               	tblrd		*+
  4894  00051A  CFF5 F027          	movff	tablat,___lwdiv@divisor
  4895  00051E  000A               	tblrd		*-
  4896  000520  CFF5 F028          	movff	tablat,___lwdiv@divisor+1
  4897  000524  EC21  F008         	call	___lwdiv	;wreg free
  4898  000528  5025               	movf	?___lwdiv,w,c
  4899  00052A  0B0F               	andlw	15
  4900  00052C  0100               	movlb	0	; () banked
  4901  00052E  6F9E               	movwf	printf@idx& (0+255),b
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4905  000530  0100               	movlb	0	; () banked
  4906  000532  519E               	movf	printf@idx& (0+255),w,b
  4907  000534  0D01               	mullw	1
  4908  000536  0E55               	movlw	low STR_22
  4909  000538  24F3               	addwf	prodl,w,c
  4910  00053A  6EF6               	movwf	tblptrl,c
  4911  00053C  0EFF               	movlw	high STR_22
  4912  00053E  20F4               	addwfc	prodh,w,c
  4913  000540  6EF7               	movwf	tblptrh,c
  4914  000542                     	if	1	;There are 3 active tblptr bytes
  4915  000542  6AF8               	clrf	tblptru,c
  4916  000544  0E00               	movlw	low (__mediumconst shr (0+16))
  4917  000546  22F8               	addwfc	tblptru,f,c
  4918  000548                     	endif
  4919  000548  0008               	tblrd		*
  4920  00054A  CFF5 F0AB          	movff	tablat,printf@c
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;doprnt.c: 1523: }
  4924                           
  4925                           ;doprnt.c: 1508: }
  4926                           ;doprnt.c: 1510: break;
  4927  00054E  D009               	goto	l3199
  4928  000550                     l3197:
  4929  000550  0100               	movlb	0	; () banked
  4930  000552  51A8               	movf	printf@flag& (0+255),w,b
  4931  000554  0B80               	andlw	128
  4932                           
  4933                           ; Switch size 1, requested type "space"
  4934                           ; Number of cases is 2, Range of values is 0 to 128
  4935                           ; switch strategies available:
  4936                           ; Name         Instructions Cycles
  4937                           ; simple_byte            7     4 (average)
  4938                           ;	Chosen strategy is simple_byte
  4939  000556  0A00               	xorlw	0	; case 0
  4940  000558  B4D8               	btfsc	status,2,c
  4941  00055A  D7A5               	goto	l3189
  4942  00055C  0A80               	xorlw	128	; case 128
  4943  00055E  B4D8               	btfsc	status,2,c
  4944  000560  D7CB               	goto	l3191
  4945  000562                     l3199:
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;doprnt.c: 1524: (putch(c) );
  4949  000562  0100               	movlb	0	; () banked
  4950  000564  51AB               	movf	printf@c& (0+255),w,b
  4951  000566  EC47  F00A         	call	_putch
  4952  00056A                     l3201:
  4953  00056A  0100               	movlb	0	; () banked
  4954  00056C  079F               	decf	printf@prec& (0+255),f,b
  4955  00056E  0100               	movlb	0	; () banked
  4956  000570  299F               	incf	printf@prec& (0+255),w,b
  4957  000572  A4D8               	btfss	status,2,c
  4958  000574  D7ED               	goto	l3197
  4959  000576                     l3203:
  4960  000576  C08E  FFF6         	movff	printf@f,tblptrl
  4961  00057A  C08F  FFF7         	movff	printf@f+1,tblptrh
  4962  00057E  0100               	movlb	0	; () banked
  4963  000580  4B8E               	infsnz	printf@f& (0+255),f,b
  4964  000582  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4965  000584                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4966  000584  6AF8               	clrf	tblptru,c
  4967  000586                     	endif
  4968  000586                     	if	0	;tblptru may be non-zero
  4969  000586                     	endif
  4970  000586  0008               	tblrd		*
  4971  000588  CFF5 F0AB          	movff	tablat,printf@c
  4972  00058C  0100               	movlb	0	; () banked
  4973  00058E  51AB               	movf	printf@c& (0+255),w,b
  4974  000590  B4D8               	btfsc	status,2,c
  4975  000592  0012               	return	
  4976  000594  D588               	goto	l3047
  4977  000596                     __end_of_printf:
  4978                           	opt stack 0
  4979                           tblptru	equ	0xFF8
  4980                           tblptrh	equ	0xFF7
  4981                           tblptrl	equ	0xFF6
  4982                           tablat	equ	0xFF5
  4983                           prodh	equ	0xFF4
  4984                           prodl	equ	0xFF3
  4985                           intcon	equ	0xFF2
  4986                           intcon2	equ	0xFF1
  4987                           postinc0	equ	0xFEE
  4988                           wreg	equ	0xFE8
  4989                           indf1	equ	0xFE7
  4990                           postdec1	equ	0xFE5
  4991                           fsr1h	equ	0xFE2
  4992                           fsr1l	equ	0xFE1
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function _putch *****************
  5001 ;; Defined at:
  5002 ;;		line 170 in file "mcc_generated_files/eusart1.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  txData          1    wreg     unsigned char 
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;  txData          1   37[COMRAM] unsigned char 
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  1    wreg      void 
  5009 ;; Registers used:
  5010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;Total ram usage:        1 bytes
  5021 ;; Hardware stack levels used:    1
  5022 ;; Hardware stack levels required when called:    5
  5023 ;; This function calls:
  5024 ;;		_EUSART1_Write
  5025 ;; This function is called by:
  5026 ;;		_printf
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           	psect	text29
  5031  00148E                     __ptext29:
  5032                           	opt stack 0
  5033  00148E                     _putch:
  5034                           	opt stack 24
  5035                           
  5036                           ;incstack = 0
  5037                           ;putch@txData stored from wreg
  5038  00148E  6E26               	movwf	putch@txData,c
  5039                           
  5040                           ;eusart1.c: 172: EUSART1_Write(txData);
  5041  001490  5026               	movf	putch@txData,w,c
  5042  001492  EC8C  F008         	call	_EUSART1_Write
  5043  001496  0012               	return		;funcret
  5044  001498                     __end_of_putch:
  5045                           	opt stack 0
  5046                           tblptru	equ	0xFF8
  5047                           tblptrh	equ	0xFF7
  5048                           tblptrl	equ	0xFF6
  5049                           tablat	equ	0xFF5
  5050                           prodh	equ	0xFF4
  5051                           prodl	equ	0xFF3
  5052                           intcon	equ	0xFF2
  5053                           intcon2	equ	0xFF1
  5054                           postinc0	equ	0xFEE
  5055                           wreg	equ	0xFE8
  5056                           indf1	equ	0xFE7
  5057                           postdec1	equ	0xFE5
  5058                           fsr1h	equ	0xFE2
  5059                           fsr1l	equ	0xFE1
  5060                           indf2	equ	0xFDF
  5061                           postinc2	equ	0xFDE
  5062                           postdec2	equ	0xFDD
  5063                           fsr2h	equ	0xFDA
  5064                           fsr2l	equ	0xFD9
  5065                           status	equ	0xFD8
  5066                           
  5067 ;; *************** function _EUSART1_Write *****************
  5068 ;; Defined at:
  5069 ;;		line 142 in file "mcc_generated_files/eusart1.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;  txData          1    wreg     unsigned char 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  txData          1   36[COMRAM] unsigned char 
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  1    wreg      void 
  5076 ;; Registers used:
  5077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;Total ram usage:        1 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    4
  5090 ;; This function calls:
  5091 ;;		Nothing
  5092 ;; This function is called by:
  5093 ;;		_putch
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           	psect	text30
  5098  001118                     __ptext30:
  5099                           	opt stack 0
  5100  001118                     _EUSART1_Write:
  5101                           	opt stack 24
  5102                           
  5103                           ;incstack = 0
  5104                           ;EUSART1_Write@txData stored from wreg
  5105  001118  6E25               	movwf	EUSART1_Write@txData,c
  5106  00111A                     l2145:
  5107  00111A  503A               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  5108  00111C  B4D8               	btfsc	status,2,c
  5109  00111E  D7FD               	goto	l2145
  5110                           
  5111                           ;eusart1.c: 146: }
  5112                           ;eusart1.c: 148: if(0 == PIE1bits.TX1IE)
  5113  001120  B89D               	btfsc	3997,4,c	;volatile
  5114  001122  D003               	goto	l110
  5115                           
  5116                           ;eusart1.c: 149: {
  5117                           ;eusart1.c: 150: TXREG1 = txData;
  5118  001124  C025  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  5119                           
  5120                           ;eusart1.c: 151: }
  5121  001128  D012               	goto	l2159
  5122  00112A                     l110:
  5123                           
  5124                           ;eusart1.c: 152: else
  5125                           ;eusart1.c: 153: {
  5126                           ;eusart1.c: 154: PIE1bits.TX1IE = 0;
  5127  00112A  989D               	bcf	3997,4,c	;volatile
  5128                           
  5129                           ;eusart1.c: 155: eusart1TxBuffer[eusart1TxHead++] = txData;
  5130  00112C  5031               	movf	_eusart1TxHead,w,c
  5131  00112E  0D01               	mullw	1
  5132  001130  0E00               	movlw	low _eusart1TxBuffer
  5133  001132  24F3               	addwf	prodl,w,c
  5134  001134  6ED9               	movwf	fsr2l,c
  5135  001136  0E01               	movlw	high _eusart1TxBuffer
  5136  001138  20F4               	addwfc	prodh,w,c
  5137  00113A  6EDA               	movwf	fsr2h,c
  5138  00113C  C025  FFDF         	movff	EUSART1_Write@txData,indf2
  5139  001140  2A31               	incf	_eusart1TxHead,f,c
  5140                           
  5141                           ;eusart1.c: 156: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  5142  001142  0E7F               	movlw	127
  5143  001144  6431               	cpfsgt	_eusart1TxHead,c
  5144  001146  D002               	goto	l2157
  5145                           
  5146                           ;eusart1.c: 157: {
  5147                           ;eusart1.c: 158: eusart1TxHead = 0;
  5148  001148  0E00               	movlw	0
  5149  00114A  6E31               	movwf	_eusart1TxHead,c
  5150  00114C                     l2157:
  5151                           
  5152                           ;eusart1.c: 159: }
  5153                           ;eusart1.c: 160: eusart1TxBufferRemaining--;
  5154  00114C  063A               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  5155  00114E                     l2159:
  5156                           
  5157                           ;eusart1.c: 161: }
  5158                           ;eusart1.c: 162: PIE1bits.TX1IE = 1;
  5159  00114E  889D               	bsf	3997,4,c	;volatile
  5160  001150  0012               	return		;funcret
  5161  001152                     __end_of_EUSART1_Write:
  5162                           	opt stack 0
  5163                           tblptru	equ	0xFF8
  5164                           tblptrh	equ	0xFF7
  5165                           tblptrl	equ	0xFF6
  5166                           tablat	equ	0xFF5
  5167                           prodh	equ	0xFF4
  5168                           prodl	equ	0xFF3
  5169                           intcon	equ	0xFF2
  5170                           intcon2	equ	0xFF1
  5171                           postinc0	equ	0xFEE
  5172                           wreg	equ	0xFE8
  5173                           indf1	equ	0xFE7
  5174                           postdec1	equ	0xFE5
  5175                           fsr1h	equ	0xFE2
  5176                           fsr1l	equ	0xFE1
  5177                           indf2	equ	0xFDF
  5178                           postinc2	equ	0xFDE
  5179                           postdec2	equ	0xFDD
  5180                           fsr2h	equ	0xFDA
  5181                           fsr2l	equ	0xFD9
  5182                           status	equ	0xFD8
  5183                           
  5184 ;; *************** function _isdigit *****************
  5185 ;; Defined at:
  5186 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isdigit.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;  c               1    wreg     unsigned char 
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;  c               1   38[COMRAM] unsigned char 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;		None               void
  5193 ;; Registers used:
  5194 ;;		wreg, status,2, status,0
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5201 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5202 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5203 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5204 ;;Total ram usage:        3 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    4
  5207 ;; This function calls:
  5208 ;;		Nothing
  5209 ;; This function is called by:
  5210 ;;		_printf
  5211 ;;		_strtol
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           	psect	text31
  5216  0013F2                     __ptext31:
  5217                           	opt stack 0
  5218  0013F2                     _isdigit:
  5219                           	opt stack 25
  5220                           
  5221                           ;incstack = 0
  5222                           ;isdigit@c stored from wreg
  5223  0013F2  6E27               	movwf	isdigit@c,c
  5224  0013F4  0E00               	movlw	0
  5225  0013F6  6E26               	movwf	_isdigit$1236,c
  5226  0013F8  0E3A               	movlw	58
  5227  0013FA  6027               	cpfslt	isdigit@c,c
  5228  0013FC  D005               	goto	l2171
  5229  0013FE  0E2F               	movlw	47
  5230  001400  6427               	cpfsgt	isdigit@c,c
  5231  001402  D002               	goto	l2171
  5232  001404  0E01               	movlw	1
  5233  001406  6E26               	movwf	_isdigit$1236,c
  5234  001408                     l2171:
  5235  001408  C026  F025         	movff	_isdigit$1236,??_isdigit
  5236  00140C  3025               	rrcf	??_isdigit,w,c
  5237  00140E  0012               	return	
  5238  001410                     __end_of_isdigit:
  5239                           	opt stack 0
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           intcon	equ	0xFF2
  5247                           intcon2	equ	0xFF1
  5248                           postinc0	equ	0xFEE
  5249                           wreg	equ	0xFE8
  5250                           indf1	equ	0xFE7
  5251                           postdec1	equ	0xFE5
  5252                           fsr1h	equ	0xFE2
  5253                           fsr1l	equ	0xFE1
  5254                           indf2	equ	0xFDF
  5255                           postinc2	equ	0xFDE
  5256                           postdec2	equ	0xFDD
  5257                           fsr2h	equ	0xFDA
  5258                           fsr2l	equ	0xFD9
  5259                           status	equ	0xFD8
  5260                           
  5261 ;; *************** function ___wmul *****************
  5262 ;; Defined at:
  5263 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;  multiplier      2   36[COMRAM] unsigned int 
  5266 ;;  multiplicand    2   38[COMRAM] unsigned int 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  product         2   40[COMRAM] unsigned int 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  2   36[COMRAM] unsigned int 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0, prodl, prodh
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;Total ram usage:        6 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    4
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_printf
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text32
  5293  001350                     __ptext32:
  5294                           	opt stack 0
  5295  001350                     ___wmul:
  5296                           	opt stack 25
  5297                           
  5298                           ;incstack = 0
  5299  001350  5025               	movf	___wmul@multiplier,w,c
  5300  001352  0227               	mulwf	___wmul@multiplicand,c
  5301  001354  CFF3 F029          	movff	prodl,___wmul@product
  5302  001358  CFF4 F02A          	movff	prodh,___wmul@product+1
  5303  00135C  5025               	movf	___wmul@multiplier,w,c
  5304  00135E  0228               	mulwf	___wmul@multiplicand+1,c
  5305  001360  50F3               	movf	prodl,w,c
  5306  001362  262A               	addwf	___wmul@product+1,f,c
  5307  001364  5026               	movf	___wmul@multiplier+1,w,c
  5308  001366  0227               	mulwf	___wmul@multiplicand,c
  5309  001368  50F3               	movf	prodl,w,c
  5310  00136A  262A               	addwf	___wmul@product+1,f,c
  5311  00136C  C029  F025         	movff	___wmul@product,?___wmul
  5312  001370  C02A  F026         	movff	___wmul@product+1,?___wmul+1
  5313  001374  0012               	return	
  5314  001376                     __end_of___wmul:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           prodh	equ	0xFF4
  5321                           prodl	equ	0xFF3
  5322                           intcon	equ	0xFF2
  5323                           intcon2	equ	0xFF1
  5324                           postinc0	equ	0xFEE
  5325                           wreg	equ	0xFE8
  5326                           indf1	equ	0xFE7
  5327                           postdec1	equ	0xFE5
  5328                           fsr1h	equ	0xFE2
  5329                           fsr1l	equ	0xFE1
  5330                           indf2	equ	0xFDF
  5331                           postinc2	equ	0xFDE
  5332                           postdec2	equ	0xFDD
  5333                           fsr2h	equ	0xFDA
  5334                           fsr2l	equ	0xFD9
  5335                           status	equ	0xFD8
  5336                           
  5337 ;; *************** function ___lwmod *****************
  5338 ;; Defined at:
  5339 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwmod.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;  dividend        2    0[BANK0 ] unsigned int 
  5342 ;;  divisor         2    2[BANK0 ] unsigned int 
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;  counter         1    4[BANK0 ] unsigned char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  2    0[BANK0 ] unsigned int 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5354 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;Total ram usage:        5 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    4
  5361 ;; This function calls:
  5362 ;;		Nothing
  5363 ;; This function is called by:
  5364 ;;		_printf
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text33
  5369  000F8C                     __ptext33:
  5370                           	opt stack 0
  5371  000F8C                     ___lwmod:
  5372                           	opt stack 25
  5373                           
  5374                           ;incstack = 0
  5375  000F8C  0100               	movlb	0	; () banked
  5376  000F8E  518B               	movf	___lwmod@divisor& (0+255),w,b
  5377  000F90  0100               	movlb	0	; () banked
  5378  000F92  118C               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5379  000F94  B4D8               	btfsc	status,2,c
  5380  000F96  D026               	goto	l871
  5381                           
  5382                           ; BSR set to: 0
  5383  000F98  0E01               	movlw	1
  5384  000F9A  0100               	movlb	0	; () banked
  5385  000F9C  6F8D               	movwf	___lwmod@counter& (0+255),b
  5386  000F9E  D006               	goto	l3035
  5387  000FA0                     l3033:
  5388                           
  5389                           ; BSR set to: 0
  5390  000FA0  0100               	movlb	0	; () banked
  5391  000FA2  90D8               	bcf	status,0,c
  5392  000FA4  378B               	rlcf	___lwmod@divisor& (0+255),f,b
  5393  000FA6  378C               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5394  000FA8  0100               	movlb	0	; () banked
  5395  000FAA  2B8D               	incf	___lwmod@counter& (0+255),f,b
  5396  000FAC                     l3035:
  5397                           
  5398                           ; BSR set to: 0
  5399  000FAC  0100               	movlb	0	; () banked
  5400  000FAE  AF8C               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5401  000FB0  D7F7               	goto	l3033
  5402  000FB2                     l3037:
  5403                           
  5404                           ; BSR set to: 0
  5405  000FB2  0100               	movlb	0	; () banked
  5406  000FB4  518B               	movf	___lwmod@divisor& (0+255),w,b
  5407  000FB6  0100               	movlb	0	; () banked
  5408  000FB8  5D89               	subwf	___lwmod@dividend& (0+255),w,b
  5409  000FBA  0100               	movlb	0	; () banked
  5410  000FBC  518C               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5411  000FBE  0100               	movlb	0	; () banked
  5412  000FC0  598A               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5413  000FC2  A0D8               	btfss	status,0,c
  5414  000FC4  D008               	goto	l3041
  5415                           
  5416                           ; BSR set to: 0
  5417  000FC6  0100               	movlb	0	; () banked
  5418  000FC8  518B               	movf	___lwmod@divisor& (0+255),w,b
  5419  000FCA  0100               	movlb	0	; () banked
  5420  000FCC  5F89               	subwf	___lwmod@dividend& (0+255),f,b
  5421  000FCE  0100               	movlb	0	; () banked
  5422  000FD0  518C               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5423  000FD2  0100               	movlb	0	; () banked
  5424  000FD4  5B8A               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5425  000FD6                     l3041:
  5426                           
  5427                           ; BSR set to: 0
  5428  000FD6  0100               	movlb	0	; () banked
  5429  000FD8  90D8               	bcf	status,0,c
  5430  000FDA  338C               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5431  000FDC  338B               	rrcf	___lwmod@divisor& (0+255),f,b
  5432                           
  5433                           ; BSR set to: 0
  5434  000FDE  0100               	movlb	0	; () banked
  5435  000FE0  2F8D               	decfsz	___lwmod@counter& (0+255),f,b
  5436  000FE2  D7E7               	goto	l3037
  5437  000FE4                     l871:
  5438                           
  5439                           ; BSR set to: 0
  5440  000FE4  C089  F089         	movff	___lwmod@dividend,?___lwmod
  5441  000FE8  C08A  F08A         	movff	___lwmod@dividend+1,?___lwmod+1
  5442                           
  5443                           ; BSR set to: 0
  5444  000FEC  0012               	return		;funcret
  5445  000FEE                     __end_of___lwmod:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon	equ	0xFF2
  5454                           intcon2	equ	0xFF1
  5455                           postinc0	equ	0xFEE
  5456                           wreg	equ	0xFE8
  5457                           indf1	equ	0xFE7
  5458                           postdec1	equ	0xFE5
  5459                           fsr1h	equ	0xFE2
  5460                           fsr1l	equ	0xFE1
  5461                           indf2	equ	0xFDF
  5462                           postinc2	equ	0xFDE
  5463                           postdec2	equ	0xFDD
  5464                           fsr2h	equ	0xFDA
  5465                           fsr2l	equ	0xFD9
  5466                           status	equ	0xFD8
  5467                           
  5468 ;; *************** function ___lwdiv *****************
  5469 ;; Defined at:
  5470 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  dividend        2   36[COMRAM] unsigned int 
  5473 ;;  divisor         2   38[COMRAM] unsigned int 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;  quotient        2   40[COMRAM] unsigned int 
  5476 ;;  counter         1   42[COMRAM] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  2   36[COMRAM] unsigned int 
  5479 ;; Registers used:
  5480 ;;		wreg, status,2, status,0
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5486 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;Total ram usage:        7 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    4
  5493 ;; This function calls:
  5494 ;;		Nothing
  5495 ;; This function is called by:
  5496 ;;		_printf
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text34
  5501  001042                     __ptext34:
  5502                           	opt stack 0
  5503  001042                     ___lwdiv:
  5504                           	opt stack 25
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;incstack = 0
  5508  001042  0E00               	movlw	0
  5509  001044  6E2A               	movwf	___lwdiv@quotient+1,c
  5510  001046  0E00               	movlw	0
  5511  001048  6E29               	movwf	___lwdiv@quotient,c
  5512  00104A  5027               	movf	___lwdiv@divisor,w,c
  5513  00104C  1028               	iorwf	___lwdiv@divisor+1,w,c
  5514  00104E  B4D8               	btfsc	status,2,c
  5515  001050  D01C               	goto	l861
  5516  001052  0E01               	movlw	1
  5517  001054  6E2B               	movwf	___lwdiv@counter,c
  5518  001056  D004               	goto	l2189
  5519  001058                     l2187:
  5520  001058  90D8               	bcf	status,0,c
  5521  00105A  3627               	rlcf	___lwdiv@divisor,f,c
  5522  00105C  3628               	rlcf	___lwdiv@divisor+1,f,c
  5523  00105E  2A2B               	incf	___lwdiv@counter,f,c
  5524  001060                     l2189:
  5525  001060  AE28               	btfss	___lwdiv@divisor+1,7,c
  5526  001062  D7FA               	goto	l2187
  5527  001064                     l2191:
  5528  001064  90D8               	bcf	status,0,c
  5529  001066  3629               	rlcf	___lwdiv@quotient,f,c
  5530  001068  362A               	rlcf	___lwdiv@quotient+1,f,c
  5531  00106A  5027               	movf	___lwdiv@divisor,w,c
  5532  00106C  5C25               	subwf	___lwdiv@dividend,w,c
  5533  00106E  5028               	movf	___lwdiv@divisor+1,w,c
  5534  001070  5826               	subwfb	___lwdiv@dividend+1,w,c
  5535  001072  A0D8               	btfss	status,0,c
  5536  001074  D005               	goto	l2199
  5537  001076  5027               	movf	___lwdiv@divisor,w,c
  5538  001078  5E25               	subwf	___lwdiv@dividend,f,c
  5539  00107A  5028               	movf	___lwdiv@divisor+1,w,c
  5540  00107C  5A26               	subwfb	___lwdiv@dividend+1,f,c
  5541  00107E  8029               	bsf	___lwdiv@quotient,0,c
  5542  001080                     l2199:
  5543  001080  90D8               	bcf	status,0,c
  5544  001082  3228               	rrcf	___lwdiv@divisor+1,f,c
  5545  001084  3227               	rrcf	___lwdiv@divisor,f,c
  5546  001086  2E2B               	decfsz	___lwdiv@counter,f,c
  5547  001088  D7ED               	goto	l2191
  5548  00108A                     l861:
  5549  00108A  C029  F025         	movff	___lwdiv@quotient,?___lwdiv
  5550  00108E  C02A  F026         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5551  001092  0012               	return		;funcret
  5552  001094                     __end_of___lwdiv:
  5553                           	opt stack 0
  5554                           tblptru	equ	0xFF8
  5555                           tblptrh	equ	0xFF7
  5556                           tblptrl	equ	0xFF6
  5557                           tablat	equ	0xFF5
  5558                           prodh	equ	0xFF4
  5559                           prodl	equ	0xFF3
  5560                           intcon	equ	0xFF2
  5561                           intcon2	equ	0xFF1
  5562                           postinc0	equ	0xFEE
  5563                           wreg	equ	0xFE8
  5564                           indf1	equ	0xFE7
  5565                           postdec1	equ	0xFE5
  5566                           fsr1h	equ	0xFE2
  5567                           fsr1l	equ	0xFE1
  5568                           indf2	equ	0xFDF
  5569                           postinc2	equ	0xFDE
  5570                           postdec2	equ	0xFDD
  5571                           fsr2h	equ	0xFDA
  5572                           fsr2l	equ	0xFD9
  5573                           status	equ	0xFD8
  5574                           
  5575 ;; *************** function ___awmod *****************
  5576 ;; Defined at:
  5577 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  dividend        2    8[BANK0 ] int 
  5580 ;;  divisor         2   10[BANK0 ] int 
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;  sign            1   13[BANK0 ] unsigned char 
  5583 ;;  counter         1   12[BANK0 ] unsigned char 
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  2    8[BANK0 ] int 
  5586 ;; Registers used:
  5587 ;;		wreg, status,2, status,0
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5593 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;Total ram usage:        6 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    4
  5600 ;; This function calls:
  5601 ;;		Nothing
  5602 ;; This function is called by:
  5603 ;;		_InitRadio
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text35
  5608  000B76                     __ptext35:
  5609                           	opt stack 0
  5610  000B76                     ___awmod:
  5611                           	opt stack 25
  5612                           
  5613                           ;incstack = 0
  5614  000B76  0E00               	movlw	0
  5615  000B78  0100               	movlb	0	; () banked
  5616  000B7A  6F96               	movwf	___awmod@sign& (0+255),b
  5617                           
  5618                           ; BSR set to: 0
  5619  000B7C  0100               	movlb	0	; () banked
  5620  000B7E  AF92               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5621  000B80  D008               	goto	l3321
  5622                           
  5623                           ; BSR set to: 0
  5624  000B82  0100               	movlb	0	; () banked
  5625  000B84  6D91               	negf	___awmod@dividend& (0+255),b
  5626  000B86  1F92               	comf	(___awmod@dividend+1)& (0+255),f,b
  5627  000B88  B0D8               	btfsc	status,0,c
  5628  000B8A  2B92               	incf	(___awmod@dividend+1)& (0+255),f,b
  5629                           
  5630                           ; BSR set to: 0
  5631  000B8C  0E01               	movlw	1
  5632  000B8E  0100               	movlb	0	; () banked
  5633  000B90  6F96               	movwf	___awmod@sign& (0+255),b
  5634  000B92                     l3321:
  5635                           
  5636                           ; BSR set to: 0
  5637  000B92  0100               	movlb	0	; () banked
  5638  000B94  AF94               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5639  000B96  D005               	goto	l3325
  5640                           
  5641                           ; BSR set to: 0
  5642  000B98  0100               	movlb	0	; () banked
  5643  000B9A  6D93               	negf	___awmod@divisor& (0+255),b
  5644  000B9C  1F94               	comf	(___awmod@divisor+1)& (0+255),f,b
  5645  000B9E  B0D8               	btfsc	status,0,c
  5646  000BA0  2B94               	incf	(___awmod@divisor+1)& (0+255),f,b
  5647  000BA2                     l3325:
  5648                           
  5649                           ; BSR set to: 0
  5650  000BA2  0100               	movlb	0	; () banked
  5651  000BA4  5193               	movf	___awmod@divisor& (0+255),w,b
  5652  000BA6  0100               	movlb	0	; () banked
  5653  000BA8  1194               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5654  000BAA  B4D8               	btfsc	status,2,c
  5655  000BAC  D026               	goto	l3341
  5656                           
  5657                           ; BSR set to: 0
  5658  000BAE  0E01               	movlw	1
  5659  000BB0  0100               	movlb	0	; () banked
  5660  000BB2  6F95               	movwf	___awmod@counter& (0+255),b
  5661  000BB4  D006               	goto	l3331
  5662  000BB6                     l3329:
  5663                           
  5664                           ; BSR set to: 0
  5665  000BB6  0100               	movlb	0	; () banked
  5666  000BB8  90D8               	bcf	status,0,c
  5667  000BBA  3793               	rlcf	___awmod@divisor& (0+255),f,b
  5668  000BBC  3794               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5669  000BBE  0100               	movlb	0	; () banked
  5670  000BC0  2B95               	incf	___awmod@counter& (0+255),f,b
  5671  000BC2                     l3331:
  5672                           
  5673                           ; BSR set to: 0
  5674  000BC2  0100               	movlb	0	; () banked
  5675  000BC4  AF94               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5676  000BC6  D7F7               	goto	l3329
  5677  000BC8                     l3333:
  5678                           
  5679                           ; BSR set to: 0
  5680  000BC8  0100               	movlb	0	; () banked
  5681  000BCA  5193               	movf	___awmod@divisor& (0+255),w,b
  5682  000BCC  0100               	movlb	0	; () banked
  5683  000BCE  5D91               	subwf	___awmod@dividend& (0+255),w,b
  5684  000BD0  0100               	movlb	0	; () banked
  5685  000BD2  5194               	movf	(___awmod@divisor+1)& (0+255),w,b
  5686  000BD4  0100               	movlb	0	; () banked
  5687  000BD6  5992               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5688  000BD8  A0D8               	btfss	status,0,c
  5689  000BDA  D008               	goto	l3337
  5690                           
  5691                           ; BSR set to: 0
  5692  000BDC  0100               	movlb	0	; () banked
  5693  000BDE  5193               	movf	___awmod@divisor& (0+255),w,b
  5694  000BE0  0100               	movlb	0	; () banked
  5695  000BE2  5F91               	subwf	___awmod@dividend& (0+255),f,b
  5696  000BE4  0100               	movlb	0	; () banked
  5697  000BE6  5194               	movf	(___awmod@divisor+1)& (0+255),w,b
  5698  000BE8  0100               	movlb	0	; () banked
  5699  000BEA  5B92               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5700  000BEC                     l3337:
  5701                           
  5702                           ; BSR set to: 0
  5703  000BEC  0100               	movlb	0	; () banked
  5704  000BEE  90D8               	bcf	status,0,c
  5705  000BF0  3394               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5706  000BF2  3393               	rrcf	___awmod@divisor& (0+255),f,b
  5707                           
  5708                           ; BSR set to: 0
  5709  000BF4  0100               	movlb	0	; () banked
  5710  000BF6  2F95               	decfsz	___awmod@counter& (0+255),f,b
  5711  000BF8  D7E7               	goto	l3333
  5712  000BFA                     l3341:
  5713                           
  5714                           ; BSR set to: 0
  5715  000BFA  0100               	movlb	0	; () banked
  5716  000BFC  5196               	movf	___awmod@sign& (0+255),w,b
  5717  000BFE  0100               	movlb	0	; () banked
  5718  000C00  B4D8               	btfsc	status,2,c
  5719  000C02  D005               	goto	l3345
  5720                           
  5721                           ; BSR set to: 0
  5722  000C04  0100               	movlb	0	; () banked
  5723  000C06  6D91               	negf	___awmod@dividend& (0+255),b
  5724  000C08  1F92               	comf	(___awmod@dividend+1)& (0+255),f,b
  5725  000C0A  B0D8               	btfsc	status,0,c
  5726  000C0C  2B92               	incf	(___awmod@dividend+1)& (0+255),f,b
  5727  000C0E                     l3345:
  5728                           
  5729                           ; BSR set to: 0
  5730  000C0E  C091  F091         	movff	___awmod@dividend,?___awmod
  5731  000C12  C092  F092         	movff	___awmod@dividend+1,?___awmod+1
  5732  000C16  0012               	return	
  5733  000C18                     __end_of___awmod:
  5734                           	opt stack 0
  5735                           tblptru	equ	0xFF8
  5736                           tblptrh	equ	0xFF7
  5737                           tblptrl	equ	0xFF6
  5738                           tablat	equ	0xFF5
  5739                           prodh	equ	0xFF4
  5740                           prodl	equ	0xFF3
  5741                           intcon	equ	0xFF2
  5742                           intcon2	equ	0xFF1
  5743                           postinc0	equ	0xFEE
  5744                           wreg	equ	0xFE8
  5745                           indf1	equ	0xFE7
  5746                           postdec1	equ	0xFE5
  5747                           fsr1h	equ	0xFE2
  5748                           fsr1l	equ	0xFE1
  5749                           indf2	equ	0xFDF
  5750                           postinc2	equ	0xFDE
  5751                           postdec2	equ	0xFDD
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function _I2C_Read_Byte *****************
  5757 ;; Defined at:
  5758 ;;		line 96 in file "soft_i2c.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  ack             1    wreg     unsigned char 
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;  ack             1   36[COMRAM] unsigned char 
  5763 ;;  i               1   38[COMRAM] unsigned char 
  5764 ;;  val             1   37[COMRAM] unsigned char 
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  1    wreg      unsigned char 
  5767 ;; Registers used:
  5768 ;;		wreg, status,2, status,0, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;Total ram usage:        3 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    5
  5781 ;; This function calls:
  5782 ;;		_I2C_SCL_CLEAR
  5783 ;;		_I2C_SCL_SET
  5784 ;;		_I2C_SDA_CLEAR
  5785 ;;		_I2C_SDA_IN_SET
  5786 ;;		_I2C_SDA_OUT_SET
  5787 ;;		_I2C_SDA_READ
  5788 ;;		_I2C_SDA_SET
  5789 ;; This function is called by:
  5790 ;;		_main
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text36
  5795  000C18                     __ptext36:
  5796                           	opt stack 0
  5797  000C18                     _I2C_Read_Byte:
  5798                           	opt stack 25
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;incstack = 0
  5802                           ;I2C_Read_Byte@ack stored from wreg
  5803  000C18  6E25               	movwf	I2C_Read_Byte@ack,c
  5804                           
  5805                           ;soft_i2c.c: 98: char i;
  5806                           ;soft_i2c.c: 99: char val = 0;
  5807  000C1A  0E00               	movlw	0
  5808  000C1C  6E26               	movwf	I2C_Read_Byte@val,c
  5809                           
  5810                           ;soft_i2c.c: 100: I2C_SDA_IN_SET();
  5811  000C1E  EC56  F00A         	call	_I2C_SDA_IN_SET	;wreg free
  5812                           
  5813                           ;soft_i2c.c: 103: for(i=0;i<8;i++)
  5814  000C22  0E00               	movlw	0
  5815  000C24  6E27               	movwf	I2C_Read_Byte@i,c
  5816  000C26                     l2927:
  5817  000C26  0E07               	movlw	7
  5818  000C28  6427               	cpfsgt	I2C_Read_Byte@i,c
  5819  000C2A  D001               	goto	l2931
  5820  000C2C  D01F               	goto	l2955
  5821  000C2E                     l2931:
  5822                           
  5823                           ;soft_i2c.c: 104: {
  5824                           ;soft_i2c.c: 105: if(i!=0) { val<<=1; }
  5825  000C2E  5027               	movf	I2C_Read_Byte@i,w,c
  5826  000C30  B4D8               	btfsc	status,2,c
  5827  000C32  D002               	goto	l2935
  5828  000C34  90D8               	bcf	status,0,c
  5829  000C36  3626               	rlcf	I2C_Read_Byte@val,f,c
  5830  000C38                     l2935:
  5831                           
  5832                           ;soft_i2c.c: 106: I2C_SCL_SET();
  5833  000C38  EC5A  F00A         	call	_I2C_SCL_SET	;wreg free
  5834                           
  5835                           ;soft_i2c.c: 107: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5836  000C3C  0E6A               	movlw	106
  5837  000C3E                     u3147:
  5838  000C3E  2EE8               	decfsz	wreg,f,c
  5839  000C40  D7FE               	goto	u3147
  5840  000C42  D000               	nop2		;nop
  5841                           
  5842                           ;soft_i2c.c: 108: if(I2C_SDA_READ()!=0)
  5843  000C44  EC3C  F00A         	call	_I2C_SDA_READ	;wreg free
  5844  000C48  0900               	iorlw	0
  5845  000C4A  B4D8               	btfsc	status,2,c
  5846  000C4C  D002               	goto	l2943
  5847                           
  5848                           ;soft_i2c.c: 109: {
  5849                           ;soft_i2c.c: 110: val |= 0x01;
  5850  000C4E  8026               	bsf	I2C_Read_Byte@val,0,c
  5851                           
  5852                           ;soft_i2c.c: 111: }
  5853  000C50  D001               	goto	l2945
  5854  000C52                     l2943:
  5855                           
  5856                           ;soft_i2c.c: 112: else
  5857                           ;soft_i2c.c: 113: {
  5858                           ;soft_i2c.c: 114: val &= 0xFE;
  5859  000C52  9026               	bcf	I2C_Read_Byte@val,0,c
  5860  000C54                     l2945:
  5861                           
  5862                           ;soft_i2c.c: 116: }
  5863                           ;soft_i2c.c: 117: _delay((unsigned long)((10)*(64000000/4000000.0)));
  5864  000C54  0E35               	movlw	53
  5865  000C56                     u3157:
  5866  000C56  2EE8               	decfsz	wreg,f,c
  5867  000C58  D7FE               	goto	u3157
  5868  000C5A  F000               	nop	
  5869                           
  5870                           ;soft_i2c.c: 118: I2C_SCL_CLEAR();
  5871  000C5C  EC5C  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  5872                           
  5873                           ;soft_i2c.c: 119: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5874  000C60  0E6A               	movlw	106
  5875  000C62                     u3167:
  5876  000C62  2EE8               	decfsz	wreg,f,c
  5877  000C64  D7FE               	goto	u3167
  5878  000C66  D000               	nop2		;nop
  5879  000C68  2A27               	incf	I2C_Read_Byte@i,f,c
  5880  000C6A  D7DD               	goto	l2927
  5881  000C6C                     l2955:
  5882                           
  5883                           ;soft_i2c.c: 120: }
  5884                           ;soft_i2c.c: 122: I2C_SDA_OUT_SET();
  5885  000C6C  EC54  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  5886                           
  5887                           ;soft_i2c.c: 125: if(ack)
  5888  000C70  5025               	movf	I2C_Read_Byte@ack,w,c
  5889  000C72  B4D8               	btfsc	status,2,c
  5890  000C74  D00E               	goto	l2965
  5891                           
  5892                           ;soft_i2c.c: 126: {
  5893                           ;soft_i2c.c: 127: I2C_SDA_CLEAR();
  5894  000C76  EC58  F00A         	call	_I2C_SDA_CLEAR	;wreg free
  5895                           
  5896                           ;soft_i2c.c: 128: I2C_SCL_SET();
  5897  000C7A  EC5A  F00A         	call	_I2C_SCL_SET	;wreg free
  5898                           
  5899                           ;soft_i2c.c: 129: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5900  000C7E  0E6A               	movlw	106
  5901  000C80                     u3177:
  5902  000C80  2EE8               	decfsz	wreg,f,c
  5903  000C82  D7FE               	goto	u3177
  5904  000C84  D000               	nop2		;nop
  5905                           
  5906                           ;soft_i2c.c: 130: I2C_SCL_CLEAR();
  5907  000C86  EC5C  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  5908                           
  5909                           ;soft_i2c.c: 131: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5910  000C8A  0E6A               	movlw	106
  5911  000C8C                     u3187:
  5912  000C8C  2EE8               	decfsz	wreg,f,c
  5913  000C8E  D7FE               	goto	u3187
  5914  000C90  D00D               	goto	L2
  5915  000C92                     l2965:
  5916                           
  5917                           ;soft_i2c.c: 133: else
  5918                           ;soft_i2c.c: 134: {
  5919                           ;soft_i2c.c: 135: I2C_SDA_SET();
  5920  000C92  EC52  F00A         	call	_I2C_SDA_SET	;wreg free
  5921                           
  5922                           ;soft_i2c.c: 136: I2C_SCL_SET();
  5923  000C96  EC5A  F00A         	call	_I2C_SCL_SET	;wreg free
  5924                           
  5925                           ;soft_i2c.c: 137: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5926  000C9A  0E6A               	movlw	106
  5927  000C9C                     u3197:
  5928  000C9C  2EE8               	decfsz	wreg,f,c
  5929  000C9E  D7FE               	goto	u3197
  5930  000CA0  D000               	nop2		;nop
  5931                           
  5932                           ;soft_i2c.c: 138: I2C_SCL_CLEAR();
  5933  000CA2  EC5C  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  5934                           
  5935                           ;soft_i2c.c: 139: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5936  000CA6  0E6A               	movlw	106
  5937  000CA8                     u3207:
  5938  000CA8  2EE8               	decfsz	wreg,f,c
  5939  000CAA  D7FE               	goto	u3207
  5940  000CAC                     L2:
  5941  000CAC  D000               	nop2		;nop
  5942                           
  5943                           ;soft_i2c.c: 140: }
  5944                           ;soft_i2c.c: 142: return val;
  5945  000CAE  5026               	movf	I2C_Read_Byte@val,w,c
  5946  000CB0  0012               	return	
  5947  000CB2                     __end_of_I2C_Read_Byte:
  5948                           	opt stack 0
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           prodh	equ	0xFF4
  5954                           prodl	equ	0xFF3
  5955                           intcon	equ	0xFF2
  5956                           intcon2	equ	0xFF1
  5957                           postinc0	equ	0xFEE
  5958                           wreg	equ	0xFE8
  5959                           indf1	equ	0xFE7
  5960                           postdec1	equ	0xFE5
  5961                           fsr1h	equ	0xFE2
  5962                           fsr1l	equ	0xFE1
  5963                           indf2	equ	0xFDF
  5964                           postinc2	equ	0xFDE
  5965                           postdec2	equ	0xFDD
  5966                           fsr2h	equ	0xFDA
  5967                           fsr2l	equ	0xFD9
  5968                           status	equ	0xFD8
  5969                           
  5970 ;; *************** function _I2C_SDA_SET *****************
  5971 ;; Defined at:
  5972 ;;		line 11 in file "soft_i2c.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;		None
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;		None
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  1    wreg      void 
  5979 ;; Registers used:
  5980 ;;		None
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;Total ram usage:        0 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    4
  5993 ;; This function calls:
  5994 ;;		Nothing
  5995 ;; This function is called by:
  5996 ;;		_I2C_Init
  5997 ;;		_I2C_Start
  5998 ;;		_I2C_Stop
  5999 ;;		_I2C_Write_Byte
  6000 ;;		_I2C_Read_Byte
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           	psect	text37
  6005  0014A4                     __ptext37:
  6006                           	opt stack 0
  6007  0014A4                     _I2C_SDA_SET:
  6008                           	opt stack 24
  6009                           
  6010                           ;incstack = 0
  6011  0014A4  888B               	bsf	3979,4,c	;volatile
  6012  0014A6  0012               	return		;funcret
  6013  0014A8                     __end_of_I2C_SDA_SET:
  6014                           	opt stack 0
  6015                           tblptru	equ	0xFF8
  6016                           tblptrh	equ	0xFF7
  6017                           tblptrl	equ	0xFF6
  6018                           tablat	equ	0xFF5
  6019                           prodh	equ	0xFF4
  6020                           prodl	equ	0xFF3
  6021                           intcon	equ	0xFF2
  6022                           intcon2	equ	0xFF1
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           indf1	equ	0xFE7
  6026                           postdec1	equ	0xFE5
  6027                           fsr1h	equ	0xFE2
  6028                           fsr1l	equ	0xFE1
  6029                           indf2	equ	0xFDF
  6030                           postinc2	equ	0xFDE
  6031                           postdec2	equ	0xFDD
  6032                           fsr2h	equ	0xFDA
  6033                           fsr2l	equ	0xFD9
  6034                           status	equ	0xFD8
  6035                           
  6036 ;; *************** function _I2C_SDA_READ *****************
  6037 ;; Defined at:
  6038 ;;		line 22 in file "soft_i2c.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;		None
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      unsigned char 
  6045 ;; Registers used:
  6046 ;;		wreg
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;Total ram usage:        0 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    4
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_I2C_Read_Byte
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text38
  6067  001478                     __ptext38:
  6068                           	opt stack 0
  6069  001478                     _I2C_SDA_READ:
  6070                           	opt stack 25
  6071                           
  6072                           ;incstack = 0
  6073  001478  A882               	btfss	3970,4,c	;volatile
  6074  00147A  D002               	goto	u2140
  6075  00147C  0E01               	movlw	1
  6076  00147E  0012               	return	
  6077  001480                     u2140:
  6078  001480  0E00               	movlw	0
  6079  001482  0012               	return	
  6080  001484                     __end_of_I2C_SDA_READ:
  6081                           	opt stack 0
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           intcon	equ	0xFF2
  6089                           intcon2	equ	0xFF1
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           indf1	equ	0xFE7
  6093                           postdec1	equ	0xFE5
  6094                           fsr1h	equ	0xFE2
  6095                           fsr1l	equ	0xFE1
  6096                           indf2	equ	0xFDF
  6097                           postinc2	equ	0xFDE
  6098                           postdec2	equ	0xFDD
  6099                           fsr2h	equ	0xFDA
  6100                           fsr2l	equ	0xFD9
  6101                           status	equ	0xFD8
  6102                           
  6103 ;; *************** function _I2C_SDA_OUT_SET *****************
  6104 ;; Defined at:
  6105 ;;		line 15 in file "soft_i2c.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;		None
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;		None
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      void 
  6112 ;; Registers used:
  6113 ;;		None
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;Total ram usage:        0 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    4
  6126 ;; This function calls:
  6127 ;;		Nothing
  6128 ;; This function is called by:
  6129 ;;		_I2C_Init
  6130 ;;		_I2C_Start
  6131 ;;		_I2C_Stop
  6132 ;;		_I2C_Write_Byte
  6133 ;;		_I2C_Read_Byte
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text39
  6138  0014A8                     __ptext39:
  6139                           	opt stack 0
  6140  0014A8                     _I2C_SDA_OUT_SET:
  6141                           	opt stack 24
  6142                           
  6143                           ;incstack = 0
  6144  0014A8  9894               	bcf	3988,4,c	;volatile
  6145  0014AA  0012               	return		;funcret
  6146  0014AC                     __end_of_I2C_SDA_OUT_SET:
  6147                           	opt stack 0
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodh	equ	0xFF4
  6153                           prodl	equ	0xFF3
  6154                           intcon	equ	0xFF2
  6155                           intcon2	equ	0xFF1
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           indf1	equ	0xFE7
  6159                           postdec1	equ	0xFE5
  6160                           fsr1h	equ	0xFE2
  6161                           fsr1l	equ	0xFE1
  6162                           indf2	equ	0xFDF
  6163                           postinc2	equ	0xFDE
  6164                           postdec2	equ	0xFDD
  6165                           fsr2h	equ	0xFDA
  6166                           fsr2l	equ	0xFD9
  6167                           status	equ	0xFD8
  6168                           
  6169 ;; *************** function _I2C_SDA_IN_SET *****************
  6170 ;; Defined at:
  6171 ;;		line 14 in file "soft_i2c.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;		None
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;		None
  6176 ;; Return value:  Size  Location     Type
  6177 ;;                  1    wreg      void 
  6178 ;; Registers used:
  6179 ;;		None
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;Total ram usage:        0 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; Hardware stack levels required when called:    4
  6192 ;; This function calls:
  6193 ;;		Nothing
  6194 ;; This function is called by:
  6195 ;;		_I2C_Write_Byte
  6196 ;;		_I2C_Read_Byte
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text40
  6201  0014AC                     __ptext40:
  6202                           	opt stack 0
  6203  0014AC                     _I2C_SDA_IN_SET:
  6204                           	opt stack 24
  6205                           
  6206                           ;incstack = 0
  6207  0014AC  8894               	bsf	3988,4,c	;volatile
  6208  0014AE  0012               	return		;funcret
  6209  0014B0                     __end_of_I2C_SDA_IN_SET:
  6210                           	opt stack 0
  6211                           tblptru	equ	0xFF8
  6212                           tblptrh	equ	0xFF7
  6213                           tblptrl	equ	0xFF6
  6214                           tablat	equ	0xFF5
  6215                           prodh	equ	0xFF4
  6216                           prodl	equ	0xFF3
  6217                           intcon	equ	0xFF2
  6218                           intcon2	equ	0xFF1
  6219                           postinc0	equ	0xFEE
  6220                           wreg	equ	0xFE8
  6221                           indf1	equ	0xFE7
  6222                           postdec1	equ	0xFE5
  6223                           fsr1h	equ	0xFE2
  6224                           fsr1l	equ	0xFE1
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           fsr2h	equ	0xFDA
  6229                           fsr2l	equ	0xFD9
  6230                           status	equ	0xFD8
  6231                           
  6232 ;; *************** function _I2C_SDA_CLEAR *****************
  6233 ;; Defined at:
  6234 ;;		line 12 in file "soft_i2c.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;		None
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      void 
  6241 ;; Registers used:
  6242 ;;		None
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;Total ram usage:        0 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    4
  6255 ;; This function calls:
  6256 ;;		Nothing
  6257 ;; This function is called by:
  6258 ;;		_I2C_Start
  6259 ;;		_I2C_Write_Byte
  6260 ;;		_I2C_Read_Byte
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text41
  6265  0014B0                     __ptext41:
  6266                           	opt stack 0
  6267  0014B0                     _I2C_SDA_CLEAR:
  6268                           	opt stack 24
  6269                           
  6270                           ;incstack = 0
  6271  0014B0  988B               	bcf	3979,4,c	;volatile
  6272  0014B2  0012               	return		;funcret
  6273  0014B4                     __end_of_I2C_SDA_CLEAR:
  6274                           	opt stack 0
  6275                           tblptru	equ	0xFF8
  6276                           tblptrh	equ	0xFF7
  6277                           tblptrl	equ	0xFF6
  6278                           tablat	equ	0xFF5
  6279                           prodh	equ	0xFF4
  6280                           prodl	equ	0xFF3
  6281                           intcon	equ	0xFF2
  6282                           intcon2	equ	0xFF1
  6283                           postinc0	equ	0xFEE
  6284                           wreg	equ	0xFE8
  6285                           indf1	equ	0xFE7
  6286                           postdec1	equ	0xFE5
  6287                           fsr1h	equ	0xFE2
  6288                           fsr1l	equ	0xFE1
  6289                           indf2	equ	0xFDF
  6290                           postinc2	equ	0xFDE
  6291                           postdec2	equ	0xFDD
  6292                           fsr2h	equ	0xFDA
  6293                           fsr2l	equ	0xFD9
  6294                           status	equ	0xFD8
  6295                           
  6296 ;; *************** function _I2C_SCL_SET *****************
  6297 ;; Defined at:
  6298 ;;		line 17 in file "soft_i2c.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;		None
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;		None
  6303 ;; Return value:  Size  Location     Type
  6304 ;;                  1    wreg      void 
  6305 ;; Registers used:
  6306 ;;		None
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;Total ram usage:        0 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    4
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_I2C_Init
  6323 ;;		_I2C_Start
  6324 ;;		_I2C_Stop
  6325 ;;		_I2C_Write_Byte
  6326 ;;		_I2C_Read_Byte
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text42
  6331  0014B4                     __ptext42:
  6332                           	opt stack 0
  6333  0014B4                     _I2C_SCL_SET:
  6334                           	opt stack 24
  6335                           
  6336                           ;incstack = 0
  6337  0014B4  868B               	bsf	3979,3,c	;volatile
  6338  0014B6  0012               	return		;funcret
  6339  0014B8                     __end_of_I2C_SCL_SET:
  6340                           	opt stack 0
  6341                           tblptru	equ	0xFF8
  6342                           tblptrh	equ	0xFF7
  6343                           tblptrl	equ	0xFF6
  6344                           tablat	equ	0xFF5
  6345                           prodh	equ	0xFF4
  6346                           prodl	equ	0xFF3
  6347                           intcon	equ	0xFF2
  6348                           intcon2	equ	0xFF1
  6349                           postinc0	equ	0xFEE
  6350                           wreg	equ	0xFE8
  6351                           indf1	equ	0xFE7
  6352                           postdec1	equ	0xFE5
  6353                           fsr1h	equ	0xFE2
  6354                           fsr1l	equ	0xFE1
  6355                           indf2	equ	0xFDF
  6356                           postinc2	equ	0xFDE
  6357                           postdec2	equ	0xFDD
  6358                           fsr2h	equ	0xFDA
  6359                           fsr2l	equ	0xFD9
  6360                           status	equ	0xFD8
  6361                           
  6362 ;; *************** function _I2C_SCL_CLEAR *****************
  6363 ;; Defined at:
  6364 ;;		line 18 in file "soft_i2c.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;		None
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;		None
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  1    wreg      void 
  6371 ;; Registers used:
  6372 ;;		None
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;Total ram usage:        0 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    4
  6385 ;; This function calls:
  6386 ;;		Nothing
  6387 ;; This function is called by:
  6388 ;;		_I2C_Start
  6389 ;;		_I2C_Write_Byte
  6390 ;;		_I2C_Read_Byte
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text43
  6395  0014B8                     __ptext43:
  6396                           	opt stack 0
  6397  0014B8                     _I2C_SCL_CLEAR:
  6398                           	opt stack 24
  6399                           
  6400                           ;incstack = 0
  6401  0014B8  968B               	bcf	3979,3,c	;volatile
  6402  0014BA  0012               	return		;funcret
  6403  0014BC                     __end_of_I2C_SCL_CLEAR:
  6404                           	opt stack 0
  6405                           tblptru	equ	0xFF8
  6406                           tblptrh	equ	0xFF7
  6407                           tblptrl	equ	0xFF6
  6408                           tablat	equ	0xFF5
  6409                           prodh	equ	0xFF4
  6410                           prodl	equ	0xFF3
  6411                           intcon	equ	0xFF2
  6412                           intcon2	equ	0xFF1
  6413                           postinc0	equ	0xFEE
  6414                           wreg	equ	0xFE8
  6415                           indf1	equ	0xFE7
  6416                           postdec1	equ	0xFE5
  6417                           fsr1h	equ	0xFE2
  6418                           fsr1l	equ	0xFE1
  6419                           indf2	equ	0xFDF
  6420                           postinc2	equ	0xFDE
  6421                           postdec2	equ	0xFDD
  6422                           fsr2h	equ	0xFDA
  6423                           fsr2l	equ	0xFD9
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _INTERRUPT_InterruptManager *****************
  6427 ;; Defined at:
  6428 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;		None
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;		None
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:       14 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    3
  6449 ;; This function calls:
  6450 ;;		_EUSART1_Receive_ISR
  6451 ;;		_EUSART1_Transmit_ISR
  6452 ;; This function is called by:
  6453 ;;		Interrupt level 2
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	intcode
  6458  000008                     __pintcode:
  6459                           	opt stack 0
  6460  000008                     _INTERRUPT_InterruptManager:
  6461                           	opt stack 22
  6462                           
  6463                           ;incstack = 0
  6464  000008  823B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6465  00000A  CFFA F017          	movff	pclath,??_INTERRUPT_InterruptManager
  6466  00000E  CFFB F018          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6467  000012  CFE9 F019          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6468  000016  CFEA F01A          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6469  00001A  CFE1 F01B          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6470  00001E  CFE2 F01C          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6471  000022  CFD9 F01D          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6472  000026  CFDA F01E          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6473  00002A  CFF3 F01F          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6474  00002E  CFF4 F020          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6475  000032  CFF6 F021          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6476  000036  CFF7 F022          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6477  00003A  CFF8 F023          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6478  00003E  CFF5 F024          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6479                           
  6480                           ;interrupt_manager.c: 77: if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6481  000042  B89D               	btfsc	3997,4,c	;volatile
  6482  000044  A89E               	btfss	3998,4,c	;volatile
  6483  000046  D003               	goto	i2l20
  6484                           
  6485                           ;interrupt_manager.c: 78: {
  6486                           ;interrupt_manager.c: 79: EUSART1_Transmit_ISR();
  6487  000048  EC40  F009         	call	_EUSART1_Transmit_ISR	;wreg free
  6488                           
  6489                           ;interrupt_manager.c: 80: }
  6490  00004C  D005               	goto	i2l24
  6491  00004E                     i2l20:
  6492                           
  6493                           ;interrupt_manager.c: 81: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6494  00004E  BA9D               	btfsc	3997,5,c	;volatile
  6495  000050  AA9E               	btfss	3998,5,c	;volatile
  6496  000052  D002               	goto	i2l24
  6497                           
  6498                           ;interrupt_manager.c: 82: {
  6499                           ;interrupt_manager.c: 83: EUSART1_Receive_ISR();
  6500  000054  ECBD  F004         	call	_EUSART1_Receive_ISR	;wreg free
  6501  000058                     i2l24:
  6502  000058  C024  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6503  00005C  C023  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6504  000060  C022  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6505  000064  C021  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6506  000068  C020  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6507  00006C  C01F  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6508  000070  C01E  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6509  000074  C01D  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6510  000078  C01C  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6511  00007C  C01B  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6512  000080  C01A  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6513  000084  C019  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6514  000088  C018  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6515  00008C  C017  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6516  000090  923B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6517  000092  0011               	retfie		f
  6518  000094                     __end_of_INTERRUPT_InterruptManager:
  6519                           	opt stack 0
  6520                           pclatu	equ	0xFFB
  6521                           pclath	equ	0xFFA
  6522                           tblptru	equ	0xFF8
  6523                           tblptrh	equ	0xFF7
  6524                           tblptrl	equ	0xFF6
  6525                           tablat	equ	0xFF5
  6526                           prodh	equ	0xFF4
  6527                           prodl	equ	0xFF3
  6528                           intcon	equ	0xFF2
  6529                           intcon2	equ	0xFF1
  6530                           postinc0	equ	0xFEE
  6531                           fsr0h	equ	0xFEA
  6532                           fsr0l	equ	0xFE9
  6533                           wreg	equ	0xFE8
  6534                           indf1	equ	0xFE7
  6535                           postdec1	equ	0xFE5
  6536                           fsr1h	equ	0xFE2
  6537                           fsr1l	equ	0xFE1
  6538                           indf2	equ	0xFDF
  6539                           postinc2	equ	0xFDE
  6540                           postdec2	equ	0xFDD
  6541                           fsr2h	equ	0xFDA
  6542                           fsr2l	equ	0xFD9
  6543                           status	equ	0xFD8
  6544                           
  6545 ;; *************** function _EUSART1_Transmit_ISR *****************
  6546 ;; Defined at:
  6547 ;;		line 175 in file "mcc_generated_files/eusart1.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;		None
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;		None
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;Total ram usage:        0 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_INTERRUPT_InterruptManager
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text45
  6575  001280                     __ptext45:
  6576                           	opt stack 0
  6577  001280                     _EUSART1_Transmit_ISR:
  6578                           	opt stack 24
  6579                           
  6580                           ;eusart1.c: 179: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  6581                           
  6582                           ;incstack = 0
  6583  001280  0E80               	movlw	128
  6584  001282  603A               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  6585  001284  D012               	goto	i2l122
  6586                           
  6587                           ;eusart1.c: 180: {
  6588                           ;eusart1.c: 181: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  6589  001286  5032               	movf	_eusart1TxTail,w,c
  6590  001288  0D01               	mullw	1
  6591  00128A  0E00               	movlw	low _eusart1TxBuffer
  6592  00128C  24F3               	addwf	prodl,w,c
  6593  00128E  6ED9               	movwf	fsr2l,c
  6594  001290  0E01               	movlw	high _eusart1TxBuffer
  6595  001292  20F4               	addwfc	prodh,w,c
  6596  001294  6EDA               	movwf	fsr2h,c
  6597  001296  50DF               	movf	indf2,w,c
  6598  001298  6EAD               	movwf	4013,c	;volatile
  6599  00129A  2A32               	incf	_eusart1TxTail,f,c
  6600                           
  6601                           ;eusart1.c: 182: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  6602  00129C  0E7F               	movlw	127
  6603  00129E  6432               	cpfsgt	_eusart1TxTail,c
  6604  0012A0  D002               	goto	i2l2791
  6605                           
  6606                           ;eusart1.c: 183: {
  6607                           ;eusart1.c: 184: eusart1TxTail = 0;
  6608  0012A2  0E00               	movlw	0
  6609  0012A4  6E32               	movwf	_eusart1TxTail,c
  6610  0012A6                     i2l2791:
  6611                           
  6612                           ;eusart1.c: 185: }
  6613                           ;eusart1.c: 186: eusart1TxBufferRemaining++;
  6614  0012A6  2A3A               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  6615                           
  6616                           ;eusart1.c: 187: }
  6617  0012A8  0012               	return	
  6618  0012AA                     i2l122:
  6619                           
  6620                           ;eusart1.c: 188: else
  6621                           ;eusart1.c: 189: {
  6622                           ;eusart1.c: 190: PIE1bits.TX1IE = 0;
  6623  0012AA  989D               	bcf	3997,4,c	;volatile
  6624  0012AC  0012               	return	
  6625  0012AE                     __end_of_EUSART1_Transmit_ISR:
  6626                           	opt stack 0
  6627                           pclatu	equ	0xFFB
  6628                           pclath	equ	0xFFA
  6629                           tblptru	equ	0xFF8
  6630                           tblptrh	equ	0xFF7
  6631                           tblptrl	equ	0xFF6
  6632                           tablat	equ	0xFF5
  6633                           prodh	equ	0xFF4
  6634                           prodl	equ	0xFF3
  6635                           intcon	equ	0xFF2
  6636                           intcon2	equ	0xFF1
  6637                           postinc0	equ	0xFEE
  6638                           fsr0h	equ	0xFEA
  6639                           fsr0l	equ	0xFE9
  6640                           wreg	equ	0xFE8
  6641                           indf1	equ	0xFE7
  6642                           postdec1	equ	0xFE5
  6643                           fsr1h	equ	0xFE2
  6644                           fsr1l	equ	0xFE1
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652 ;; *************** function _EUSART1_Receive_ISR *****************
  6653 ;; Defined at:
  6654 ;;		line 194 in file "mcc_generated_files/eusart1.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;  state           2   20[COMRAM] int 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;Total ram usage:        3 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    2
  6675 ;; This function calls:
  6676 ;;		_EUSART1_Read
  6677 ;;		_strcmp
  6678 ;;		_strstr
  6679 ;; This function is called by:
  6680 ;;		_INTERRUPT_InterruptManager
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text46
  6685  00097A                     __ptext46:
  6686                           	opt stack 0
  6687  00097A                     _EUSART1_Receive_ISR:
  6688                           	opt stack 22
  6689                           
  6690                           ;eusart1.c: 196: if(1 == RCSTA1bits.OERR)
  6691                           
  6692                           ;incstack = 0
  6693  00097A  A2AB               	btfss	4011,1,c	;volatile
  6694  00097C  D002               	goto	i2l2797
  6695                           
  6696                           ;eusart1.c: 197: {
  6697                           ;eusart1.c: 200: RCSTA1bits.CREN = 0;
  6698  00097E  98AB               	bcf	4011,4,c	;volatile
  6699                           
  6700                           ;eusart1.c: 201: RCSTA1bits.CREN = 1;
  6701  000980  88AB               	bsf	4011,4,c	;volatile
  6702  000982                     i2l2797:
  6703                           
  6704                           ;eusart1.c: 202: }
  6705                           ;eusart1.c: 207: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  6706  000982  502F               	movf	_eusart1RxHead,w,c
  6707  000984  0D01               	mullw	1
  6708  000986  0E00               	movlw	low _eusart1RxBuffer
  6709  000988  24F3               	addwf	prodl,w,c
  6710  00098A  6ED9               	movwf	fsr2l,c
  6711  00098C  0E02               	movlw	high _eusart1RxBuffer
  6712  00098E  20F4               	addwfc	prodh,w,c
  6713  000990  6EDA               	movwf	fsr2h,c
  6714  000992  CFAE FFDF          	movff	4014,indf2	;volatile
  6715  000996  2A2F               	incf	_eusart1RxHead,f,c
  6716                           
  6717                           ;eusart1.c: 208: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  6718  000998  0E7F               	movlw	127
  6719  00099A  642F               	cpfsgt	_eusart1RxHead,c
  6720  00099C  D002               	goto	i2l2805
  6721                           
  6722                           ;eusart1.c: 209: {
  6723                           ;eusart1.c: 210: eusart1RxHead = 0;
  6724  00099E  0E00               	movlw	0
  6725  0009A0  6E2F               	movwf	_eusart1RxHead,c
  6726  0009A2                     i2l2805:
  6727                           
  6728                           ;eusart1.c: 211: }
  6729                           ;eusart1.c: 212: eusart1RxCount++;
  6730  0009A2  2A2E               	incf	_eusart1RxCount,f,c	;volatile
  6731                           
  6732                           ;eusart1.c: 214: int state = 0;
  6733  0009A4  0E00               	movlw	0
  6734  0009A6  6E16               	movwf	EUSART1_Receive_ISR@state+1,c
  6735  0009A8  0E00               	movlw	0
  6736  0009AA  6E15               	movwf	EUSART1_Receive_ISR@state,c
  6737                           
  6738                           ;eusart1.c: 216: if(ready)return;
  6739  0009AC  5033               	movf	_ready,w,c	;volatile
  6740  0009AE  A4D8               	btfss	status,2,c
  6741  0009B0  0012               	return	
  6742  0009B2  D01C               	goto	i2l2821
  6743  0009B4                     i2l2813:
  6744                           
  6745                           ;eusart1.c: 219: line[index]=EUSART1_Read();
  6746  0009B4  ECF8  F008         	call	_EUSART1_Read	;wreg free
  6747  0009B8  6E14               	movwf	??_EUSART1_Receive_ISR& (0+255),c
  6748  0009BA  0E80               	movlw	low _line
  6749  0009BC  242C               	addwf	_index,w,c
  6750  0009BE  6ED9               	movwf	fsr2l,c
  6751  0009C0  0E01               	movlw	high _line
  6752  0009C2  202D               	addwfc	_index+1,w,c
  6753  0009C4  6EDA               	movwf	fsr2h,c
  6754  0009C6  C014  FFDF         	movff	??_EUSART1_Receive_ISR,indf2
  6755                           
  6756                           ;eusart1.c: 220: if (line[index] == '\n'){
  6757  0009CA  0E80               	movlw	low _line
  6758  0009CC  242C               	addwf	_index,w,c
  6759  0009CE  6ED9               	movwf	fsr2l,c
  6760  0009D0  0E01               	movlw	high _line
  6761  0009D2  202D               	addwfc	_index+1,w,c
  6762  0009D4  6EDA               	movwf	fsr2h,c
  6763  0009D6  0E0A               	movlw	10
  6764  0009D8  18DE               	xorwf	postinc2,w,c
  6765  0009DA  A4D8               	btfss	status,2,c
  6766  0009DC  D005               	goto	i2l2819
  6767                           
  6768                           ;eusart1.c: 221: state=1;
  6769  0009DE  0E00               	movlw	0
  6770  0009E0  6E16               	movwf	EUSART1_Receive_ISR@state+1,c
  6771  0009E2  0E01               	movlw	1
  6772  0009E4  6E15               	movwf	EUSART1_Receive_ISR@state,c
  6773                           
  6774                           ;eusart1.c: 222: break;
  6775  0009E6  D005               	goto	i2l2823
  6776  0009E8                     i2l2819:
  6777                           
  6778                           ;eusart1.c: 223: }
  6779                           ;eusart1.c: 224: index++;
  6780  0009E8  4A2C               	infsnz	_index,f,c
  6781  0009EA  2A2D               	incf	_index+1,f,c
  6782  0009EC                     i2l2821:
  6783  0009EC  502E               	movf	_eusart1RxCount,w,c	;volatile
  6784  0009EE  A4D8               	btfss	status,2,c
  6785  0009F0  D7E1               	goto	i2l2813
  6786  0009F2                     i2l2823:
  6787                           
  6788                           ;eusart1.c: 225: }
  6789                           ;eusart1.c: 227: if(state==1){
  6790  0009F2  0415               	decf	EUSART1_Receive_ISR@state,w,c
  6791  0009F4  1016               	iorwf	EUSART1_Receive_ISR@state+1,w,c
  6792  0009F6  A4D8               	btfss	status,2,c
  6793  0009F8  0012               	return	
  6794                           
  6795                           ;eusart1.c: 228: line[--index] = '\0';
  6796  0009FA  062C               	decf	_index,f,c
  6797  0009FC  A0D8               	btfss	status,0,c
  6798  0009FE  062D               	decf	_index+1,f,c
  6799  000A00  0E80               	movlw	low _line
  6800  000A02  242C               	addwf	_index,w,c
  6801  000A04  6ED9               	movwf	fsr2l,c
  6802  000A06  0E01               	movlw	high _line
  6803  000A08  202D               	addwfc	_index+1,w,c
  6804  000A0A  6EDA               	movwf	fsr2h,c
  6805  000A0C  0E00               	movlw	0
  6806  000A0E  6EDF               	movwf	indf2,c
  6807                           
  6808                           ;eusart1.c: 229: uartState=0;
  6809  000A10  0E00               	movlw	0
  6810  000A12  6E34               	movwf	_uartState,c	;volatile
  6811                           
  6812                           ;eusart1.c: 230: if(!strcmp("radio_err",line)){
  6813  000A14  0EE5               	movlw	low STR_1
  6814  000A16  6E01               	movwf	strcmp@s1,c
  6815  000A18  0EFF               	movlw	high STR_1
  6816  000A1A  6E02               	movwf	strcmp@s1+1,c
  6817  000A1C  0E80               	movlw	low _line
  6818  000A1E  6E03               	movwf	strcmp@s2,c
  6819  000A20  0E01               	movlw	high _line
  6820  000A22  6E04               	movwf	strcmp@s2+1,c
  6821  000A24  EC59  F006         	call	_strcmp	;wreg free
  6822  000A28  5001               	movf	?_strcmp,w,c
  6823  000A2A  1002               	iorwf	?_strcmp+1,w,c
  6824  000A2C  A4D8               	btfss	status,2,c
  6825  000A2E  D002               	goto	i2l2833
  6826                           
  6827                           ;eusart1.c: 231: uartState=5;
  6828  000A30  0E05               	movlw	5
  6829  000A32  D02B               	goto	L5
  6830  000A34                     i2l2833:
  6831  000A34  0E80               	movlw	low _line
  6832  000A36  6E10               	movwf	strstr@s1,c
  6833  000A38  0E01               	movlw	high _line
  6834  000A3A  6E11               	movwf	strstr@s1+1,c
  6835  000A3C  0EEF               	movlw	low STR_2
  6836  000A3E  6E12               	movwf	strstr@s2,c
  6837  000A40  0EFF               	movlw	high STR_2
  6838  000A42  6E13               	movwf	strstr@s2+1,c
  6839  000A44  ECA1  F006         	call	_strstr	;wreg free
  6840  000A48  5010               	movf	?_strstr,w,c
  6841  000A4A  1011               	iorwf	?_strstr+1,w,c
  6842  000A4C  B4D8               	btfsc	status,2,c
  6843  000A4E  D00E               	goto	i2l2843
  6844                           
  6845                           ;eusart1.c: 233: if(line[10]=='4'&&line[11]=='3'){
  6846  000A50  0E34               	movlw	52
  6847  000A52  0101               	movlb	1	; () banked
  6848  000A54  198A               	xorwf	(_line+10)& (0+255),w,b	;volatile
  6849  000A56  A4D8               	btfss	status,2,c
  6850  000A58  D007               	goto	i2l2841
  6851                           
  6852                           ; BSR set to: 1
  6853  000A5A  0E33               	movlw	51
  6854  000A5C  0101               	movlb	1	; () banked
  6855  000A5E  198B               	xorwf	(_line+11)& (0+255),w,b	;volatile
  6856  000A60  A4D8               	btfss	status,2,c
  6857  000A62  D002               	goto	i2l2841
  6858                           
  6859                           ; BSR set to: 1
  6860                           ;eusart1.c: 234: uartState=4;
  6861  000A64  0E04               	movlw	4
  6862  000A66  D011               	goto	L5
  6863  000A68                     i2l2841:
  6864                           
  6865                           ; BSR set to: 1
  6866                           ;eusart1.c: 236: uartState=3;
  6867  000A68  0E03               	movlw	3
  6868  000A6A  D00F               	goto	L5
  6869  000A6C                     i2l2843:
  6870  000A6C  0E80               	movlw	low _line
  6871  000A6E  6E01               	movwf	strcmp@s1,c
  6872  000A70  0E01               	movlw	high _line
  6873  000A72  6E02               	movwf	strcmp@s1+1,c
  6874  000A74  0ED9               	movlw	low STR_3
  6875  000A76  6E03               	movwf	strcmp@s2,c
  6876  000A78  0EFF               	movlw	high STR_3
  6877  000A7A  6E04               	movwf	strcmp@s2+1,c
  6878  000A7C  EC59  F006         	call	_strcmp	;wreg free
  6879  000A80  5001               	movf	?_strcmp,w,c
  6880  000A82  1002               	iorwf	?_strcmp+1,w,c
  6881  000A84  A4D8               	btfss	status,2,c
  6882  000A86  D003               	goto	i2l2847
  6883  000A88  D010               	goto	i2l2849
  6884  000A8A                     L5:
  6885  000A8A  6E34               	movwf	_uartState,c	;volatile
  6886                           
  6887                           ;eusart1.c: 240: } else if (!strcmp(line, "ok") != (0)) {
  6888  000A8C  D010               	goto	i2l138
  6889  000A8E                     i2l2847:
  6890  000A8E  0E80               	movlw	low _line
  6891  000A90  6E01               	movwf	strcmp@s1,c
  6892  000A92  0E01               	movlw	high _line
  6893  000A94  6E02               	movwf	strcmp@s1+1,c
  6894  000A96  0EE2               	movlw	low (STR_3+9)
  6895  000A98  6E03               	movwf	strcmp@s2,c
  6896  000A9A  0EFF               	movlw	high (STR_3+9)
  6897  000A9C  6E04               	movwf	strcmp@s2+1,c
  6898  000A9E  EC59  F006         	call	_strcmp	;wreg free
  6899  000AA2  5001               	movf	?_strcmp,w,c
  6900  000AA4  1002               	iorwf	?_strcmp+1,w,c
  6901  000AA6  A4D8               	btfss	status,2,c
  6902  000AA8  D002               	goto	i2l138
  6903  000AAA                     i2l2849:
  6904                           
  6905                           ;eusart1.c: 241: uartState=1;
  6906  000AAA  0E01               	movlw	1
  6907  000AAC  D7EE               	goto	L5
  6908  000AAE                     i2l138:
  6909                           
  6910                           ;eusart1.c: 242: }
  6911                           ;eusart1.c: 243: index=0;
  6912  000AAE  0E00               	movlw	0
  6913  000AB0  6E2D               	movwf	_index+1,c
  6914  000AB2  0E00               	movlw	0
  6915  000AB4  6E2C               	movwf	_index,c
  6916                           
  6917                           ;eusart1.c: 244: ready=1;
  6918  000AB6  0E01               	movlw	1
  6919  000AB8  6E33               	movwf	_ready,c	;volatile
  6920  000ABA  0012               	return	
  6921  000ABC                     __end_of_EUSART1_Receive_ISR:
  6922                           	opt stack 0
  6923                           pclatu	equ	0xFFB
  6924                           pclath	equ	0xFFA
  6925                           tblptru	equ	0xFF8
  6926                           tblptrh	equ	0xFF7
  6927                           tblptrl	equ	0xFF6
  6928                           tablat	equ	0xFF5
  6929                           prodh	equ	0xFF4
  6930                           prodl	equ	0xFF3
  6931                           intcon	equ	0xFF2
  6932                           intcon2	equ	0xFF1
  6933                           postinc0	equ	0xFEE
  6934                           fsr0h	equ	0xFEA
  6935                           fsr0l	equ	0xFE9
  6936                           wreg	equ	0xFE8
  6937                           indf1	equ	0xFE7
  6938                           postdec1	equ	0xFE5
  6939                           fsr1h	equ	0xFE2
  6940                           fsr1l	equ	0xFE1
  6941                           indf2	equ	0xFDF
  6942                           postinc2	equ	0xFDE
  6943                           postdec2	equ	0xFDD
  6944                           fsr2h	equ	0xFDA
  6945                           fsr2l	equ	0xFD9
  6946                           status	equ	0xFD8
  6947                           
  6948 ;; *************** function _strstr *****************
  6949 ;; Defined at:
  6950 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strstr.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  s1              2   15[COMRAM] PTR const unsigned char 
  6953 ;;		 -> NULL(0), line(128), 
  6954 ;;  s2              2   17[COMRAM] PTR const unsigned char 
  6955 ;;		 -> STR_2(9), 
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;		None
  6958 ;; Return value:  Size  Location     Type
  6959 ;;                  2   15[COMRAM] PTR unsigned char 
  6960 ;; Registers used:
  6961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6962 ;; Tracked objects:
  6963 ;;		On entry : 0/0
  6964 ;;		On exit  : 0/0
  6965 ;;		Unchanged: 0/0
  6966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6967 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;Total ram usage:        4 bytes
  6972 ;; Hardware stack levels used:    1
  6973 ;; Hardware stack levels required when called:    1
  6974 ;; This function calls:
  6975 ;;		_strchr
  6976 ;;		_strlen
  6977 ;;		_strncmp
  6978 ;; This function is called by:
  6979 ;;		_EUSART1_Receive_ISR
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           	psect	text47
  6984  000D42                     __ptext47:
  6985                           	opt stack 0
  6986  000D42                     _strstr:
  6987                           	opt stack 22
  6988                           
  6989                           ;incstack = 0
  6990  000D42  D032               	goto	i2l2577
  6991  000D44                     i2l2569:
  6992  000D44  C010  F007         	movff	strstr@s1,strncmp@s1
  6993  000D48  C011  F008         	movff	strstr@s1+1,strncmp@s1+1
  6994  000D4C  C012  F009         	movff	strstr@s2,strncmp@s2
  6995  000D50  C013  F00A         	movff	strstr@s2+1,strncmp@s2+1
  6996  000D54  C012  F001         	movff	strstr@s2,strlen@s
  6997  000D58  C013  F002         	movff	strstr@s2+1,strlen@s+1
  6998  000D5C  EC6C  F008         	call	_strlen	;wreg free
  6999  000D60  C001  F00B         	movff	?_strlen,strncmp@len
  7000  000D64  C002  F00C         	movff	?_strlen+1,strncmp@len+1
  7001  000D68  ECE4  F006         	call	_strncmp	;wreg free
  7002  000D6C  5007               	movf	?_strncmp,w,c
  7003  000D6E  1008               	iorwf	?_strncmp+1,w,c
  7004  000D70  A4D8               	btfss	status,2,c
  7005  000D72  D005               	goto	i2l2575
  7006  000D74  C010  F010         	movff	strstr@s1,?_strstr
  7007  000D78  C011  F011         	movff	strstr@s1+1,?_strstr+1
  7008  000D7C  0012               	return	
  7009  000D7E                     i2l2575:
  7010  000D7E  0E01               	movlw	1
  7011  000D80  2410               	addwf	strstr@s1,w,c
  7012  000D82  6E01               	movwf	strchr@ptr,c
  7013  000D84  0E00               	movlw	0
  7014  000D86  2011               	addwfc	strstr@s1+1,w,c
  7015  000D88  6E02               	movwf	strchr@ptr+1,c
  7016  000D8A  C012  FFF6         	movff	strstr@s2,tblptrl
  7017  000D8E  C013  FFF7         	movff	strstr@s2+1,tblptrh
  7018  000D92                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7019  000D92  6AF8               	clrf	tblptru,c
  7020  000D94                     	endif
  7021  000D94                     	if	0	;tblptru may be non-zero
  7022  000D94                     	endif
  7023  000D94  0008               	tblrd		*
  7024  000D96  50F5               	movf	tablat,w,c
  7025  000D98  6E03               	movwf	strchr@chr,c
  7026  000D9A  6A04               	clrf	strchr@chr+1,c
  7027  000D9C  ECA9  F008         	call	_strchr	;wreg free
  7028  000DA0  C001  F010         	movff	?_strchr,strstr@s1
  7029  000DA4  C002  F011         	movff	?_strchr+1,strstr@s1+1
  7030  000DA8                     i2l2577:
  7031  000DA8  5010               	movf	strstr@s1,w,c
  7032  000DAA  1011               	iorwf	strstr@s1+1,w,c
  7033  000DAC  B4D8               	btfsc	status,2,c
  7034  000DAE  D007               	goto	i2l2581
  7035  000DB0  C010  FFD9         	movff	strstr@s1,fsr2l
  7036  000DB4  C011  FFDA         	movff	strstr@s1+1,fsr2h
  7037  000DB8  50DF               	movf	indf2,w,c
  7038  000DBA  A4D8               	btfss	status,2,c
  7039  000DBC  D7C3               	goto	i2l2569
  7040  000DBE                     i2l2581:
  7041  000DBE  0E00               	movlw	0
  7042  000DC0  6E10               	movwf	?_strstr,c
  7043  000DC2  0E00               	movlw	0
  7044  000DC4  6E11               	movwf	?_strstr+1,c
  7045  000DC6  0012               	return	
  7046  000DC8                     __end_of_strstr:
  7047                           	opt stack 0
  7048                           pclatu	equ	0xFFB
  7049                           pclath	equ	0xFFA
  7050                           tblptru	equ	0xFF8
  7051                           tblptrh	equ	0xFF7
  7052                           tblptrl	equ	0xFF6
  7053                           tablat	equ	0xFF5
  7054                           prodh	equ	0xFF4
  7055                           prodl	equ	0xFF3
  7056                           intcon	equ	0xFF2
  7057                           intcon2	equ	0xFF1
  7058                           postinc0	equ	0xFEE
  7059                           fsr0h	equ	0xFEA
  7060                           fsr0l	equ	0xFE9
  7061                           wreg	equ	0xFE8
  7062                           indf1	equ	0xFE7
  7063                           postdec1	equ	0xFE5
  7064                           fsr1h	equ	0xFE2
  7065                           fsr1l	equ	0xFE1
  7066                           indf2	equ	0xFDF
  7067                           postinc2	equ	0xFDE
  7068                           postdec2	equ	0xFDD
  7069                           fsr2h	equ	0xFDA
  7070                           fsr2l	equ	0xFD9
  7071                           status	equ	0xFD8
  7072                           
  7073 ;; *************** function _strncmp *****************
  7074 ;; Defined at:
  7075 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strncmp.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;  s1              2    6[COMRAM] PTR const unsigned char 
  7078 ;;		 -> NULL(0), line(128), 
  7079 ;;  s2              2    8[COMRAM] PTR const unsigned char 
  7080 ;;		 -> STR_2(9), 
  7081 ;;  len             2   10[COMRAM] unsigned int 
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;		None
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  2    6[COMRAM] int 
  7086 ;; Registers used:
  7087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7093 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7095 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7096 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;Total ram usage:        9 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; This function calls:
  7100 ;;		Nothing
  7101 ;; This function is called by:
  7102 ;;		_strstr
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           	psect	text48
  7107  000DC8                     __ptext48:
  7108                           	opt stack 0
  7109  000DC8                     _strncmp:
  7110                           	opt stack 22
  7111                           
  7112                           ;incstack = 0
  7113  000DC8  D035               	goto	i2l2453
  7114  000DCA                     i2l2443:
  7115  000DCA  C007  FFD9         	movff	strncmp@s1,fsr2l
  7116  000DCE  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  7117  000DD2  50DF               	movf	indf2,w,c
  7118  000DD4  B4D8               	btfsc	status,2,c
  7119  000DD6  D010               	goto	i2l2447
  7120  000DD8  C007  FFD9         	movff	strncmp@s1,fsr2l
  7121  000DDC  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  7122  000DE0  50DF               	movf	indf2,w,c
  7123  000DE2  6E0D               	movwf	??_strncmp& (0+255),c
  7124  000DE4  C009  FFF6         	movff	strncmp@s2,tblptrl
  7125  000DE8  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  7126  000DEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7127  000DEC  6AF8               	clrf	tblptru,c
  7128  000DEE                     	endif
  7129  000DEE                     	if	0	;tblptru may be non-zero
  7130  000DEE                     	endif
  7131  000DEE  0008               	tblrd		*
  7132  000DF0  50F5               	movf	tablat,w,c
  7133  000DF2  180D               	xorwf	??_strncmp,w,c
  7134  000DF4  B4D8               	btfsc	status,2,c
  7135  000DF6  D01A               	goto	i2l2451
  7136  000DF8                     i2l2447:
  7137  000DF8  C009  FFF6         	movff	strncmp@s2,tblptrl
  7138  000DFC  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  7139  000E00                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7140  000E00  6AF8               	clrf	tblptru,c
  7141  000E02                     	endif
  7142  000E02                     	if	0	;tblptru may be non-zero
  7143  000E02                     	endif
  7144  000E02  0008               	tblrd		*
  7145  000E04  50F5               	movf	tablat,w,c
  7146  000E06  6E0D               	movwf	??_strncmp& (0+255),c
  7147  000E08  6A0E               	clrf	(??_strncmp+1)& (0+255),c
  7148  000E0A  1E0D               	comf	??_strncmp,f,c
  7149  000E0C  1E0E               	comf	??_strncmp+1,f,c
  7150  000E0E  4A0D               	infsnz	??_strncmp,f,c
  7151  000E10  2A0E               	incf	??_strncmp+1,f,c
  7152  000E12  C007  FFD9         	movff	strncmp@s1,fsr2l
  7153  000E16  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  7154  000E1A  50DF               	movf	indf2,w,c
  7155  000E1C  6E0F               	movwf	(??_strncmp+2)& (0+255),c
  7156  000E1E  500F               	movf	??_strncmp+2,w,c
  7157  000E20  240D               	addwf	??_strncmp,w,c
  7158  000E22  6E07               	movwf	?_strncmp,c
  7159  000E24  0E00               	movlw	0
  7160  000E26  200E               	addwfc	??_strncmp+1,w,c
  7161  000E28  6E08               	movwf	?_strncmp+1,c
  7162  000E2A  0012               	return	
  7163  000E2C                     i2l2451:
  7164  000E2C  4A07               	infsnz	strncmp@s1,f,c
  7165  000E2E  2A08               	incf	strncmp@s1+1,f,c
  7166  000E30  4A09               	infsnz	strncmp@s2,f,c
  7167  000E32  2A0A               	incf	strncmp@s2+1,f,c
  7168  000E34                     i2l2453:
  7169  000E34  060B               	decf	strncmp@len,f,c
  7170  000E36  A0D8               	btfss	status,0,c
  7171  000E38  060C               	decf	strncmp@len+1,f,c
  7172  000E3A  280B               	incf	strncmp@len,w,c
  7173  000E3C  E1C6               	bnz	i2l2443
  7174  000E3E  280C               	incf	strncmp@len+1,w,c
  7175  000E40  A4D8               	btfss	status,2,c
  7176  000E42  D7C3               	goto	i2l2443
  7177  000E44  0E00               	movlw	0
  7178  000E46  6E08               	movwf	?_strncmp+1,c
  7179  000E48  0E00               	movlw	0
  7180  000E4A  6E07               	movwf	?_strncmp,c
  7181  000E4C  0012               	return	
  7182  000E4E                     __end_of_strncmp:
  7183                           	opt stack 0
  7184                           pclatu	equ	0xFFB
  7185                           pclath	equ	0xFFA
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodh	equ	0xFF4
  7191                           prodl	equ	0xFF3
  7192                           intcon	equ	0xFF2
  7193                           intcon2	equ	0xFF1
  7194                           postinc0	equ	0xFEE
  7195                           fsr0h	equ	0xFEA
  7196                           fsr0l	equ	0xFE9
  7197                           wreg	equ	0xFE8
  7198                           indf1	equ	0xFE7
  7199                           postdec1	equ	0xFE5
  7200                           fsr1h	equ	0xFE2
  7201                           fsr1l	equ	0xFE1
  7202                           indf2	equ	0xFDF
  7203                           postinc2	equ	0xFDE
  7204                           postdec2	equ	0xFDD
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8
  7208                           
  7209 ;; *************** function _strlen *****************
  7210 ;; Defined at:
  7211 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strlen.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  s               2    0[COMRAM] PTR const unsigned char 
  7214 ;;		 -> STR_2(9), 
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  7217 ;;		 -> STR_2(9), 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  2    0[COMRAM] unsigned int 
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7227 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;Total ram usage:        6 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; This function calls:
  7234 ;;		Nothing
  7235 ;; This function is called by:
  7236 ;;		_strstr
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           	psect	text49
  7241  0010D8                     __ptext49:
  7242                           	opt stack 0
  7243  0010D8                     _strlen:
  7244                           	opt stack 22
  7245                           
  7246                           ;incstack = 0
  7247  0010D8  C001  F005         	movff	strlen@s,strlen@cp
  7248  0010DC  C002  F006         	movff	strlen@s+1,strlen@cp+1
  7249  0010E0  D002               	goto	i2l2435
  7250  0010E2                     i2l2433:
  7251  0010E2  4A05               	infsnz	strlen@cp,f,c
  7252  0010E4  2A06               	incf	strlen@cp+1,f,c
  7253  0010E6                     i2l2435:
  7254  0010E6  C005  FFF6         	movff	strlen@cp,tblptrl
  7255  0010EA  C006  FFF7         	movff	strlen@cp+1,tblptrh
  7256  0010EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7257  0010EE  6AF8               	clrf	tblptru,c
  7258  0010F0                     	endif
  7259  0010F0                     	if	0	;tblptru may be non-zero
  7260  0010F0                     	endif
  7261  0010F0  0008               	tblrd		*
  7262  0010F2  50F5               	movf	tablat,w,c
  7263  0010F4  0900               	iorlw	0
  7264  0010F6  A4D8               	btfss	status,2,c
  7265  0010F8  D7F4               	goto	i2l2433
  7266  0010FA  C001  F003         	movff	strlen@s,??_strlen
  7267  0010FE  C002  F004         	movff	strlen@s+1,??_strlen+1
  7268  001102  1E03               	comf	??_strlen,f,c
  7269  001104  1E04               	comf	??_strlen+1,f,c
  7270  001106  4A03               	infsnz	??_strlen,f,c
  7271  001108  2A04               	incf	??_strlen+1,f,c
  7272  00110A  5005               	movf	strlen@cp,w,c
  7273  00110C  2403               	addwf	??_strlen,w,c
  7274  00110E  6E01               	movwf	?_strlen,c
  7275  001110  5006               	movf	strlen@cp+1,w,c
  7276  001112  2004               	addwfc	??_strlen+1,w,c
  7277  001114  6E02               	movwf	?_strlen+1,c
  7278  001116  0012               	return	
  7279  001118                     __end_of_strlen:
  7280                           	opt stack 0
  7281                           pclatu	equ	0xFFB
  7282                           pclath	equ	0xFFA
  7283                           tblptru	equ	0xFF8
  7284                           tblptrh	equ	0xFF7
  7285                           tblptrl	equ	0xFF6
  7286                           tablat	equ	0xFF5
  7287                           prodh	equ	0xFF4
  7288                           prodl	equ	0xFF3
  7289                           intcon	equ	0xFF2
  7290                           intcon2	equ	0xFF1
  7291                           postinc0	equ	0xFEE
  7292                           fsr0h	equ	0xFEA
  7293                           fsr0l	equ	0xFE9
  7294                           wreg	equ	0xFE8
  7295                           indf1	equ	0xFE7
  7296                           postdec1	equ	0xFE5
  7297                           fsr1h	equ	0xFE2
  7298                           fsr1l	equ	0xFE1
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           fsr2h	equ	0xFDA
  7303                           fsr2l	equ	0xFD9
  7304                           status	equ	0xFD8
  7305                           
  7306 ;; *************** function _strchr *****************
  7307 ;; Defined at:
  7308 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strchr.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  ptr             2    0[COMRAM] PTR const unsigned char 
  7311 ;;		 -> NULL(0), line(128), 
  7312 ;;  chr             2    2[COMRAM] int 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  2    0[COMRAM] PTR unsigned char 
  7317 ;; Registers used:
  7318 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;Total ram usage:        5 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; This function calls:
  7331 ;;		Nothing
  7332 ;; This function is called by:
  7333 ;;		_strstr
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337                           	psect	text50
  7338  001152                     __ptext50:
  7339                           	opt stack 0
  7340  001152                     _strchr:
  7341                           	opt stack 22
  7342  001152  C001  FFD9         	movff	strchr@ptr,fsr2l
  7343  001156  C002  FFDA         	movff	strchr@ptr+1,fsr2h
  7344  00115A  5003               	movf	strchr@chr,w,c
  7345  00115C  18DE               	xorwf	postinc2,w,c
  7346  00115E  A4D8               	btfss	status,2,c
  7347  001160  D005               	goto	i2l2465
  7348  001162  C001  F001         	movff	strchr@ptr,?_strchr
  7349  001166  C002  F002         	movff	strchr@ptr+1,?_strchr+1
  7350  00116A  0012               	return	
  7351  00116C                     i2l2465:
  7352  00116C  C001  FFD9         	movff	strchr@ptr,fsr2l
  7353  001170  C002  FFDA         	movff	strchr@ptr+1,fsr2h
  7354  001174  4A01               	infsnz	strchr@ptr,f,c
  7355  001176  2A02               	incf	strchr@ptr+1,f,c
  7356  001178  50DF               	movf	indf2,w,c
  7357  00117A  A4D8               	btfss	status,2,c
  7358  00117C  D7EA               	goto	i2l2459
  7359  00117E  0E00               	movlw	0
  7360  001180  6E01               	movwf	?_strchr,c
  7361  001182  0E00               	movlw	0
  7362  001184  6E02               	movwf	?_strchr+1,c
  7363  001186  0012               	return	
  7364  001188                     __end_of_strchr:
  7365                           	opt stack 0
  7366                           pclatu	equ	0xFFB
  7367                           pclath	equ	0xFFA
  7368                           tblptru	equ	0xFF8
  7369                           tblptrh	equ	0xFF7
  7370                           tblptrl	equ	0xFF6
  7371                           tablat	equ	0xFF5
  7372                           prodh	equ	0xFF4
  7373                           prodl	equ	0xFF3
  7374                           intcon	equ	0xFF2
  7375                           intcon2	equ	0xFF1
  7376                           postinc0	equ	0xFEE
  7377                           fsr0h	equ	0xFEA
  7378                           fsr0l	equ	0xFE9
  7379                           wreg	equ	0xFE8
  7380                           indf1	equ	0xFE7
  7381                           postdec1	equ	0xFE5
  7382                           fsr1h	equ	0xFE2
  7383                           fsr1l	equ	0xFE1
  7384                           indf2	equ	0xFDF
  7385                           postinc2	equ	0xFDE
  7386                           postdec2	equ	0xFDD
  7387                           fsr2h	equ	0xFDA
  7388                           fsr2l	equ	0xFD9
  7389                           status	equ	0xFD8
  7390                           
  7391 ;; *************** function _strcmp *****************
  7392 ;; Defined at:
  7393 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strcmp.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  7396 ;;		 -> STR_1(10), line(128), 
  7397 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  7398 ;;		 -> STR_4(3), STR_3(12), line(128), 
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;  r               1    5[COMRAM] char 
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  2    0[COMRAM] int 
  7403 ;; Registers used:
  7404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7410 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;Total ram usage:        6 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; This function calls:
  7417 ;;		Nothing
  7418 ;; This function is called by:
  7419 ;;		_EUSART1_Receive_ISR
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           	psect	text51
  7424  000CB2                     __ptext51:
  7425                           	opt stack 0
  7426  000CB2                     _strcmp:
  7427                           	opt stack 23
  7428                           
  7429                           ;incstack = 0
  7430  000CB2  D004               	goto	i2l2559
  7431  000CB4                     i2l2557:
  7432  000CB4  4A01               	infsnz	strcmp@s1,f,c
  7433  000CB6  2A02               	incf	strcmp@s1+1,f,c
  7434  000CB8  4A03               	infsnz	strcmp@s2,f,c
  7435  000CBA  2A04               	incf	strcmp@s2+1,f,c
  7436  000CBC                     i2l2559:
  7437  000CBC  C001  FFF6         	movff	strcmp@s1,tblptrl
  7438  000CC0  C002  FFF7         	movff	strcmp@s1+1,tblptrh
  7439  000CC4  0E00               	movlw	low (__mediumconst shr (0+16))
  7440  000CC6  6EF8               	movwf	tblptru,c
  7441  000CC8  0E0F               	movlw	(high __ramtop+-1)
  7442  000CCA  64F7               	cpfsgt	tblptrh,c
  7443  000CCC  D003               	bra	i2u187_47
  7444  000CCE  0008               	tblrd		*
  7445  000CD0  50F5               	movf	tablat,w,c
  7446  000CD2  D005               	bra	i2u187_40
  7447  000CD4                     i2u187_47:
  7448  000CD4  CFF6 FFE1          	movff	tblptrl,fsr1l
  7449  000CD8  CFF7 FFE2          	movff	tblptrh,fsr1h
  7450  000CDC  50E7               	movf	indf1,w,c
  7451  000CDE                     i2u187_40:
  7452  000CDE  6E05               	movwf	??_strcmp& (0+255),c
  7453  000CE0  C003  FFF6         	movff	strcmp@s2,tblptrl
  7454  000CE4  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  7455  000CE8  0E00               	movlw	low (__mediumconst shr (0+16))
  7456  000CEA  6EF8               	movwf	tblptru,c
  7457  000CEC  0E0F               	movlw	(high __ramtop+-1)
  7458  000CEE  64F7               	cpfsgt	tblptrh,c
  7459  000CF0  D003               	bra	i2u188_47
  7460  000CF2  0008               	tblrd		*
  7461  000CF4  50F5               	movf	tablat,w,c
  7462  000CF6  D005               	bra	i2u188_40
  7463  000CF8                     i2u188_47:
  7464  000CF8  CFF6 FFE1          	movff	tblptrl,fsr1l
  7465  000CFC  CFF7 FFE2          	movff	tblptrh,fsr1h
  7466  000D00  50E7               	movf	indf1,w,c
  7467  000D02                     i2u188_40:
  7468  000D02  0800               	sublw	0
  7469  000D04  2405               	addwf	??_strcmp,w,c
  7470  000D06  6E06               	movwf	strcmp@r,c
  7471  000D08  5006               	movf	strcmp@r,w,c
  7472  000D0A  A4D8               	btfss	status,2,c
  7473  000D0C  D014               	goto	i2l2563
  7474  000D0E  C001  FFF6         	movff	strcmp@s1,tblptrl
  7475  000D12  C002  FFF7         	movff	strcmp@s1+1,tblptrh
  7476  000D16  0E00               	movlw	low (__mediumconst shr (0+16))
  7477  000D18  6EF8               	movwf	tblptru,c
  7478  000D1A  0E0F               	movlw	(high __ramtop+-1)
  7479  000D1C  64F7               	cpfsgt	tblptrh,c
  7480  000D1E  D003               	bra	i2u190_47
  7481  000D20  0008               	tblrd		*
  7482  000D22  50F5               	movf	tablat,w,c
  7483  000D24  D005               	bra	i2u190_40
  7484  000D26                     i2u190_47:
  7485  000D26  CFF6 FFE1          	movff	tblptrl,fsr1l
  7486  000D2A  CFF7 FFE2          	movff	tblptrh,fsr1h
  7487  000D2E  50E7               	movf	indf1,w,c
  7488  000D30                     i2u190_40:
  7489  000D30  0900               	iorlw	0
  7490  000D32  A4D8               	btfss	status,2,c
  7491  000D34  D7BF               	goto	i2l2557
  7492  000D36                     i2l2563:
  7493  000D36  5006               	movf	strcmp@r,w,c
  7494  000D38  6E01               	movwf	?_strcmp,c
  7495  000D3A  6A02               	clrf	?_strcmp+1,c
  7496  000D3C  BE01               	btfsc	?_strcmp,7,c
  7497  000D3E  0602               	decf	?_strcmp+1,f,c
  7498  000D40  0012               	return	
  7499  000D42                     __end_of_strcmp:
  7500                           	opt stack 0
  7501                           pclatu	equ	0xFFB
  7502                           pclath	equ	0xFFA
  7503                           tblptru	equ	0xFF8
  7504                           tblptrh	equ	0xFF7
  7505                           tblptrl	equ	0xFF6
  7506                           tablat	equ	0xFF5
  7507                           prodh	equ	0xFF4
  7508                           prodl	equ	0xFF3
  7509                           intcon	equ	0xFF2
  7510                           intcon2	equ	0xFF1
  7511                           postinc0	equ	0xFEE
  7512                           fsr0h	equ	0xFEA
  7513                           fsr0l	equ	0xFE9
  7514                           wreg	equ	0xFE8
  7515                           indf1	equ	0xFE7
  7516                           postdec1	equ	0xFE5
  7517                           fsr1h	equ	0xFE2
  7518                           fsr1l	equ	0xFE1
  7519                           indf2	equ	0xFDF
  7520                           postinc2	equ	0xFDE
  7521                           postdec2	equ	0xFDD
  7522                           fsr2h	equ	0xFDA
  7523                           fsr2l	equ	0xFD9
  7524                           status	equ	0xFD8
  7525                           
  7526 ;; *************** function _EUSART1_Read *****************
  7527 ;; Defined at:
  7528 ;;		line 121 in file "mcc_generated_files/eusart1.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;		None
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;  readValue       1    0[COMRAM] unsigned char 
  7533 ;; Return value:  Size  Location     Type
  7534 ;;                  1    wreg      unsigned char 
  7535 ;; Registers used:
  7536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7537 ;; Tracked objects:
  7538 ;;		On entry : 0/0
  7539 ;;		On exit  : 0/0
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;Total ram usage:        1 bytes
  7547 ;; Hardware stack levels used:    1
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		_EUSART1_Receive_ISR
  7552 ;;		_getch
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text52
  7557  0011F0                     __ptext52:
  7558                           	opt stack 0
  7559  0011F0                     _EUSART1_Read:
  7560                           	opt stack 23
  7561                           
  7562                           ;eusart1.c: 123: uint8_t readValue = 0;
  7563                           
  7564                           ;incstack = 0
  7565  0011F0  0E00               	movlw	0
  7566  0011F2  6E01               	movwf	EUSART1_Read@readValue,c
  7567  0011F4                     i2l2537:
  7568  0011F4  502E               	movf	_eusart1RxCount,w,c	;volatile
  7569  0011F6  B4D8               	btfsc	status,2,c
  7570  0011F8  D7FD               	goto	i2l2537
  7571                           
  7572                           ;eusart1.c: 127: }
  7573                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7574  0011FA  9A9D               	bcf	3997,5,c	;volatile
  7575                           
  7576                           ;eusart1.c: 131: readValue = eusart1RxBuffer[eusart1RxTail++];
  7577  0011FC  5030               	movf	_eusart1RxTail,w,c
  7578  0011FE  0D01               	mullw	1
  7579  001200  0E00               	movlw	low _eusart1RxBuffer
  7580  001202  24F3               	addwf	prodl,w,c
  7581  001204  6ED9               	movwf	fsr2l,c
  7582  001206  0E02               	movlw	high _eusart1RxBuffer
  7583  001208  20F4               	addwfc	prodh,w,c
  7584  00120A  6EDA               	movwf	fsr2h,c
  7585  00120C  50DF               	movf	indf2,w,c
  7586  00120E  6E01               	movwf	EUSART1_Read@readValue,c
  7587  001210  2A30               	incf	_eusart1RxTail,f,c
  7588                           
  7589                           ;eusart1.c: 132: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7590  001212  0E7F               	movlw	127
  7591  001214  6430               	cpfsgt	_eusart1RxTail,c
  7592  001216  D002               	goto	i2l2547
  7593                           
  7594                           ;eusart1.c: 133: {
  7595                           ;eusart1.c: 134: eusart1RxTail = 0;
  7596  001218  0E00               	movlw	0
  7597  00121A  6E30               	movwf	_eusart1RxTail,c
  7598  00121C                     i2l2547:
  7599                           
  7600                           ;eusart1.c: 135: }
  7601                           ;eusart1.c: 136: eusart1RxCount--;
  7602  00121C  062E               	decf	_eusart1RxCount,f,c	;volatile
  7603                           
  7604                           ;eusart1.c: 137: PIE1bits.RC1IE = 1;
  7605  00121E  8A9D               	bsf	3997,5,c	;volatile
  7606                           
  7607                           ;eusart1.c: 139: return readValue;
  7608  001220  5001               	movf	EUSART1_Read@readValue,w,c
  7609  001222  0012               	return	
  7610  001224                     __end_of_EUSART1_Read:
  7611                           	opt stack 0
  7612                           pclatu	equ	0xFFB
  7613                           pclath	equ	0xFFA
  7614                           tblptru	equ	0xFF8
  7615                           tblptrh	equ	0xFF7
  7616                           tblptrl	equ	0xFF6
  7617                           tablat	equ	0xFF5
  7618                           prodh	equ	0xFF4
  7619                           prodl	equ	0xFF3
  7620                           intcon	equ	0xFF2
  7621                           intcon2	equ	0xFF1
  7622                           postinc0	equ	0xFEE
  7623                           fsr0h	equ	0xFEA
  7624                           fsr0l	equ	0xFE9
  7625                           wreg	equ	0xFE8
  7626                           indf1	equ	0xFE7
  7627                           postdec1	equ	0xFE5
  7628                           fsr1h	equ	0xFE2
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           postinc2	equ	0xFDE
  7632                           postdec2	equ	0xFDD
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           pclatu	equ	0xFFB
  7637                           pclath	equ	0xFFA
  7638                           tblptru	equ	0xFF8
  7639                           tblptrh	equ	0xFF7
  7640                           tblptrl	equ	0xFF6
  7641                           tablat	equ	0xFF5
  7642                           prodh	equ	0xFF4
  7643                           prodl	equ	0xFF3
  7644                           intcon	equ	0xFF2
  7645                           intcon2	equ	0xFF1
  7646                           postinc0	equ	0xFEE
  7647                           fsr0h	equ	0xFEA
  7648                           fsr0l	equ	0xFE9
  7649                           wreg	equ	0xFE8
  7650                           indf1	equ	0xFE7
  7651                           postdec1	equ	0xFE5
  7652                           fsr1h	equ	0xFE2
  7653                           fsr1l	equ	0xFE1
  7654                           indf2	equ	0xFDF
  7655                           postinc2	equ	0xFDE
  7656                           postdec2	equ	0xFDD
  7657                           fsr2h	equ	0xFDA
  7658                           fsr2l	equ	0xFD9
  7659                           status	equ	0xFD8
  7660                           
  7661                           	psect	rparam
  7662  0000                     pclatu	equ	0xFFB
  7663                           pclath	equ	0xFFA
  7664                           tblptru	equ	0xFF8
  7665                           tblptrh	equ	0xFF7
  7666                           tblptrl	equ	0xFF6
  7667                           tablat	equ	0xFF5
  7668                           prodh	equ	0xFF4
  7669                           prodl	equ	0xFF3
  7670                           intcon	equ	0xFF2
  7671                           intcon2	equ	0xFF1
  7672                           postinc0	equ	0xFEE
  7673                           fsr0h	equ	0xFEA
  7674                           fsr0l	equ	0xFE9
  7675                           wreg	equ	0xFE8
  7676                           indf1	equ	0xFE7
  7677                           postdec1	equ	0xFE5
  7678                           fsr1h	equ	0xFE2
  7679                           fsr1l	equ	0xFE1
  7680                           indf2	equ	0xFDF
  7681                           postinc2	equ	0xFDE
  7682                           postdec2	equ	0xFDD
  7683                           fsr2h	equ	0xFDA
  7684                           fsr2l	equ	0xFD9
  7685                           status	equ	0xFD8
  7686                           
  7687                           	psect	temp
  7688  00003B                     btemp:
  7689                           	opt stack 0
  7690  00003B                     	ds	1
  7691  0000                     int$flags	set	btemp
  7692                           pclatu	equ	0xFFB
  7693                           pclath	equ	0xFFA
  7694                           tblptru	equ	0xFF8
  7695                           tblptrh	equ	0xFF7
  7696                           tblptrl	equ	0xFF6
  7697                           tablat	equ	0xFF5
  7698                           prodh	equ	0xFF4
  7699                           prodl	equ	0xFF3
  7700                           intcon	equ	0xFF2
  7701                           intcon2	equ	0xFF1
  7702                           postinc0	equ	0xFEE
  7703                           fsr0h	equ	0xFEA
  7704                           fsr0l	equ	0xFE9
  7705                           wreg	equ	0xFE8
  7706                           indf1	equ	0xFE7
  7707                           postdec1	equ	0xFE5
  7708                           fsr1h	equ	0xFE2
  7709                           fsr1l	equ	0xFE1
  7710                           indf2	equ	0xFDF
  7711                           postinc2	equ	0xFDE
  7712                           postdec2	equ	0xFDD
  7713                           fsr2h	equ	0xFDA
  7714                           fsr2l	equ	0xFD9
  7715                           status	equ	0xFD8


Data Sizes:
    Strings     338
    Constant    18
    Data        4
    BSS         435
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      58
    BANK0           160     40      81
    BANK1           256      0     256
    BANK2           256      0     128
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 40
		 -> uuid(BANK0[40]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 128
		 -> line(BANK1[128]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> uuid(BANK0[40]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> uuid(BANK0[40]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_4(CODE[3]), STR_3(CODE[12]), line(BANK1[128]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_1(CODE[10]), line(BANK1[128]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_21(CODE[7]), uuid(BANK0[40]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_20(CODE[36]), STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), 
		 -> STR_16(CODE[19]), STR_15(CODE[19]), STR_14(CODE[19]), STR_13(CODE[12]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[15]), STR_9(CODE[15]), 
		 -> STR_8(CODE[15]), STR_7(CODE[14]), STR_6(CODE[12]), STR_5(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> uuid(BANK0[40]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 


Critical Paths under _main in COMRAM

    _main->_wait_5ms
    _InitSensor->_I2C_Write_Byte
    _InitRadio->_wait_5ms
    _wait_5ms->_rand
    _strtol->_isalpha
    _isalpha->_isupper
    _rand->___lmul
    _printf->___lwdiv
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    ___awmod->_rand

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Receive_ISR->_strstr
    _strstr->_strncmp
    _strncmp->_strlen

Critical Paths under _main in BANK0

    _main->_InitRadio
    _InitRadio->_printf
    _strtol->___lmul
    _srand->_strtol
    _rand->___lmul
    _getUUID->_printf
    _printf->___lwmod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   18087
                                             37 BANK0      3     3      0
                      _I2C_Read_Byte
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
                          _InitRadio
                         _InitSensor
                  _SYSTEM_Initialize
                             _printf
                               _rand
                          _read_line
                           _wait_5ms
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                   _EPWM1_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSensor                                           0     0      0      69
                           _I2C_Init
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       2     2      0      69
                                             36 COMRAM     2     2      0
                      _I2C_SCL_CLEAR
                        _I2C_SCL_SET
                      _I2C_SDA_CLEAR
                     _I2C_SDA_IN_SET
                    _I2C_SDA_OUT_SET
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
                        _I2C_SCL_SET
                    _I2C_SDA_OUT_SET
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
                      _I2C_SCL_CLEAR
                        _I2C_SCL_SET
                      _I2C_SDA_CLEAR
                    _I2C_SDA_OUT_SET
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             1     1      0       0
                                             36 COMRAM     1     1      0
                    _I2C_SCL_OUT_SET
                        _I2C_SCL_SET
                    _I2C_SDA_OUT_SET
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (3) _I2C_SCL_OUT_SET                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitRadio                                            2     2      0   12493
                                             35 BANK0      2     2      0
                            ___awmod
                            _getUUID
                             _printf
                               _rand
                          _read_line
                              _srand
                             _strtol
                           _wait_5ms
 ---------------------------------------------------------------------------------
 (1) _wait_5ms                                             6     4      2     376
                                             42 COMRAM     1     1      0
                                              8 BANK0      5     3      2
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _strtol                                              16    10      6    2165
                                              8 BANK0     16    10      6
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _toupper                                              1     1      0      67
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isspace                                              3     3      0      90
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _isalpha                                              3     3      0     158
                                             39 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (4) _isupper                                              3     3      0      68
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      86
                                             24 BANK0      2     0      2
                             _strtol (ARG)
 ---------------------------------------------------------------------------------
 (1) _rand                                                 2     0      2     558
                                             40 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     558
                                             36 COMRAM     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) _getUUID                                              0     0      0    4445
                             _printf
                          _read_line
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     203
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _read_line                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    22     12    4242
                                              5 BANK0     30    18     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             37 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      44
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             36 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     587
                                              8 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _I2C_Read_Byte                                        3     3      0     116
                                             36 COMRAM     3     3      0
                      _I2C_SCL_CLEAR
                        _I2C_SCL_SET
                      _I2C_SDA_CLEAR
                     _I2C_SDA_IN_SET
                    _I2C_SDA_OUT_SET
                       _I2C_SDA_READ
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (3) _I2C_SDA_SET                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_SDA_READ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SDA_OUT_SET                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SDA_IN_SET                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SDA_CLEAR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SCL_SET                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SCL_CLEAR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1524
                                             22 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  3     3      0    1524
                                             19 COMRAM     3     3      0
                       _EUSART1_Read
                             _strcmp
                             _strstr
 ---------------------------------------------------------------------------------
 (8) _strstr                                               4     0      4    1001
                                             15 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (9) _strncmp                                              9     3      6     326
                                              6 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (9) _strlen                                               6     4      2     154
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (9) _strchr                                               5     1      4     216
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _strcmp                                               6     2      4     475
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Read                                         1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Read_Byte
     _I2C_SCL_CLEAR
     _I2C_SCL_SET
     _I2C_SDA_CLEAR
     _I2C_SDA_IN_SET
     _I2C_SDA_OUT_SET
     _I2C_SDA_READ
     _I2C_SDA_SET
   _I2C_Start
     _I2C_SCL_CLEAR
     _I2C_SCL_SET
     _I2C_SDA_CLEAR
     _I2C_SDA_OUT_SET
     _I2C_SDA_SET
   _I2C_Stop
     _I2C_SCL_SET
     _I2C_SDA_OUT_SET
     _I2C_SDA_SET
   _I2C_Write_Byte
     _I2C_SCL_CLEAR
     _I2C_SCL_SET
     _I2C_SDA_CLEAR
     _I2C_SDA_IN_SET
     _I2C_SDA_OUT_SET
     _I2C_SDA_SET
   _InitRadio
     ___awmod
       _rand (ARG)
         ___lmul
     _getUUID
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART1_Write
       _read_line
       _strcpy
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART1_Write
     _rand
       ___lmul
     _read_line
     _srand
       _strtol (ARG)
         ___lmul
         _isalpha
           _isupper
         _isdigit
         _isspace
         _toupper
     _strtol
       ___lmul
       _isalpha
         _isupper
       _isdigit
       _isspace
       _toupper
     _wait_5ms
       _rand (ARG)
         ___lmul
   _InitSensor
     _I2C_Init
       _I2C_SCL_OUT_SET
       _I2C_SCL_SET
       _I2C_SDA_OUT_SET
       _I2C_SDA_SET
     _I2C_Start
       _I2C_SCL_CLEAR
       _I2C_SCL_SET
       _I2C_SDA_CLEAR
       _I2C_SDA_OUT_SET
       _I2C_SDA_SET
     _I2C_Stop
       _I2C_SCL_SET
       _I2C_SDA_OUT_SET
       _I2C_SDA_SET
     _I2C_Write_Byte
       _I2C_SCL_CLEAR
       _I2C_SCL_SET
       _I2C_SDA_CLEAR
       _I2C_SDA_IN_SET
       _I2C_SDA_OUT_SET
       _I2C_SDA_SET
   _SYSTEM_Initialize
     _EPWM1_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART1_Write
   _rand
     ___lmul
   _read_line
   _wait_5ms
     _rand (ARG)
       ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Read
     _strcmp
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      80       9       50.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      51       5       50.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      3A       1       61.7%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     20B      12        0.0%
DATA                 0      0     20B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Mon Mar 21 00:23:04 2016

               __size_of_I2C_SCL_SET 0004             _eusart1TxBufferRemaining 003A  
                 __size_of_I2C_Start 002E                  ___wmul@multiplicand 0027  
                  I2C_Write_Byte@byt 0025                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l110 112A  
                                l402 02E2                                  l284 10AE  
                                l356 0E60                                  l861 108A  
                                l871 0FE4                         __CFG_CPB$OFF 000000  
                                _PR2 000FBB                         __CFG_CPD$OFF 000000  
                                _inc 0060                                  _val 0035  
                       ___awmod@sign 0096                      _TMR2_Initialize 143E  
           __size_of_I2C_SCL_OUT_SET 0004                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                               l1073 07CA                                 l3101 028A  
                               l3041 0FD6                                 l3033 0FA0  
                               l2145 111A                                 l3201 056A  
                               l3121 0336                                 l3105 02A2  
                               l2233 146C                                 l3035 0FAC  
                               l2171 1408                                 l3123 033C  
                               l3051 00BA                                 l3203 0576  
                               l2403 125C                                 l3211 0EEC  
                               l2227 13EA                                 l3037 0FB2  
                               l2157 114C                                 l3117 031A  
                               l3053 00CC                                 l2405 1264  
                               l2191 1064                                 l2159 114E  
                               l3135 0378                                 l3151 03BA  
                               l3071 0184                                 l3063 010A  
                               l3047 00A6                                 l3207 0ECE  
                               l3321 0B92                                 l3137 037E  
                               l3153 03CC                                 l3081 01BC  
                               l3073 018A                                 l3057 00D6  
                               l2505 143A                                 l3241 05E0  
                               l3217 109A                                 l3331 0BC2  
                               l2187 1058                                 l3171 044A  
                               l3163 0426                                 l3091 0234  
                               l3083 01C8                                 l3243 05E8  
                               l3227 0596                                 l3333 0BC8  
                               l3341 0BFA                                 l3325 0BA2  
                               l2189 1060                                 l3165 0430  
                               l3093 0240                                 l3085 01CE  
                               l3245 05F2                                 l3405 0ACC  
                               l2199 1080                                 l3191 04F8  
                               l3183 048C                                 l3159 03EE  
                               l3095 0246                                 l3263 064E  
                               l2711 0E70                                 l2703 0E58  
                               l3345 0C0E                                 l3337 0BEC  
                               l3329 0BB6                                 l3177 0466  
                               l3097 025E                                 l2481 1348  
                               l3281 06B6                                 l3273 0684  
                               l3249 0602                                 l3179 0472  
                               l3187 04A0                                 l2491 1314  
                               l3259 063A                                 l3189 04A6  
                               l3197 0550                                 l3285 06C8  
                               l3277 069A                                 l3269 066E  
                               l3199 0562                                 l2495 1322  
                               l2479 1344                                 l3295 075A  
                               l2727 0E9C                                 l2931 0C2E  
                               l3299 078A                                 l2943 0C52  
                               l2935 0C38                                 l2927 0C26  
                               l2945 0C54                                 l2955 0C6C  
                               l2965 0C92                                 STR_1 FFE5  
                               STR_2 FFEF                                 STR_3 FFD9  
                               STR_4 FFE2                                 STR_5 FF66  
                               STR_6 FFCD                                 STR_7 FFB3  
                               STR_8 FF86                                 STR_9 FFA4  
                               u2140 1480                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u3017 0E6A                                 u3107 123E  
                               u3027 0E76                                 u3117 124A  
                               u3037 0E82                                 u2510 0208  
                               u3207 0CA8                                 u3127 13AC  
                               u3047 0E8E                                 u3137 10A2  
                               u3057 0EA6                                 u3147 0C3E  
                               u3067 0EB2                                 u3157 0C56  
                               u2517 01FE                                 u3077 13C0  
                               u2550 0280                                 u3167 0C62  
                               u3087 13CC                                 u3177 0C80  
                               u3097 1232                                 u3187 0C8C  
                               u3197 0C9C                                 u2557 0276  
                               i2l20 004E                                 i2l24 0058  
                               _TMR2 000FBC                         _I2C_SDA_READ 1478  
                               _WPUB 000F61                        _EUSART1_Write 1118  
                               _main 0ABC                                 _line 0180  
                               _rand 0FEE                        ?_EUSART1_Read 0001  
                   __end_of_I2C_Init 13B6                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 003B  
                               _uuid 0061                        __CFG_BORV$190 000000  
                   __end_of_I2C_Stop 13D4                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0094                        __CFG_IESO$OFF 000000  
                       ___param_bank 000010       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 145E                                ?_main 0001  
                              ?_rand 0029                                STR_10 FF95  
                              STR_11 FF43                                STR_12 FF76  
                              STR_20 FEAD                                STR_21 FFF8  
                              STR_13 FFC1                                STR_22 FF55  
                              STR_14 FEE4                                STR_15 FED1  
                              STR_16 FEF7                                STR_17 FF0A  
                              STR_18 FF30                                STR_19 FF1D  
                    __end_of___awmod 0C18                                _T2CON 000FBA  
                              _LATC3 007C5B                                _LATC4 007C5C  
                     __CFG_DEBUG$OFF 000000                      __end_of___lwdiv 1094  
                    __end_of___lwmod 0FEE                                i2l122 12AA  
                      _I2C_SDA_CLEAR 14B0                                i2l138 0AAE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                      __end_of_getUUID 1302  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                  ___lmul@multiplicand 008D  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 1280  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        _I2C_SCL_CLEAR 14B8  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers FEA5               __size_of_I2C_Read_Byte 009A  
                              _index 002C                      __end_of_isalpha 132A  
                              _ready 0033                      __end_of_isdigit 1410  
                              _randx 0036                   __CFG_MCLRE$EXTMCLR 000000  
                              _srand 145E                                _putch 148E  
                    __end_of_isspace 1350                    __end_of_I2C_Start 1252  
                     ?_EUSART1_Write 0001                      __end_of_isupper 13F2  
                              tablat 000FF5                       ??_EUSART1_Read 0001  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                    _TMR2_StartTimer 149C                      __end_of_strncmp 0E4E  
                    __end_of_toupper 143E                       __CFG_PBADEN$ON 000000  
                    __initialization 0F2A                           _InitSensor 12AE  
         __end_of_EUSART1_Initialize 11F0                         __end_of_main 0B76  
                       __end_of_rand 1042                    ??_I2C_SDA_OUT_SET 0025  
            __end_of_TMR2_Initialize 1450          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 002C                       ?_I2C_SDA_CLEAR 0001  
                             ??_rand 002B                        __activetblptr 000003  
              ?_EUSART1_Transmit_ISR 0001                       ?_I2C_SCL_CLEAR 0001  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                             ?_srand 00A1                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                    ??_I2C_SCL_OUT_SET 0025  
                             i2l2433 10E2                               i2l2435 10E6  
                             i2l2451 0E2C                               i2l2443 0DCA  
                             i2l2453 0E34                       __CFG_WDTEN$OFF 000000  
                             i2l2447 0DF8                               i2l2537 11F4  
                             i2l2465 116C                               i2l2547 121C  
                             i2l2563 0D36                               i2l2459 1152  
                             i2l2557 0CB4                               i2l2581 0DBE  
                             i2l2813 09B4                               i2l2821 09EC  
                             i2l2805 09A2                               i2l2559 0CBC  
                             i2l2575 0D7E                               i2l2823 09F2  
                             i2l2569 0D44                               i2l2577 0DA8  
                             i2l2841 0A68                               i2l2833 0A34  
                             i2l2843 0A6C                               i2l2819 09E8  
                             i2l2847 0A8E                               i2l2791 12A6  
                             i2l2849 0AAA                               i2l2797 0982  
                             _RCREG1 000FAE                               _RCSTA1 000FAB  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                 __size_of_InitRadio 019E                               _TRISC3 007CA3  
                             _TRISC4 007CA4                               _TXREG1 000FAD  
                     _I2C_SDA_IN_SET 14AC                               _TXSTA1 000FAC  
                     __CFG_XINST$OFF 000000                         _CCPTMRS0bits 000F49  
                      _I2C_Read_Byte 0C18                               ___lmul 0EBE  
                             ___wmul 1350                       __CFG_STVREN$ON 000000  
                          ??___awmod 002B                            ??___lwdiv 0029  
                          ??___lwmod 002C                               clear_0 0F30  
                             clear_1 0F3E                               clear_2 0F50  
                             clear_3 0F5C                      ___awmod@divisor 0093  
                          ??_getUUID 002C                      ___awmod@counter 0095  
                             _printf 0098                               _strchr 1152  
                             _strcmp 0CB2                               _strcpy 1252  
                             _strlen 10D8                               _strtol 0596  
                             _strstr 0D42                     __end_of_wait_5ms 10D8  
                       __pdataCOMRAM 0036                            ??_isalpha 0028  
                          ??_isdigit 0025                            ?_I2C_Init 0001  
                          ?_I2C_Stop 0001                         __mediumconst FE9A  
                          ??_isspace 0025                               tblptrh 000FF7  
                          ??_isupper 0025                               tblptrl 000FF6  
                             tblptru 000FF8                               srand@x 00A1  
                    ??_EUSART1_Write 0025              __end_of_TMR2_StartTimer 14A0  
                    _eusart1RxBuffer 0200                            ??_strncmp 000D  
                          ??_toupper 0025        __size_of_INTERRUPT_Initialize 000A  
                    _eusart1TxBuffer 0100               __end_of_I2C_SDA_IN_SET 14B0  
                  _SYSTEM_Initialize 1410                           __accesstop 0060  
            __end_of__initialization 0F82                      I2C_Write_Byte@i 0026  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
                     ?_I2C_Read_Byte 0001                    ?_EPWM1_Initialize 0001  
                     __pcstackCOMRAM 0001                          ?_InitSensor 0001  
                ??_SYSTEM_Initialize 0025                   ??_EPWM1_Initialize 0025  
                      __end_of_srand 146C                      ??_I2C_SDA_CLEAR 0025  
                      __end_of_putch 1498                     ?_TMR2_Initialize 0001  
                  __end_of_InitRadio 097A                 __end_of_EUSART1_Read 1224  
                    ??_I2C_SCL_CLEAR 0025               ??_EUSART1_Transmit_ISR 0001  
                         ??_I2C_Init 0025                           ??_I2C_Stop 0025  
        __end_of_EUSART1_Receive_ISR 0ABC            __end_of_SYSTEM_Initialize 142A  
                            ??_srand 002B                              ??_putch 0026  
                      _eusart1RxHead 002F                        _eusart1TxHead 0031  
                      _eusart1RxTail 0030                           __pbssBANK0 0060  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                      _eusart1TxTail 0032                      ?_I2C_SDA_IN_SET 0001  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 003A  
                      ??_I2C_SDA_SET 0025                        ??_I2C_SCL_SET 0025  
                 __size_of_read_line 000C                   __CFG_CCP2MX$PORTC1 000000  
                            ?___lmul 0089                              ?___wmul 0025  
                 __CFG_CCP3MX$PORTB5 000000                              _CCP1CON 000FBD  
                            _ECCP1AS 000FB6              __size_of_I2C_Write_Byte 0070  
                     ___lmul@product 0025                              ?_printf 008E  
                            ?_strchr 0001                              ?_strcmp 0001  
                            ?_strcpy 0025                              ?_strlen 0001  
                            ?_strtol 0091                       I2C_Read_Byte@i 0027  
                            ?_strstr 0010                              _OSCCON2 000FD2  
                            _OSCTUNE 000F9B                              _PWM1CON 000FB7  
                            _SPBRGH1 000FB0                     ?_TMR2_StartTimer 0001  
                __size_of_InitSensor 002A                      _I2C_SDA_OUT_SET 14A8  
                          _I2C_Start 1224                      ??_I2C_Read_Byte 0025  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                            ?_wait_5ms 0091  
                __end_of_I2C_SDA_SET 14A8                      __size_of___lmul 006C  
                            ___awmod 0B76                      __size_of___wmul 0026  
                __end_of_I2C_SCL_SET 14B8                              ___lwdiv 1042  
                            ___lwmod 0F8C                              __pcinit 0F2A  
                            _getUUID 12D8                              __ramtop 1000  
                            __ptext0 0ABC                              __ptext1 1410  
                            __ptext2 143E                              __ptext3 149C  
                            __ptext4 1188                              __ptext5 1450  
                            __ptext6 1484                              __ptext7 11BC  
                            __ptext8 1376                              __ptext9 12AE  
                   I2C_Read_Byte@ack 0025                      __size_of_printf 04FE  
                   I2C_Read_Byte@val 0026                      __size_of_strchr 0036  
                    __size_of_strcmp 0090                      __size_of_strcpy 002E  
                    __size_of_strlen 0040                    __end_of_hexpowers FEAD  
                    _I2C_SCL_OUT_SET 14A0                      __size_of_strtol 0246  
                    __size_of_strstr 0086                              _dpowers FE9B  
              _OSCILLATOR_Initialize 1450                            _T2CONbits 000FBA  
                            _isalpha 1302                              _isdigit 13F2  
                   ___awmod@dividend 0091                    __end_of_read_line 1478  
                 _EUSART1_Initialize 11BC             ??_PIN_MANAGER_Initialize 0025  
                            _isspace 132A                              _isupper 13D4  
                            main@crc 00AE           __size_of_SYSTEM_Initialize 001A  
                            main@lsb 00B0                              main@msb 00AF  
                            _strncmp 0DC8                              _toupper 142A  
               end_of_initialization 0F82                  ?_EUSART1_Initialize 0001  
                         ?_I2C_Start 0001                           ??_wait_5ms 0093  
                            printf@c 00AB                              printf@f 008E  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
              __size_of_EUSART1_Read 0034                 ??_EUSART1_Initialize 0025  
                            strcmp@r 0006                              strlen@s 0001  
                            strtol@a 009C                              strtol@c 00A0  
                            strtol@s 0091                            _PORTCbits 000F82  
                       strtol@endptr 0093              __end_of_I2C_SDA_OUT_SET 14AC  
                  __size_of_I2C_Init 0020                    __size_of_I2C_Stop 001E  
                EUSART1_Write@txData 0025                          printf@width 00A9  
                       _EUSART1_Read 11F0                          _I2C_SDA_SET 14A4  
                        _I2C_SCL_SET 14B4                         ??_InitSensor 0027  
       __end_of_INTERRUPT_Initialize 148E              __end_of_I2C_SCL_OUT_SET 14A4  
                     _I2C_Write_Byte 0E4E                       __end_of___lmul 0F2A  
                     __end_of___wmul 1376                        __pidataCOMRAM 1498  
             ?_OSCILLATOR_Initialize 0001                       __end_of_printf 0596  
                     __end_of_strchr 1188                       __end_of_strcmp 0D42  
                     __end_of_strcpy 1280                       __end_of_strlen 1118  
                     __end_of_strtol 07DC                       __end_of_strstr 0DC8  
                start_initialization 0F2A            __size_of_EPWM1_Initialize 0020  
                          _InitRadio 07DC                     ??_I2C_SDA_IN_SET 0025  
    __size_of_PIN_MANAGER_Initialize 0034                          putch@txData 0026  
                 __end_of_InitSensor 12D8                __end_of_EUSART1_Write 1152  
                      ?_I2C_SDA_READ 0001                          ??_I2C_Start 0025  
             __end_of_I2C_Write_Byte 0EBE                             ??___lmul 0025  
                           ??___wmul 0029                             ??_printf 009A  
              __end_of_I2C_SDA_CLEAR 14B4                             ??_strchr 0005  
                           ??_strcmp 0005                             ??_strcpy 0029  
                           ??_strlen 0003                             ??_strtol 0097  
                     _eusart1RxCount 002E                             ??_strstr 0014  
                        __pbssCOMRAM 002C                __end_of_I2C_SCL_CLEAR 14BC  
      __size_of_EUSART1_Transmit_ISR 002E                        __pcstackBANK0 0089  
                         ?_InitRadio 0001                         _isalpha$1478 0029  
           __size_of_TMR2_Initialize 0012                     ?_I2C_SDA_OUT_SET 0001  
                       _isdigit$1236 0026                       ??_I2C_SDA_READ 0025  
       __size_of_EUSART1_Receive_ISR 0142                     ___lwdiv@dividend 0025  
             _PIN_MANAGER_Initialize 1188                      ?_I2C_Write_Byte 0001  
                          __pintcode 0008                        __pmediumconst FE9A  
                           ?___awmod 0091                    __size_of_wait_5ms 0044  
                   ?_I2C_SCL_OUT_SET 0001                             ?___lwdiv 0025  
                           ?___lwmod 0089                             ?_getUUID 0001  
       ??_INTERRUPT_InterruptManager 0017                     __CFG_PRICLKEN$ON 000000  
                           _BAUDCON1 000FB8                             ?_isalpha 0001  
                           ?_isdigit 0001                             _I2C_Init 1396  
                           _I2C_Stop 13B6                             ?_isspace 0001  
                           ?_isupper 0001             EUSART1_Receive_ISR@state 0015  
                          _hexpowers FEA5                     ___lwdiv@quotient 0029  
                           ?_strncmp 0007                            _read_line 146C  
                           ?_toupper 0001                       __size_of_srand 000E  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 1484  
                     ___wmul@product 0029                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D             __size_of_TMR2_StartTimer 0004  
__size_of_INTERRUPT_InterruptManager 008C                             i2u190_40 0D30  
                           i2u190_47 0D26                             _PIR1bits 000F9E  
                           i2u187_40 0CDE                             i2u187_47 0CD4  
                           i2u188_40 0D02                             i2u188_47 0CF8  
              __end_of_I2C_Read_Byte 0CB2                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                            _uartState 0034  
                           _PSTR1CON 000FB9                    ___wmul@multiplier 0025  
                         printf@flag 00A8                           printf@prec 009F  
                   _EPWM1_Initialize 1376                       InitRadio@delay 00AC  
                        ??_InitRadio 002C                         _isspace$1481 0026  
                  ___lmul@multiplier 0089                          _INTCON2bits 000FF1  
                         ?_read_line 0001                            copy_data0 0F76  
              ?_INTERRUPT_Initialize 0001                    ??_TMR2_Initialize 0025  
              EUSART1_Read@readValue 0001                         ?_I2C_SDA_SET 0001  
                       ?_I2C_SCL_SET 0001                             __Hrparam 0000  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTB5 000000              ??_OSCILLATOR_Initialize 0025  
               __end_of_I2C_SDA_READ 1484                     __size_of___awmod 00A2  
        __size_of_EUSART1_Initialize 0034                     __size_of___lwdiv 0052  
                   __size_of___lwmod 0062                     __size_of_getUUID 002A  
                         _ANSELCbits 000F3A                         _isupper$1484 0026  
                   __size_of_isalpha 0028                     __size_of_isdigit 001E  
                    ___lwdiv@divisor 0027                     __size_of_isspace 0026  
                    ___lwdiv@counter 002B                             __ptext10 0E4E  
                           __ptext11 13B6                             __ptext20 1302  
                           __ptext12 1224                             __ptext21 13D4  
                           __ptext13 1396                             __ptext30 1118  
                           __ptext22 145E                             __ptext14 14A0  
                           __ptext31 13F2                             __ptext23 0FEE  
                           __ptext15 07DC                             __ptext40 14AC  
                           __ptext32 1350                             __ptext24 0EBE  
                           __ptext16 1094                             __ptext41 14B0  
                           __ptext33 0F8C                             __ptext25 12D8  
                           __ptext17 0596                             __ptext50 1152  
                           __ptext42 14B4                             __ptext34 1042  
                           __ptext26 1252                             __ptext18 142A  
                           __ptext51 0CB2                             __ptext43 14B8  
                           __ptext35 0B76                             __ptext27 146C  
                           __ptext19 132A                             __ptext52 11F0  
                           __ptext36 0C18                             __ptext28 0098  
                           __ptext45 1280                             __ptext37 14A4  
                           __ptext29 148E                             __ptext46 097A  
                           __ptext38 1478                             __ptext47 0D42  
                           __ptext39 14A8                             __ptext48 0DC8  
                           __ptext49 10D8                     __size_of_isupper 001E  
                   __size_of_strncmp 0086                     __size_of_toupper 0014  
                         strcpy@from 0027                        __size_of_main 00BA  
                      __size_of_rand 0054                            wait_5ms@i 002B  
                          wait_5ms@j 0091                           strncmp@len 000B  
                           _wait_5ms 1094                             int$flags 003B  
                         strtol@base 0095                           strtol@sign 009B  
                  ??_TMR2_StartTimer 0025   __end_of_INTERRUPT_InterruptManager 0094  
         _INTERRUPT_InterruptManager 0008                            printf@idx 009E  
                          printf@len 00A4                            printf@val 00A6  
                _EUSART1_Receive_ISR 097A                           _INTCONbits 000FF2  
                           isalpha@c 002A                             isdigit@c 0027  
             ??_INTERRUPT_Initialize 0025                          ??_read_line 0025  
                           intlevel2 0000                 ?_EUSART1_Receive_ISR 0001  
                          strchr@chr 0003                     ___lwmod@dividend 0089  
                          strchr@ptr 0001                             isspace@c 0027  
            ?_PIN_MANAGER_Initialize 0001                     ??_I2C_Write_Byte 0025  
                         _RCSTA1bits 000FAB                             isupper@c 0027  
       __end_of_EUSART1_Transmit_ISR 12AE                            strncmp@s1 0007  
                          strncmp@s2 0009                             printf@ap 00A2  
                           printf@cp 00A0               __size_of_EUSART1_Write 003A  
                           strcmp@s1 0001                             strcmp@s2 0003  
                    ___lwmod@divisor 008B                             strcpy@cp 0029  
                           strlen@cp 0005                             strcpy@to 0025  
                    ___lwmod@counter 008D                             toupper@c 0025  
                  __CFG_T3CMX$PORTC0 000000                             strstr@s1 0010  
                           strstr@s2 0012                ??_EUSART1_Receive_ISR 0014  
     __end_of_PIN_MANAGER_Initialize 11BC                    __CFG_FOSC$INTIO67 000000  
            __size_of_I2C_SDA_IN_SET 0004             __size_of_I2C_SDA_OUT_SET 0004  
             __size_of_I2C_SDA_CLEAR 0004                __size_of_I2C_SDA_READ 000C  
           __end_of_EPWM1_Initialize 1396                 __size_of_I2C_SDA_SET 0004  
             __size_of_I2C_SCL_CLEAR 0004  
