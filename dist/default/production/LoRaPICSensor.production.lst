

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Mon Apr 11 09:34:53 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataCOMRAM
    74  0014AA                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _randx
    78  0014AA  0001               	dw	1
    79  0014AC  0000               	dw	0
    80                           
    81                           	psect	mediumconst
    82  00FE9A                     __pmediumconst:
    83                           	opt stack 0
    84  00FE9A  00                 	db	0
    85  00FE9B                     _dpowers:
    86                           	opt stack 0
    87  00FE9B  0001               	dw	1
    88  00FE9D  000A               	dw	10
    89  00FE9F  0064               	dw	100
    90  00FEA1  03E8               	dw	1000
    91  00FEA3  2710               	dw	10000
    92  00FEA5                     __end_of_dpowers:
    93                           	opt stack 0
    94  00FEA5                     _hexpowers:
    95                           	opt stack 0
    96  00FEA5  0001               	dw	1
    97  00FEA7  0010               	dw	16
    98  00FEA9  0100               	dw	256
    99  00FEAB  1000               	dw	4096
   100  00FEAD                     __end_of_hexpowers:
   101                           	opt stack 0
   102  00FEAD                     STR_20:
   103  00FEAD  72                 	db	114	;'r'
   104  00FEAE  61                 	db	97	;'a'
   105  00FEAF  64                 	db	100	;'d'
   106  00FEB0  69                 	db	105	;'i'
   107  00FEB1  6F                 	db	111	;'o'
   108  00FEB2  20                 	db	32
   109  00FEB3  74                 	db	116	;'t'
   110  00FEB4  78                 	db	120	;'x'
   111  00FEB5  20                 	db	32
   112  00FEB6  34                 	db	52	;'4'
   113  00FEB7  31                 	db	49	;'1'
   114  00FEB8  25                 	db	37
   115  00FEB9  73                 	db	115	;'s'
   116  00FEBA  25                 	db	37
   117  00FEBB  30                 	db	48	;'0'
   118  00FEBC  32                 	db	50	;'2'
   119  00FEBD  58                 	db	88	;'X'
   120  00FEBE  25                 	db	37
   121  00FEBF  30                 	db	48	;'0'
   122  00FEC0  32                 	db	50	;'2'
   123  00FEC1  58                 	db	88	;'X'
   124  00FEC2  25                 	db	37
   125  00FEC3  30                 	db	48	;'0'
   126  00FEC4  32                 	db	50	;'2'
   127  00FEC5  58                 	db	88	;'X'
   128  00FEC6  25                 	db	37
   129  00FEC7  30                 	db	48	;'0'
   130  00FEC8  32                 	db	50	;'2'
   131  00FEC9  58                 	db	88	;'X'
   132  00FECA  30                 	db	48	;'0'
   133  00FECB  30                 	db	48	;'0'
   134  00FECC  30                 	db	48	;'0'
   135  00FECD  30                 	db	48	;'0'
   136  00FECE  0D                 	db	13
   137  00FECF  0A                 	db	10
   138  00FED0  00                 	db	0
   139  00FED1                     STR_15:
   140  00FED1  72                 	db	114	;'r'
   141  00FED2  61                 	db	97	;'a'
   142  00FED3  64                 	db	100	;'d'
   143  00FED4  69                 	db	105	;'i'
   144  00FED5  6F                 	db	111	;'o'
   145  00FED6  20                 	db	32
   146  00FED7  73                 	db	115	;'s'
   147  00FED8  65                 	db	101	;'e'
   148  00FED9  74                 	db	116	;'t'
   149  00FEDA  20                 	db	32
   150  00FEDB  62                 	db	98	;'b'
   151  00FEDC  77                 	db	119	;'w'
   152  00FEDD  20                 	db	32
   153  00FEDE  35                 	db	53	;'5'
   154  00FEDF  30                 	db	48	;'0'
   155  00FEE0  30                 	db	48	;'0'
   156  00FEE1  0D                 	db	13
   157  00FEE2  0A                 	db	10
   158  00FEE3  00                 	db	0
   159  00FEE4                     STR_14:
   160  00FEE4  72                 	db	114	;'r'
   161  00FEE5  61                 	db	97	;'a'
   162  00FEE6  64                 	db	100	;'d'
   163  00FEE7  69                 	db	105	;'i'
   164  00FEE8  6F                 	db	111	;'o'
   165  00FEE9  20                 	db	32
   166  00FEEA  73                 	db	115	;'s'
   167  00FEEB  65                 	db	101	;'e'
   168  00FEEC  74                 	db	116	;'t'
   169  00FEED  20                 	db	32
   170  00FEEE  70                 	db	112	;'p'
   171  00FEEF  77                 	db	119	;'w'
   172  00FEF0  72                 	db	114	;'r'
   173  00FEF1  20                 	db	32
   174  00FEF2  2D                 	db	45
   175  00FEF3  32                 	db	50	;'2'
   176  00FEF4  0D                 	db	13
   177  00FEF5  0A                 	db	10
   178  00FEF6  00                 	db	0
   179  00FEF7                     STR_16:
   180  00FEF7  72                 	db	114	;'r'
   181  00FEF8  61                 	db	97	;'a'
   182  00FEF9  64                 	db	100	;'d'
   183  00FEFA  69                 	db	105	;'i'
   184  00FEFB  6F                 	db	111	;'o'
   185  00FEFC  20                 	db	32
   186  00FEFD  73                 	db	115	;'s'
   187  00FEFE  65                 	db	101	;'e'
   188  00FEFF  74                 	db	116	;'t'
   189  00FF00  20                 	db	32
   190  00FF01  73                 	db	115	;'s'
   191  00FF02  66                 	db	102	;'f'
   192  00FF03  20                 	db	32
   193  00FF04  73                 	db	115	;'s'
   194  00FF05  66                 	db	102	;'f'
   195  00FF06  37                 	db	55	;'7'
   196  00FF07  0D                 	db	13
   197  00FF08  0A                 	db	10
   198  00FF09  00                 	db	0
   199  00FF0A                     STR_17:
   200  00FF0A  72                 	db	114	;'r'
   201  00FF0B  61                 	db	97	;'a'
   202  00FF0C  64                 	db	100	;'d'
   203  00FF0D  69                 	db	105	;'i'
   204  00FF0E  6F                 	db	111	;'o'
   205  00FF0F  20                 	db	32
   206  00FF10  73                 	db	115	;'s'
   207  00FF11  65                 	db	101	;'e'
   208  00FF12  74                 	db	116	;'t'
   209  00FF13  20                 	db	32
   210  00FF14  63                 	db	99	;'c'
   211  00FF15  72                 	db	114	;'r'
   212  00FF16  20                 	db	32
   213  00FF17  34                 	db	52	;'4'
   214  00FF18  2F                 	db	47
   215  00FF19  38                 	db	56	;'8'
   216  00FF1A  0D                 	db	13
   217  00FF1B  0A                 	db	10
   218  00FF1C  00                 	db	0
   219  00FF1D                     STR_19:
   220  00FF1D  72                 	db	114	;'r'
   221  00FF1E  61                 	db	97	;'a'
   222  00FF1F  64                 	db	100	;'d'
   223  00FF20  69                 	db	105	;'i'
   224  00FF21  6F                 	db	111	;'o'
   225  00FF22  20                 	db	32
   226  00FF23  73                 	db	115	;'s'
   227  00FF24  65                 	db	101	;'e'
   228  00FF25  74                 	db	116	;'t'
   229  00FF26  20                 	db	32
   230  00FF27  77                 	db	119	;'w'
   231  00FF28  64                 	db	100	;'d'
   232  00FF29  74                 	db	116	;'t'
   233  00FF2A  20                 	db	32
   234  00FF2B  25                 	db	37
   235  00FF2C  64                 	db	100	;'d'
   236  00FF2D  0D                 	db	13
   237  00FF2E  0A                 	db	10
   238  00FF2F  00                 	db	0
   239  00FF30                     STR_18:
   240  00FF30  72                 	db	114	;'r'
   241  00FF31  61                 	db	97	;'a'
   242  00FF32  64                 	db	100	;'d'
   243  00FF33  69                 	db	105	;'i'
   244  00FF34  6F                 	db	111	;'o'
   245  00FF35  20                 	db	32
   246  00FF36  73                 	db	115	;'s'
   247  00FF37  65                 	db	101	;'e'
   248  00FF38  74                 	db	116	;'t'
   249  00FF39  20                 	db	32
   250  00FF3A  63                 	db	99	;'c'
   251  00FF3B  72                 	db	114	;'r'
   252  00FF3C  63                 	db	99	;'c'
   253  00FF3D  20                 	db	32
   254  00FF3E  6F                 	db	111	;'o'
   255  00FF3F  6E                 	db	110	;'n'
   256  00FF40  0D                 	db	13
   257  00FF41  0A                 	db	10
   258  00FF42  00                 	db	0
   259  00FF43                     STR_11:
   260  00FF43  72                 	db	114	;'r'
   261  00FF44  61                 	db	97	;'a'
   262  00FF45  64                 	db	100	;'d'
   263  00FF46  69                 	db	105	;'i'
   264  00FF47  6F                 	db	111	;'o'
   265  00FF48  20                 	db	32
   266  00FF49  67                 	db	103	;'g'
   267  00FF4A  65                 	db	101	;'e'
   268  00FF4B  74                 	db	116	;'t'
   269  00FF4C  20                 	db	32
   270  00FF4D  70                 	db	112	;'p'
   271  00FF4E  72                 	db	114	;'r'
   272  00FF4F  6C                 	db	108	;'l'
   273  00FF50  65                 	db	101	;'e'
   274  00FF51  6E                 	db	110	;'n'
   275  00FF52  0D                 	db	13
   276  00FF53  0A                 	db	10
   277  00FF54  00                 	db	0
   278  00FF55                     STR_22:
   279  00FF55  30                 	db	48	;'0'
   280  00FF56  31                 	db	49	;'1'
   281  00FF57  32                 	db	50	;'2'
   282  00FF58  33                 	db	51	;'3'
   283  00FF59  34                 	db	52	;'4'
   284  00FF5A  35                 	db	53	;'5'
   285  00FF5B  36                 	db	54	;'6'
   286  00FF5C  37                 	db	55	;'7'
   287  00FF5D  38                 	db	56	;'8'
   288  00FF5E  39                 	db	57	;'9'
   289  00FF5F  41                 	db	65	;'A'
   290  00FF60  42                 	db	66	;'B'
   291  00FF61  43                 	db	67	;'C'
   292  00FF62  44                 	db	68	;'D'
   293  00FF63  45                 	db	69	;'E'
   294  00FF64  46                 	db	70	;'F'
   295  00FF65  00                 	db	0
   296  00FF66                     STR_5:
   297  00FF66  73                 	db	115	;'s'
   298  00FF67  79                 	db	121	;'y'
   299  00FF68  73                 	db	115	;'s'
   300  00FF69  20                 	db	32
   301  00FF6A  67                 	db	103	;'g'
   302  00FF6B  65                 	db	101	;'e'
   303  00FF6C  74                 	db	116	;'t'
   304  00FF6D  20                 	db	32
   305  00FF6E  68                 	db	104	;'h'
   306  00FF6F  77                 	db	119	;'w'
   307  00FF70  65                 	db	101	;'e'
   308  00FF71  75                 	db	117	;'u'
   309  00FF72  69                 	db	105	;'i'
   310  00FF73  0D                 	db	13
   311  00FF74  0A                 	db	10
   312  00FF75  00                 	db	0
   313  00FF76                     STR_12:
   314  00FF76  72                 	db	114	;'r'
   315  00FF77  61                 	db	97	;'a'
   316  00FF78  64                 	db	100	;'d'
   317  00FF79  69                 	db	105	;'i'
   318  00FF7A  6F                 	db	111	;'o'
   319  00FF7B  20                 	db	32
   320  00FF7C  67                 	db	103	;'g'
   321  00FF7D  65                 	db	101	;'e'
   322  00FF7E  74                 	db	116	;'t'
   323  00FF7F  20                 	db	32
   324  00FF80  70                 	db	112	;'p'
   325  00FF81  77                 	db	119	;'w'
   326  00FF82  72                 	db	114	;'r'
   327  00FF83  0D                 	db	13
   328  00FF84  0A                 	db	10
   329  00FF85  00                 	db	0
   330  00FF86                     STR_8:
   331  00FF86  72                 	db	114	;'r'
   332  00FF87  61                 	db	97	;'a'
   333  00FF88  64                 	db	100	;'d'
   334  00FF89  69                 	db	105	;'i'
   335  00FF8A  6F                 	db	111	;'o'
   336  00FF8B  20                 	db	32
   337  00FF8C  67                 	db	103	;'g'
   338  00FF8D  65                 	db	101	;'e'
   339  00FF8E  74                 	db	116	;'t'
   340  00FF8F  20                 	db	32
   341  00FF90  73                 	db	115	;'s'
   342  00FF91  66                 	db	102	;'f'
   343  00FF92  0D                 	db	13
   344  00FF93  0A                 	db	10
   345  00FF94  00                 	db	0
   346  00FF95                     STR_10:
   347  00FF95  72                 	db	114	;'r'
   348  00FF96  61                 	db	97	;'a'
   349  00FF97  64                 	db	100	;'d'
   350  00FF98  69                 	db	105	;'i'
   351  00FF99  6F                 	db	111	;'o'
   352  00FF9A  20                 	db	32
   353  00FF9B  67                 	db	103	;'g'
   354  00FF9C  65                 	db	101	;'e'
   355  00FF9D  74                 	db	116	;'t'
   356  00FF9E  20                 	db	32
   357  00FF9F  63                 	db	99	;'c'
   358  00FFA0  72                 	db	114	;'r'
   359  00FFA1  0D                 	db	13
   360  00FFA2  0A                 	db	10
   361  00FFA3  00                 	db	0
   362  00FFA4                     STR_9:
   363  00FFA4  72                 	db	114	;'r'
   364  00FFA5  61                 	db	97	;'a'
   365  00FFA6  64                 	db	100	;'d'
   366  00FFA7  69                 	db	105	;'i'
   367  00FFA8  6F                 	db	111	;'o'
   368  00FFA9  20                 	db	32
   369  00FFAA  67                 	db	103	;'g'
   370  00FFAB  65                 	db	101	;'e'
   371  00FFAC  74                 	db	116	;'t'
   372  00FFAD  20                 	db	32
   373  00FFAE  62                 	db	98	;'b'
   374  00FFAF  77                 	db	119	;'w'
   375  00FFB0  0D                 	db	13
   376  00FFB1  0A                 	db	10
   377  00FFB2  00                 	db	0
   378  00FFB3                     STR_7:
   379  00FFB3  73                 	db	115	;'s'
   380  00FFB4  79                 	db	121	;'y'
   381  00FFB5  73                 	db	115	;'s'
   382  00FFB6  20                 	db	32
   383  00FFB7  67                 	db	103	;'g'
   384  00FFB8  65                 	db	101	;'e'
   385  00FFB9  74                 	db	116	;'t'
   386  00FFBA  20                 	db	32
   387  00FFBB  76                 	db	118	;'v'
   388  00FFBC  65                 	db	101	;'e'
   389  00FFBD  72                 	db	114	;'r'
   390  00FFBE  0D                 	db	13
   391  00FFBF  0A                 	db	10
   392  00FFC0  00                 	db	0
   393  00FFC1                     STR_13:
   394  00FFC1  6D                 	db	109	;'m'
   395  00FFC2  61                 	db	97	;'a'
   396  00FFC3  63                 	db	99	;'c'
   397  00FFC4  20                 	db	32
   398  00FFC5  70                 	db	112	;'p'
   399  00FFC6  61                 	db	97	;'a'
   400  00FFC7  75                 	db	117	;'u'
   401  00FFC8  73                 	db	115	;'s'
   402  00FFC9  65                 	db	101	;'e'
   403  00FFCA  0D                 	db	13
   404  00FFCB  0A                 	db	10
   405  00FFCC  00                 	db	0
   406  00FFCD                     STR_6:
   407  00FFCD  73                 	db	115	;'s'
   408  00FFCE  79                 	db	121	;'y'
   409  00FFCF  73                 	db	115	;'s'
   410  00FFD0  20                 	db	32
   411  00FFD1  72                 	db	114	;'r'
   412  00FFD2  65                 	db	101	;'e'
   413  00FFD3  73                 	db	115	;'s'
   414  00FFD4  65                 	db	101	;'e'
   415  00FFD5  74                 	db	116	;'t'
   416  00FFD6  0D                 	db	13
   417  00FFD7  0A                 	db	10
   418  00FFD8  00                 	db	0
   419  00FFD9                     STR_3:
   420  00FFD9  72                 	db	114	;'r'
   421  00FFDA  61                 	db	97	;'a'
   422  00FFDB  64                 	db	100	;'d'
   423  00FFDC  69                 	db	105	;'i'
   424  00FFDD  6F                 	db	111	;'o'
   425  00FFDE  5F                 	db	95	;'_'
   426  00FFDF  74                 	db	116	;'t'
   427  00FFE0  78                 	db	120	;'x'
   428  00FFE1  5F                 	db	95	;'_'
   429  00FFE2  6F                 	db	111	;'o'
   430  00FFE3  6B                 	db	107	;'k'
   431  00FFE4  00                 	db	0
   432  00FFE5                     STR_1:
   433  00FFE5  72                 	db	114	;'r'
   434  00FFE6  61                 	db	97	;'a'
   435  00FFE7  64                 	db	100	;'d'
   436  00FFE8  69                 	db	105	;'i'
   437  00FFE9  6F                 	db	111	;'o'
   438  00FFEA  5F                 	db	95	;'_'
   439  00FFEB  65                 	db	101	;'e'
   440  00FFEC  72                 	db	114	;'r'
   441  00FFED  72                 	db	114	;'r'
   442  00FFEE  00                 	db	0
   443  00FFEF                     STR_2:
   444  00FFEF  72                 	db	114	;'r'
   445  00FFF0  61                 	db	97	;'a'
   446  00FFF1  64                 	db	100	;'d'
   447  00FFF2  69                 	db	105	;'i'
   448  00FFF3  6F                 	db	111	;'o'
   449  00FFF4  5F                 	db	95	;'_'
   450  00FFF5  72                 	db	114	;'r'
   451  00FFF6  78                 	db	120	;'x'
   452  00FFF7  00                 	db	0
   453  00FFF8                     STR_21:
   454  00FFF8  28                 	db	40
   455  00FFF9  6E                 	db	110	;'n'
   456  00FFFA  75                 	db	117	;'u'
   457  00FFFB  6C                 	db	108	;'l'
   458  00FFFC  6C                 	db	108	;'l'
   459  00FFFD  29                 	db	41
   460  00FFFE  00                 	db	0
   461  0000                     
   462                           ; #config settings
   463  00FFFF  00                 	db	0	; dummy byte at the end
   464  0000                     
   465                           	psect	nvCOMRAM
   466  00003A                     __pnvCOMRAM:
   467                           	opt stack 0
   468  00003A                     _eusart1TxBufferRemaining:
   469                           	opt stack 0
   470  00003A                     	ds	1
   471  0000                     _ANSELA	set	3896
   472  0000                     _ANSELB	set	3897
   473  0000                     _ANSELC	set	3898
   474  0000                     _ANSELCbits	set	3898
   475  0000                     _CCPTMRS0bits	set	3913
   476  0000                     _BAUDCON1	set	4024
   477  0000                     _CCP1CON	set	4029
   478  0000                     _CCPR1H	set	4031
   479  0000                     _CCPR1L	set	4030
   480  0000                     _ECCP1AS	set	4022
   481  0000                     _INTCON2bits	set	4081
   482  0000                     _INTCONbits	set	4082
   483  0000                     _IPR1bits	set	3999
   484  0000                     _LATA	set	3977
   485  0000                     _LATB	set	3978
   486  0000                     _LATC	set	3979
   487  0000                     _OSCCON	set	4051
   488  0000                     _OSCCON2	set	4050
   489  0000                     _OSCTUNE	set	3995
   490  0000                     _PIE1bits	set	3997
   491  0000                     _PIR1bits	set	3998
   492  0000                     _PORTCbits	set	3970
   493  0000                     _PR2	set	4027
   494  0000                     _PSTR1CON	set	4025
   495  0000                     _PWM1CON	set	4023
   496  0000                     _RCONbits	set	4048
   497  0000                     _RCREG1	set	4014
   498  0000                     _RCSTA1	set	4011
   499  0000                     _RCSTA1bits	set	4011
   500  0000                     _SPBRG1	set	4015
   501  0000                     _SPBRGH1	set	4016
   502  0000                     _T2CON	set	4026
   503  0000                     _T2CONbits	set	4026
   504  0000                     _TMR2	set	4028
   505  0000                     _TRISA	set	3986
   506  0000                     _TRISB	set	3987
   507  0000                     _TRISC	set	3988
   508  0000                     _TXREG1	set	4013
   509  0000                     _TXSTA1	set	4012
   510  0000                     _WPUB	set	3937
   511  0000                     _LATC3	set	31835
   512  0000                     _LATC4	set	31836
   513  0000                     _TRISC3	set	31907
   514  0000                     _TRISC4	set	31908
   515                           
   516                           	psect	cinit
   517  000F3C                     __pcinit:
   518                           	opt stack 0
   519  000F3C                     start_initialization:
   520                           	opt stack 0
   521  000F3C                     __initialization:
   522                           	opt stack 0
   523                           
   524                           ; Clear objects allocated to BANK2 (128 bytes)
   525  000F3C  EE02  F000         	lfsr	0,__pbssBANK2
   526  000F40  0E80               	movlw	128
   527  000F42                     clear_0:
   528  000F42  6AEE               	clrf	postinc0,c
   529  000F44  06E8               	decf	wreg,f,c
   530  000F46  E1FD               	bnz	clear_0
   531                           
   532                           ; Clear objects allocated to BANK1 (256 bytes)
   533  000F48  EE01  F000         	lfsr	0,__pbssBANK1
   534  000F4C  EE11 F000          	lfsr	1,256
   535  000F50                     clear_1:
   536  000F50  6AEE               	clrf	postinc0,c
   537  000F52  50E5               	movf	postdec1,w,c
   538  000F54  50E1               	movf	fsr1l,w,c
   539  000F56  E1FC               	bnz	clear_1
   540  000F58  50E2               	movf	fsr1h,w,c
   541  000F5A  E1FA               	bnz	clear_1
   542                           
   543                           ; Clear objects allocated to BANK0 (41 bytes)
   544  000F5C  EE00  F060         	lfsr	0,__pbssBANK0
   545  000F60  0E29               	movlw	41
   546  000F62                     clear_2:
   547  000F62  6AEE               	clrf	postinc0,c
   548  000F64  06E8               	decf	wreg,f,c
   549  000F66  E1FD               	bnz	clear_2
   550                           
   551                           ; Clear objects allocated to COMRAM (10 bytes)
   552  000F68  EE00  F02C         	lfsr	0,__pbssCOMRAM
   553  000F6C  0E0A               	movlw	10
   554  000F6E                     clear_3:
   555  000F6E  6AEE               	clrf	postinc0,c
   556  000F70  06E8               	decf	wreg,f,c
   557  000F72  E1FD               	bnz	clear_3
   558                           
   559                           ; Initialize objects allocated to COMRAM (4 bytes)
   560                           ; load TBLPTR registers with __pidataCOMRAM
   561  000F74  0EAA               	movlw	low __pidataCOMRAM
   562  000F76  6EF6               	movwf	tblptrl,c
   563  000F78  0E14               	movlw	high __pidataCOMRAM
   564  000F7A  6EF7               	movwf	tblptrh,c
   565  000F7C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   566  000F7E  6EF8               	movwf	tblptru,c
   567  000F80  EE00  F036         	lfsr	0,__pdataCOMRAM
   568  000F84  EE10 F004          	lfsr	1,4
   569  000F88                     copy_data0:
   570  000F88  0009               	tblrd		*+
   571  000F8A  CFF5 FFEE          	movff	tablat,postinc0
   572  000F8E  50E5               	movf	postdec1,w,c
   573  000F90  50E1               	movf	fsr1l,w,c
   574  000F92  E1FA               	bnz	copy_data0
   575  000F94                     end_of_initialization:
   576                           	opt stack 0
   577  000F94                     __end_of__initialization:
   578                           	opt stack 0
   579  000F94  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   580  000F96  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   581  000F98  0100               	movlb	0
   582  000F9A  EF5E  F005         	goto	_main	;jump to C main() function
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1h	equ	0xFE2
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	bssCOMRAM
   594  00002C                     __pbssCOMRAM:
   595                           	opt stack 0
   596  00002C                     _index:
   597                           	opt stack 0
   598  00002C                     	ds	2
   599  00002E                     _eusart1RxCount:
   600                           	opt stack 0
   601  00002E                     	ds	1
   602  00002F                     _eusart1RxHead:
   603                           	opt stack 0
   604  00002F                     	ds	1
   605  000030                     _eusart1RxTail:
   606                           	opt stack 0
   607  000030                     	ds	1
   608  000031                     _eusart1TxHead:
   609                           	opt stack 0
   610  000031                     	ds	1
   611  000032                     _eusart1TxTail:
   612                           	opt stack 0
   613  000032                     	ds	1
   614  000033                     _ready:
   615                           	opt stack 0
   616  000033                     	ds	1
   617  000034                     _uartState:
   618                           	opt stack 0
   619  000034                     	ds	1
   620  000035                     _val:
   621                           	opt stack 0
   622  000035                     	ds	1
   623                           tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           postdec1	equ	0xFE5
   630                           fsr1h	equ	0xFE2
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	dataCOMRAM
   634  000036                     __pdataCOMRAM:
   635                           	opt stack 0
   636  000036                     _randx:
   637                           	opt stack 0
   638  000036                     	ds	4
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           postdec1	equ	0xFE5
   646                           fsr1h	equ	0xFE2
   647                           fsr1l	equ	0xFE1
   648                           
   649                           	psect	bssBANK0
   650  000060                     __pbssBANK0:
   651                           	opt stack 0
   652  000060                     _inc:
   653                           	opt stack 0
   654  000060                     	ds	1
   655  000061                     _uuid:
   656                           	opt stack 0
   657  000061                     	ds	40
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           postdec1	equ	0xFE5
   665                           fsr1h	equ	0xFE2
   666                           fsr1l	equ	0xFE1
   667                           
   668                           	psect	bssBANK1
   669  000100                     __pbssBANK1:
   670                           	opt stack 0
   671  000100                     _eusart1TxBuffer:
   672                           	opt stack 0
   673  000100                     	ds	128
   674  000180                     _line:
   675                           	opt stack 0
   676  000180                     	ds	128
   677                           tblptru	equ	0xFF8
   678                           tblptrh	equ	0xFF7
   679                           tblptrl	equ	0xFF6
   680                           tablat	equ	0xFF5
   681                           postinc0	equ	0xFEE
   682                           wreg	equ	0xFE8
   683                           postdec1	equ	0xFE5
   684                           fsr1h	equ	0xFE2
   685                           fsr1l	equ	0xFE1
   686                           
   687                           	psect	bssBANK2
   688  000200                     __pbssBANK2:
   689                           	opt stack 0
   690  000200                     _eusart1RxBuffer:
   691                           	opt stack 0
   692  000200                     	ds	128
   693                           tblptru	equ	0xFF8
   694                           tblptrh	equ	0xFF7
   695                           tblptrl	equ	0xFF6
   696                           tablat	equ	0xFF5
   697                           postinc0	equ	0xFEE
   698                           wreg	equ	0xFE8
   699                           postdec1	equ	0xFE5
   700                           fsr1h	equ	0xFE2
   701                           fsr1l	equ	0xFE1
   702                           
   703                           	psect	cstackBANK0
   704  000089                     __pcstackBANK0:
   705                           	opt stack 0
   706  000089                     ?___lwmod:
   707                           	opt stack 0
   708  000089                     ?___lmul:
   709                           	opt stack 0
   710  000089                     ___lwmod@dividend:
   711                           	opt stack 0
   712  000089                     ___lmul@multiplier:
   713                           	opt stack 0
   714                           
   715                           ; 4 bytes @ 0x0
   716  000089                     	ds	2
   717  00008B                     ___lwmod@divisor:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x2
   721  00008B                     	ds	2
   722  00008D                     ___lwmod@counter:
   723                           	opt stack 0
   724  00008D                     ___lmul@multiplicand:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x4
   728  00008D                     	ds	1
   729  00008E                     ?_printf:
   730                           	opt stack 0
   731  00008E                     printf@f:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x5
   735  00008E                     	ds	3
   736  000091                     ?___awmod:
   737                           	opt stack 0
   738  000091                     ?_strtol:
   739                           	opt stack 0
   740  000091                     ___awmod@dividend:
   741                           	opt stack 0
   742  000091                     strtol@s:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x8
   746  000091                     	ds	2
   747  000093                     ___awmod@divisor:
   748                           	opt stack 0
   749  000093                     strtol@endptr:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0xA
   753  000093                     	ds	2
   754  000095                     ___awmod@counter:
   755                           	opt stack 0
   756  000095                     strtol@base:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0xC
   760  000095                     	ds	1
   761  000096                     ___awmod@sign:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0xD
   765  000096                     	ds	1
   766  000097                     ??_strtol:
   767  000097                     wait_5ms@j:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0xE
   771  000097                     	ds	2
   772  000099                     ??_wait_5ms:
   773                           
   774                           ; 1 bytes @ 0x10
   775  000099                     	ds	1
   776  00009A                     ??_printf:
   777                           
   778                           ; 1 bytes @ 0x11
   779  00009A                     	ds	1
   780  00009B                     strtol@sign:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x12
   784  00009B                     	ds	1
   785  00009C                     strtol@a:
   786                           	opt stack 0
   787                           
   788                           ; 4 bytes @ 0x13
   789  00009C                     	ds	2
   790  00009E                     printf@idx:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x15
   794  00009E                     	ds	1
   795  00009F                     printf@prec:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x16
   799  00009F                     	ds	1
   800  0000A0                     strtol@c:
   801                           	opt stack 0
   802  0000A0                     printf@cp:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x17
   806  0000A0                     	ds	1
   807  0000A1                     srand@x:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x18
   811  0000A1                     	ds	1
   812  0000A2                     printf@ap:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x19
   816  0000A2                     	ds	2
   817  0000A4                     printf@len:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x1B
   821  0000A4                     	ds	2
   822  0000A6                     printf@val:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x1D
   826  0000A6                     	ds	2
   827  0000A8                     printf@flag:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x1F
   831  0000A8                     	ds	1
   832  0000A9                     printf@width:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x20
   836  0000A9                     	ds	2
   837  0000AB                     printf@c:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x22
   841  0000AB                     	ds	1
   842  0000AC                     InitRadio@delay:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x23
   846  0000AC                     	ds	2
   847  0000AE                     main@crc:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x25
   851  0000AE                     	ds	1
   852  0000AF                     main@msb:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x26
   856  0000AF                     	ds	1
   857  0000B0                     main@lsb:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x27
   861  0000B0                     	ds	1
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           postinc0	equ	0xFEE
   867                           wreg	equ	0xFE8
   868                           postdec1	equ	0xFE5
   869                           fsr1h	equ	0xFE2
   870                           fsr1l	equ	0xFE1
   871                           
   872                           	psect	cstackCOMRAM
   873  000001                     __pcstackCOMRAM:
   874                           	opt stack 0
   875  000001                     ?_strcmp:
   876                           	opt stack 0
   877  000001                     ?_strlen:
   878                           	opt stack 0
   879  000001                     ?_strchr:
   880                           	opt stack 0
   881  000001                     EUSART1_Read@readValue:
   882                           	opt stack 0
   883  000001                     strcmp@s1:
   884                           	opt stack 0
   885  000001                     strchr@ptr:
   886                           	opt stack 0
   887  000001                     strlen@s:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x0
   891  000001                     	ds	2
   892  000003                     ??_strlen:
   893  000003                     strcmp@s2:
   894                           	opt stack 0
   895  000003                     strchr@chr:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x2
   899  000003                     	ds	2
   900  000005                     ??_strcmp:
   901  000005                     strlen@cp:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x4
   905  000005                     	ds	1
   906  000006                     strcmp@r:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x5
   910  000006                     	ds	1
   911  000007                     ?_strncmp:
   912                           	opt stack 0
   913  000007                     strncmp@s1:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x6
   917  000007                     	ds	2
   918  000009                     strncmp@s2:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x8
   922  000009                     	ds	2
   923  00000B                     strncmp@len:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0xA
   927  00000B                     	ds	2
   928  00000D                     ??_strncmp:
   929                           
   930                           ; 1 bytes @ 0xC
   931  00000D                     	ds	3
   932  000010                     ?_strstr:
   933                           	opt stack 0
   934  000010                     strstr@s1:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0xF
   938  000010                     	ds	2
   939  000012                     strstr@s2:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x11
   943  000012                     	ds	2
   944  000014                     ??_EUSART1_Receive_ISR:
   945  000014                     
   946                           ; 1 bytes @ 0x13
   947  000014                     	ds	1
   948  000015                     EUSART1_Receive_ISR@state:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x14
   952  000015                     	ds	2
   953  000017                     ??_INTERRUPT_InterruptManager:
   954                           
   955                           ; 1 bytes @ 0x16
   956  000017                     	ds	14
   957  000025                     ??_I2C_Init:
   958  000025                     ??_isdigit:
   959  000025                     ??_isspace:
   960  000025                     ??_isupper:
   961  000025                     ?___wmul:
   962                           	opt stack 0
   963  000025                     ?___lwdiv:
   964                           	opt stack 0
   965  000025                     EUSART1_Write@txData:
   966                           	opt stack 0
   967  000025                     I2C_Write_Byte@byt:
   968                           	opt stack 0
   969  000025                     I2C_Read_Byte@ack:
   970                           	opt stack 0
   971  000025                     toupper@c:
   972                           	opt stack 0
   973  000025                     ___wmul@multiplier:
   974                           	opt stack 0
   975  000025                     ___lwdiv@dividend:
   976                           	opt stack 0
   977  000025                     strcpy@to:
   978                           	opt stack 0
   979  000025                     ___lmul@product:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0x24
   983  000025                     	ds	1
   984  000026                     putch@txData:
   985                           	opt stack 0
   986  000026                     I2C_Write_Byte@i:
   987                           	opt stack 0
   988  000026                     I2C_Read_Byte@val:
   989                           	opt stack 0
   990  000026                     _isdigit$1236:
   991                           	opt stack 0
   992  000026                     _isspace$1481:
   993                           	opt stack 0
   994  000026                     _isupper$1484:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x25
   998  000026                     	ds	1
   999  000027                     I2C_Read_Byte@i:
  1000                           	opt stack 0
  1001  000027                     isdigit@c:
  1002                           	opt stack 0
  1003  000027                     isspace@c:
  1004                           	opt stack 0
  1005  000027                     isupper@c:
  1006                           	opt stack 0
  1007  000027                     ___wmul@multiplicand:
  1008                           	opt stack 0
  1009  000027                     ___lwdiv@divisor:
  1010                           	opt stack 0
  1011  000027                     strcpy@from:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x26
  1015  000027                     	ds	1
  1016  000028                     ??_isalpha:
  1017                           
  1018                           ; 1 bytes @ 0x27
  1019  000028                     	ds	1
  1020  000029                     ?_rand:
  1021                           	opt stack 0
  1022  000029                     _isalpha$1478:
  1023                           	opt stack 0
  1024  000029                     ___wmul@product:
  1025                           	opt stack 0
  1026  000029                     ___lwdiv@quotient:
  1027                           	opt stack 0
  1028  000029                     strcpy@cp:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x28
  1032  000029                     	ds	1
  1033  00002A                     isalpha@c:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x29
  1037  00002A                     	ds	1
  1038  00002B                     wait_5ms@i:
  1039                           	opt stack 0
  1040  00002B                     ___lwdiv@counter:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x2A
  1044  00002B                     	ds	1
  1045  00002C                     tblptru	equ	0xFF8
  1046                           tblptrh	equ	0xFF7
  1047                           tblptrl	equ	0xFF6
  1048                           tablat	equ	0xFF5
  1049                           postinc0	equ	0xFEE
  1050                           wreg	equ	0xFE8
  1051                           postdec1	equ	0xFE5
  1052                           fsr1h	equ	0xFE2
  1053                           fsr1l	equ	0xFE1
  1054                           
  1055                           ; 1 bytes @ 0x2B
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 119 in file "main.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;  lsb             1   39[BANK0 ] unsigned char 
  1066 ;;  msb             1   38[BANK0 ] unsigned char 
  1067 ;;  crc             1   37[BANK0 ] unsigned char 
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  1    wreg      void 
  1070 ;; Registers used:
  1071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1078 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1080 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1081 ;;Total ram usage:        3 bytes
  1082 ;; Hardware stack levels required when called:    9
  1083 ;; This function calls:
  1084 ;;		_I2C_Read_Byte
  1085 ;;		_I2C_Start
  1086 ;;		_I2C_Stop
  1087 ;;		_I2C_Write_Byte
  1088 ;;		_InitRadio
  1089 ;;		_InitSensor
  1090 ;;		_SYSTEM_Initialize
  1091 ;;		___awmod
  1092 ;;		_printf
  1093 ;;		_rand
  1094 ;;		_read_line
  1095 ;;		_wait_5ms
  1096 ;; This function is called by:
  1097 ;;		Startup code after reset
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           	psect	text0
  1102  000ABC                     __ptext0:
  1103                           	opt stack 0
  1104  000ABC                     _main:
  1105                           	opt stack 22
  1106                           
  1107                           ;main.c: 120: SYSTEM_Initialize();
  1108                           
  1109                           ;incstack = 0
  1110  000ABC  EC11  F00A         	call	_SYSTEM_Initialize	;wreg free
  1111                           
  1112                           ;main.c: 121: (INTCONbits.GIE = 1);
  1113  000AC0  8EF2               	bsf	intcon,7,c	;volatile
  1114                           
  1115                           ;main.c: 122: (INTCONbits.PEIE = 1);
  1116  000AC2  8CF2               	bsf	intcon,6,c	;volatile
  1117                           
  1118                           ;main.c: 124: InitRadio();
  1119  000AC4  ECEE  F003         	call	_InitRadio	;wreg free
  1120                           
  1121                           ;main.c: 125: InitSensor();
  1122  000AC8  EC60  F009         	call	_InitSensor	;wreg free
  1123  000ACC                     l3405:
  1124                           
  1125                           ;main.c: 130: I2C_Start();
  1126  000ACC  EC1B  F009         	call	_I2C_Start	;wreg free
  1127                           
  1128                           ;main.c: 131: I2C_Write_Byte(0x88);
  1129  000AD0  0E88               	movlw	136
  1130  000AD2  EC30  F007         	call	_I2C_Write_Byte
  1131                           
  1132                           ;main.c: 132: I2C_Write_Byte(0x00);
  1133  000AD6  0E00               	movlw	0
  1134  000AD8  EC30  F007         	call	_I2C_Write_Byte
  1135                           
  1136                           ;main.c: 133: I2C_Start();
  1137  000ADC  EC1B  F009         	call	_I2C_Start	;wreg free
  1138                           
  1139                           ;main.c: 134: I2C_Write_Byte(0x89);
  1140  000AE0  0E89               	movlw	137
  1141  000AE2  EC30  F007         	call	_I2C_Write_Byte
  1142                           
  1143                           ;main.c: 135: uint8_t msb = I2C_Read_Byte(1);
  1144  000AE6  0E01               	movlw	1
  1145  000AE8  EC15  F006         	call	_I2C_Read_Byte
  1146  000AEC  0100               	movlb	0	; () banked
  1147  000AEE  6FAF               	movwf	main@msb& (0+255),b
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;main.c: 136: uint8_t lsb = I2C_Read_Byte(0);
  1151  000AF0  0E00               	movlw	0
  1152  000AF2  EC15  F006         	call	_I2C_Read_Byte
  1153  000AF6  0100               	movlb	0	; () banked
  1154  000AF8  6FB0               	movwf	main@lsb& (0+255),b
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 137: I2C_Stop();
  1158  000AFA  ECE4  F009         	call	_I2C_Stop	;wreg free
  1159                           
  1160                           ;main.c: 138: uint8_t crc = msb ^ lsb;
  1161  000AFE  0100               	movlb	0	; () banked
  1162  000B00  51AF               	movf	main@msb& (0+255),w,b
  1163  000B02  0100               	movlb	0	; () banked
  1164  000B04  19B0               	xorwf	main@lsb& (0+255),w,b
  1165  000B06  0100               	movlb	0	; () banked
  1166  000B08  6FAE               	movwf	main@crc& (0+255),b
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;main.c: 142: printf("radio tx 41%s%02X%02X%02X%02X0000\r\n",uuid,inc++,msb,lsb,crc);
  1170  000B0A  0EAD               	movlw	low STR_20
  1171  000B0C  0100               	movlb	0	; () banked
  1172  000B0E  6F8E               	movwf	printf@f& (0+255),b
  1173  000B10  0EFE               	movlw	high STR_20
  1174  000B12  0100               	movlb	0	; () banked
  1175  000B14  6F8F               	movwf	(printf@f+1)& (0+255),b
  1176  000B16  0E61               	movlw	low _uuid
  1177  000B18  0100               	movlb	0	; () banked
  1178  000B1A  6F90               	movwf	(?_printf+2)& (0+255),b
  1179  000B1C  0E00               	movlw	high _uuid
  1180  000B1E  0100               	movlb	0	; () banked
  1181  000B20  6F91               	movwf	(?_printf+3)& (0+255),b
  1182  000B22  C060  F092         	movff	_inc,?_printf+4
  1183  000B26  0100               	movlb	0	; () banked
  1184  000B28  6B93               	clrf	(?_printf+5)& (0+255),b
  1185  000B2A  C0AF  F094         	movff	main@msb,?_printf+6
  1186  000B2E  0100               	movlb	0	; () banked
  1187  000B30  6B95               	clrf	(?_printf+7)& (0+255),b
  1188  000B32  C0B0  F096         	movff	main@lsb,?_printf+8
  1189  000B36  0100               	movlb	0	; () banked
  1190  000B38  6B97               	clrf	(?_printf+9)& (0+255),b
  1191  000B3A  C0AE  F098         	movff	main@crc,?_printf+10
  1192  000B3E  0100               	movlb	0	; () banked
  1193  000B40  6B99               	clrf	(?_printf+11)& (0+255),b
  1194  000B42  EC4C  F000         	call	_printf	;wreg free
  1195  000B46  0100               	movlb	0	; () banked
  1196  000B48  2B60               	incf	_inc& (0+255),f,b
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;main.c: 143: read_line();
  1200  000B4A  EC3F  F00A         	call	_read_line	;wreg free
  1201                           
  1202                           ;main.c: 144: read_line();
  1203  000B4E  EC3F  F00A         	call	_read_line	;wreg free
  1204                           
  1205                           ;main.c: 147: wait_5ms(100);
  1206  000B52  0E00               	movlw	0
  1207  000B54  0100               	movlb	0	; () banked
  1208  000B56  6F98               	movwf	(wait_5ms@j+1)& (0+255),b
  1209  000B58  0E64               	movlw	100
  1210  000B5A  6F97               	movwf	wait_5ms@j& (0+255),b
  1211  000B5C  EC53  F008         	call	_wait_5ms	;wreg free
  1212                           
  1213                           ;main.c: 148: wait_5ms((rand()%3));
  1214  000B60  EC00  F008         	call	_rand	;wreg free
  1215  000B64  C029  F091         	movff	?_rand,___awmod@dividend
  1216  000B68  C02A  F092         	movff	?_rand+1,___awmod@dividend+1
  1217  000B6C  0E00               	movlw	0
  1218  000B6E  0100               	movlb	0	; () banked
  1219  000B70  6F94               	movwf	(___awmod@divisor+1)& (0+255),b
  1220  000B72  0E03               	movlw	3
  1221  000B74  6F93               	movwf	___awmod@divisor& (0+255),b
  1222  000B76  ECC4  F005         	call	___awmod	;wreg free
  1223  000B7A  C091  F097         	movff	?___awmod,wait_5ms@j
  1224  000B7E  C092  F098         	movff	?___awmod+1,wait_5ms@j+1
  1225  000B82  EC53  F008         	call	_wait_5ms	;wreg free
  1226  000B86  D7A2               	goto	l3405
  1227  000B88                     __end_of_main:
  1228                           	opt stack 0
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           intcon	equ	0xFF2
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1h	equ	0xFE2
  1238                           fsr1l	equ	0xFE1
  1239                           
  1240 ;; *************** function _SYSTEM_Initialize *****************
  1241 ;; Defined at:
  1242 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;Total ram usage:        0 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    6
  1263 ;; This function calls:
  1264 ;;		_EPWM1_Initialize
  1265 ;;		_EUSART1_Initialize
  1266 ;;		_INTERRUPT_Initialize
  1267 ;;		_OSCILLATOR_Initialize
  1268 ;;		_PIN_MANAGER_Initialize
  1269 ;;		_TMR2_Initialize
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text1
  1276  001422                     __ptext1:
  1277                           	opt stack 0
  1278  001422                     _SYSTEM_Initialize:
  1279                           	opt stack 24
  1280                           
  1281                           ;mcc.c: 115: INTERRUPT_Initialize();
  1282                           
  1283                           ;incstack = 0
  1284  001422  EC4B  F00A         	call	_INTERRUPT_Initialize	;wreg free
  1285                           
  1286                           ;mcc.c: 116: PIN_MANAGER_Initialize();
  1287  001426  ECCD  F008         	call	_PIN_MANAGER_Initialize	;wreg free
  1288                           
  1289                           ;mcc.c: 117: OSCILLATOR_Initialize();
  1290  00142A  EC31  F00A         	call	_OSCILLATOR_Initialize	;wreg free
  1291                           
  1292                           ;mcc.c: 118: EPWM1_Initialize();
  1293  00142E  ECC4  F009         	call	_EPWM1_Initialize	;wreg free
  1294                           
  1295                           ;mcc.c: 119: TMR2_Initialize();
  1296  001432  EC28  F00A         	call	_TMR2_Initialize	;wreg free
  1297                           
  1298                           ;mcc.c: 120: EUSART1_Initialize();
  1299  001436  ECE7  F008         	call	_EUSART1_Initialize	;wreg free
  1300  00143A  0012               	return		;funcret
  1301  00143C                     __end_of_SYSTEM_Initialize:
  1302                           	opt stack 0
  1303                           tblptru	equ	0xFF8
  1304                           tblptrh	equ	0xFF7
  1305                           tblptrl	equ	0xFF6
  1306                           tablat	equ	0xFF5
  1307                           intcon	equ	0xFF2
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           postdec1	equ	0xFE5
  1311                           fsr1h	equ	0xFE2
  1312                           fsr1l	equ	0xFE1
  1313                           
  1314 ;; *************** function _TMR2_Initialize *****************
  1315 ;; Defined at:
  1316 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1334 ;;Total ram usage:        0 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    5
  1337 ;; This function calls:
  1338 ;;		_TMR2_StartTimer
  1339 ;; This function is called by:
  1340 ;;		_SYSTEM_Initialize
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text2
  1345  001450                     __ptext2:
  1346                           	opt stack 0
  1347  001450                     _TMR2_Initialize:
  1348                           	opt stack 24
  1349                           
  1350                           ;tmr2.c: 63: T2CON = 0x00;
  1351                           
  1352                           ;incstack = 0
  1353  001450  0E00               	movlw	0
  1354  001452  6EBA               	movwf	4026,c	;volatile
  1355                           
  1356                           ;tmr2.c: 66: PR2 = 0xFF;
  1357  001454  68BB               	setf	4027,c	;volatile
  1358                           
  1359                           ;tmr2.c: 69: TMR2 = 0x00;
  1360  001456  0E00               	movlw	0
  1361  001458  6EBC               	movwf	4028,c	;volatile
  1362                           
  1363                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  1364  00145A  929E               	bcf	3998,1,c	;volatile
  1365                           
  1366                           ;tmr2.c: 75: TMR2_StartTimer();
  1367  00145C  EC57  F00A         	call	_TMR2_StartTimer	;wreg free
  1368  001460  0012               	return		;funcret
  1369  001462                     __end_of_TMR2_Initialize:
  1370                           	opt stack 0
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           intcon	equ	0xFF2
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           fsr1h	equ	0xFE2
  1380                           fsr1l	equ	0xFE1
  1381                           
  1382 ;; *************** function _TMR2_StartTimer *****************
  1383 ;; Defined at:
  1384 ;;		line 78 in file "mcc_generated_files/tmr2.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		None
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;Total ram usage:        0 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    4
  1405 ;; This function calls:
  1406 ;;		Nothing
  1407 ;; This function is called by:
  1408 ;;		_TMR2_Initialize
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text3
  1413  0014AE                     __ptext3:
  1414                           	opt stack 0
  1415  0014AE                     _TMR2_StartTimer:
  1416                           	opt stack 24
  1417                           
  1418                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
  1419                           
  1420                           ;incstack = 0
  1421  0014AE  84BA               	bsf	4026,2,c	;volatile
  1422  0014B0  0012               	return		;funcret
  1423  0014B2                     __end_of_TMR2_StartTimer:
  1424                           	opt stack 0
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           intcon	equ	0xFF2
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           fsr1h	equ	0xFE2
  1434                           fsr1l	equ	0xFE1
  1435                           
  1436 ;; *************** function _PIN_MANAGER_Initialize *****************
  1437 ;; Defined at:
  1438 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    4
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_SYSTEM_Initialize
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text4
  1467  00119A                     __ptext4:
  1468                           	opt stack 0
  1469  00119A                     _PIN_MANAGER_Initialize:
  1470                           	opt stack 25
  1471                           
  1472                           ;pin_manager.c: 51: LATB = 0x0;
  1473                           
  1474                           ;incstack = 0
  1475  00119A  0E00               	movlw	0
  1476  00119C  6E8A               	movwf	3978,c	;volatile
  1477                           
  1478                           ;pin_manager.c: 52: LATA = 0x0;
  1479  00119E  0E00               	movlw	0
  1480  0011A0  6E89               	movwf	3977,c	;volatile
  1481                           
  1482                           ;pin_manager.c: 53: LATC = 0x0;
  1483  0011A2  0E00               	movlw	0
  1484  0011A4  6E8B               	movwf	3979,c	;volatile
  1485                           
  1486                           ;pin_manager.c: 54: ANSELA = 0x2F;
  1487  0011A6  0E2F               	movlw	47
  1488  0011A8  010F               	movlb	15	; () banked
  1489  0011AA  6F38               	movwf	56,b	;volatile
  1490                           
  1491                           ;pin_manager.c: 55: ANSELB = 0x3E;
  1492  0011AC  0E3E               	movlw	62
  1493  0011AE  010F               	movlb	15	; () banked
  1494  0011B0  6F39               	movwf	57,b	;volatile
  1495                           
  1496                           ;pin_manager.c: 56: ANSELC = 0x38;
  1497  0011B2  0E38               	movlw	56
  1498  0011B4  010F               	movlb	15	; () banked
  1499  0011B6  6F3A               	movwf	58,b	;volatile
  1500                           
  1501                           ;pin_manager.c: 57: TRISB = 0xC8;
  1502  0011B8  0EC8               	movlw	200
  1503  0011BA  6E93               	movwf	3987,c	;volatile
  1504                           
  1505                           ;pin_manager.c: 58: TRISC = 0xF9;
  1506  0011BC  0EF9               	movlw	249
  1507  0011BE  6E94               	movwf	3988,c	;volatile
  1508                           
  1509                           ;pin_manager.c: 59: WPUB = 0xFE;
  1510  0011C0  0EFE               	movlw	254
  1511  0011C2  6E61               	movwf	3937,c	;volatile
  1512                           
  1513                           ;pin_manager.c: 60: TRISA = 0xEF;
  1514  0011C4  0EEF               	movlw	239
  1515  0011C6  6E92               	movwf	3986,c	;volatile
  1516                           
  1517                           ; BSR set to: 15
  1518                           ;pin_manager.c: 62: INTCON2bits.nRBPU = 0x1;
  1519  0011C8  8EF1               	bsf	intcon2,7,c	;volatile
  1520                           
  1521                           ; BSR set to: 15
  1522                           ;pin_manager.c: 66: INTCONbits.RBIE = 0;
  1523  0011CA  96F2               	bcf	intcon,3,c	;volatile
  1524                           
  1525                           ; BSR set to: 15
  1526  0011CC  0012               	return		;funcret
  1527  0011CE                     __end_of_PIN_MANAGER_Initialize:
  1528                           	opt stack 0
  1529                           tblptru	equ	0xFF8
  1530                           tblptrh	equ	0xFF7
  1531                           tblptrl	equ	0xFF6
  1532                           tablat	equ	0xFF5
  1533                           intcon	equ	0xFF2
  1534                           intcon2	equ	0xFF1
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           postdec1	equ	0xFE5
  1538                           fsr1h	equ	0xFE2
  1539                           fsr1l	equ	0xFE1
  1540                           
  1541 ;; *************** function _OSCILLATOR_Initialize *****************
  1542 ;; Defined at:
  1543 ;;		line 123 in file "mcc_generated_files/mcc.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg, status,2
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;Total ram usage:        0 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    4
  1564 ;; This function calls:
  1565 ;;		Nothing
  1566 ;; This function is called by:
  1567 ;;		_SYSTEM_Initialize
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text5
  1572  001462                     __ptext5:
  1573                           	opt stack 0
  1574  001462                     _OSCILLATOR_Initialize:
  1575                           	opt stack 25
  1576                           
  1577                           ;mcc.c: 126: OSCCON = 0x70;
  1578                           
  1579                           ; BSR set to: 15
  1580                           ;incstack = 0
  1581  001462  0E70               	movlw	112
  1582  001464  6ED3               	movwf	4051,c	;volatile
  1583                           
  1584                           ;mcc.c: 128: OSCCON2 = 0x04;
  1585  001466  0E04               	movlw	4
  1586  001468  6ED2               	movwf	4050,c	;volatile
  1587                           
  1588                           ;mcc.c: 130: OSCTUNE = 0x40;
  1589  00146A  0E40               	movlw	64
  1590  00146C  6E9B               	movwf	3995,c	;volatile
  1591  00146E  0012               	return		;funcret
  1592  001470                     __end_of_OSCILLATOR_Initialize:
  1593                           	opt stack 0
  1594                           tblptru	equ	0xFF8
  1595                           tblptrh	equ	0xFF7
  1596                           tblptrl	equ	0xFF6
  1597                           tablat	equ	0xFF5
  1598                           intcon	equ	0xFF2
  1599                           intcon2	equ	0xFF1
  1600                           postinc0	equ	0xFEE
  1601                           wreg	equ	0xFE8
  1602                           postdec1	equ	0xFE5
  1603                           fsr1h	equ	0xFE2
  1604                           fsr1l	equ	0xFE1
  1605                           
  1606 ;; *************** function _INTERRUPT_Initialize *****************
  1607 ;; Defined at:
  1608 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;		None
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		None
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1626 ;;Total ram usage:        0 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    4
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_SYSTEM_Initialize
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text6
  1637  001496                     __ptext6:
  1638                           	opt stack 0
  1639  001496                     _INTERRUPT_Initialize:
  1640                           	opt stack 25
  1641                           
  1642                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  1643                           
  1644                           ;incstack = 0
  1645  001496  9ED0               	bcf	4048,7,c	;volatile
  1646                           
  1647                           ;interrupt_manager.c: 60: INTCON2bits.TMR0IP = 0;
  1648  001498  94F1               	bcf	intcon2,2,c	;volatile
  1649                           
  1650                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  1651  00149A  989F               	bcf	3999,4,c	;volatile
  1652                           
  1653                           ;interrupt_manager.c: 64: IPR1bits.RC1IP = 0;
  1654  00149C  9A9F               	bcf	3999,5,c	;volatile
  1655  00149E  0012               	return		;funcret
  1656  0014A0                     __end_of_INTERRUPT_Initialize:
  1657                           	opt stack 0
  1658                           tblptru	equ	0xFF8
  1659                           tblptrh	equ	0xFF7
  1660                           tblptrl	equ	0xFF6
  1661                           tablat	equ	0xFF5
  1662                           intcon	equ	0xFF2
  1663                           intcon2	equ	0xFF1
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           postdec1	equ	0xFE5
  1667                           fsr1h	equ	0xFE2
  1668                           fsr1l	equ	0xFE1
  1669                           
  1670 ;; *************** function _EUSART1_Initialize *****************
  1671 ;; Defined at:
  1672 ;;		line 84 in file "mcc_generated_files/eusart1.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;		None
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;		None
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      void 
  1679 ;; Registers used:
  1680 ;;		wreg, status,2
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;Total ram usage:        0 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    4
  1693 ;; This function calls:
  1694 ;;		Nothing
  1695 ;; This function is called by:
  1696 ;;		_SYSTEM_Initialize
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           	psect	text7
  1701  0011CE                     __ptext7:
  1702                           	opt stack 0
  1703  0011CE                     _EUSART1_Initialize:
  1704                           	opt stack 25
  1705                           
  1706                           ;eusart1.c: 87: PIE1bits.RC1IE = 0;
  1707                           
  1708                           ;incstack = 0
  1709  0011CE  9A9D               	bcf	3997,5,c	;volatile
  1710                           
  1711                           ;eusart1.c: 88: PIE1bits.TX1IE = 0;
  1712  0011D0  989D               	bcf	3997,4,c	;volatile
  1713                           
  1714                           ;eusart1.c: 93: BAUDCON1 = 0x00;
  1715  0011D2  0E00               	movlw	0
  1716  0011D4  6EB8               	movwf	4024,c	;volatile
  1717                           
  1718                           ;eusart1.c: 96: RCSTA1 = 0x90;
  1719  0011D6  0E90               	movlw	144
  1720  0011D8  6EAB               	movwf	4011,c	;volatile
  1721                           
  1722                           ;eusart1.c: 99: TXSTA1 = 0x20;
  1723  0011DA  0E20               	movlw	32
  1724  0011DC  6EAC               	movwf	4012,c	;volatile
  1725                           
  1726                           ;eusart1.c: 102: SPBRG1 = 0x10;
  1727  0011DE  0E10               	movlw	16
  1728  0011E0  6EAF               	movwf	4015,c	;volatile
  1729                           
  1730                           ;eusart1.c: 105: SPBRGH1 = 0x00;
  1731  0011E2  0E00               	movlw	0
  1732  0011E4  6EB0               	movwf	4016,c	;volatile
  1733                           
  1734                           ;eusart1.c: 109: eusart1TxHead = 0;
  1735  0011E6  0E00               	movlw	0
  1736  0011E8  6E31               	movwf	_eusart1TxHead,c
  1737                           
  1738                           ;eusart1.c: 110: eusart1TxTail = 0;
  1739  0011EA  0E00               	movlw	0
  1740  0011EC  6E32               	movwf	_eusart1TxTail,c
  1741                           
  1742                           ;eusart1.c: 111: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1743  0011EE  0E80               	movlw	128
  1744  0011F0  6E3A               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1745                           
  1746                           ;eusart1.c: 113: eusart1RxHead = 0;
  1747  0011F2  0E00               	movlw	0
  1748  0011F4  6E2F               	movwf	_eusart1RxHead,c
  1749                           
  1750                           ;eusart1.c: 114: eusart1RxTail = 0;
  1751  0011F6  0E00               	movlw	0
  1752  0011F8  6E30               	movwf	_eusart1RxTail,c
  1753                           
  1754                           ;eusart1.c: 115: eusart1RxCount = 0;
  1755  0011FA  0E00               	movlw	0
  1756  0011FC  6E2E               	movwf	_eusart1RxCount,c	;volatile
  1757                           
  1758                           ;eusart1.c: 118: PIE1bits.RC1IE = 1;
  1759  0011FE  8A9D               	bsf	3997,5,c	;volatile
  1760  001200  0012               	return		;funcret
  1761  001202                     __end_of_EUSART1_Initialize:
  1762                           	opt stack 0
  1763                           tblptru	equ	0xFF8
  1764                           tblptrh	equ	0xFF7
  1765                           tblptrl	equ	0xFF6
  1766                           tablat	equ	0xFF5
  1767                           intcon	equ	0xFF2
  1768                           intcon2	equ	0xFF1
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           fsr1h	equ	0xFE2
  1773                           fsr1l	equ	0xFE1
  1774                           
  1775 ;; *************** function _EPWM1_Initialize *****************
  1776 ;; Defined at:
  1777 ;;		line 64 in file "mcc_generated_files/epwm1.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;		None
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  1    wreg      void 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;Total ram usage:        0 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    4
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_SYSTEM_Initialize
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text8
  1806  001388                     __ptext8:
  1807                           	opt stack 0
  1808  001388                     _EPWM1_Initialize:
  1809                           	opt stack 25
  1810                           
  1811                           ;epwm1.c: 69: CCP1CON = 0x0E;
  1812                           
  1813                           ;incstack = 0
  1814  001388  0E0E               	movlw	14
  1815  00138A  6EBD               	movwf	4029,c	;volatile
  1816                           
  1817                           ;epwm1.c: 72: ECCP1AS = 0x00;
  1818  00138C  0E00               	movlw	0
  1819  00138E  6EB6               	movwf	4022,c	;volatile
  1820                           
  1821                           ;epwm1.c: 75: PWM1CON = 0x82;
  1822  001390  0E82               	movlw	130
  1823  001392  6EB7               	movwf	4023,c	;volatile
  1824                           
  1825                           ;epwm1.c: 78: PSTR1CON = 0x01;
  1826  001394  0E01               	movlw	1
  1827  001396  6EB9               	movwf	4025,c	;volatile
  1828                           
  1829                           ;epwm1.c: 81: CCPR1L = 0x00;
  1830  001398  0E00               	movlw	0
  1831  00139A  6EBE               	movwf	4030,c	;volatile
  1832                           
  1833                           ;epwm1.c: 84: CCPR1H = 0x00;
  1834  00139C  0E00               	movlw	0
  1835  00139E  6EBF               	movwf	4031,c	;volatile
  1836                           
  1837                           ;epwm1.c: 88: CCPTMRS0bits.C1TSEL = 0x0;
  1838  0013A0  0EFC               	movlw	-4
  1839  0013A2  010F               	movlb	15	; () banked
  1840  0013A4  1749               	andwf	73,f,b	;volatile
  1841                           
  1842                           ; BSR set to: 15
  1843  0013A6  0012               	return		;funcret
  1844  0013A8                     __end_of_EPWM1_Initialize:
  1845                           	opt stack 0
  1846                           tblptru	equ	0xFF8
  1847                           tblptrh	equ	0xFF7
  1848                           tblptrl	equ	0xFF6
  1849                           tablat	equ	0xFF5
  1850                           intcon	equ	0xFF2
  1851                           intcon2	equ	0xFF1
  1852                           postinc0	equ	0xFEE
  1853                           wreg	equ	0xFE8
  1854                           postdec1	equ	0xFE5
  1855                           fsr1h	equ	0xFE2
  1856                           fsr1l	equ	0xFE1
  1857                           
  1858 ;; *************** function _InitSensor *****************
  1859 ;; Defined at:
  1860 ;;		line 103 in file "main.c"
  1861 ;; Parameters:    Size  Location     Type
  1862 ;;		None
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;		None
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      void 
  1867 ;; Registers used:
  1868 ;;		wreg, status,2, status,0, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;Total ram usage:        0 bytes
  1879 ;; Hardware stack levels used:    1
  1880 ;; Hardware stack levels required when called:    6
  1881 ;; This function calls:
  1882 ;;		_I2C_Init
  1883 ;;		_I2C_Start
  1884 ;;		_I2C_Stop
  1885 ;;		_I2C_Write_Byte
  1886 ;; This function is called by:
  1887 ;;		_main
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text9
  1892  0012C0                     __ptext9:
  1893                           	opt stack 0
  1894  0012C0                     _InitSensor:
  1895                           	opt stack 24
  1896                           
  1897                           ;main.c: 104: ANSELCbits.ANSC4=0;
  1898                           
  1899                           ; BSR set to: 15
  1900                           ;incstack = 0
  1901  0012C0  010F               	movlb	15	; () banked
  1902  0012C2  993A               	bcf	58,4,b	;volatile
  1903                           
  1904                           ; BSR set to: 15
  1905                           ;main.c: 105: I2C_Init();
  1906  0012C4  ECD4  F009         	call	_I2C_Init	;wreg free
  1907                           
  1908                           ;main.c: 106: I2C_Start();
  1909  0012C8  EC1B  F009         	call	_I2C_Start	;wreg free
  1910                           
  1911                           ;main.c: 107: I2C_Write_Byte(0x88);
  1912  0012CC  0E88               	movlw	136
  1913  0012CE  EC30  F007         	call	_I2C_Write_Byte
  1914                           
  1915                           ;main.c: 108: I2C_Write_Byte(0x01);
  1916  0012D2  0E01               	movlw	1
  1917  0012D4  EC30  F007         	call	_I2C_Write_Byte
  1918                           
  1919                           ;main.c: 109: I2C_Write_Byte(0xC4);
  1920  0012D8  0EC4               	movlw	196
  1921  0012DA  EC30  F007         	call	_I2C_Write_Byte
  1922                           
  1923                           ;main.c: 110: I2C_Write_Byte(0x10);
  1924  0012DE  0E10               	movlw	16
  1925  0012E0  EC30  F007         	call	_I2C_Write_Byte
  1926                           
  1927                           ;main.c: 111: I2C_Stop();
  1928  0012E4  ECE4  F009         	call	_I2C_Stop	;wreg free
  1929  0012E8  0012               	return		;funcret
  1930  0012EA                     __end_of_InitSensor:
  1931                           	opt stack 0
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           intcon	equ	0xFF2
  1937                           intcon2	equ	0xFF1
  1938                           postinc0	equ	0xFEE
  1939                           wreg	equ	0xFE8
  1940                           postdec1	equ	0xFE5
  1941                           fsr1h	equ	0xFE2
  1942                           fsr1l	equ	0xFE1
  1943                           
  1944 ;; *************** function _I2C_Write_Byte *****************
  1945 ;; Defined at:
  1946 ;;		line 89 in file "soft_i2c.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;  byt             1    wreg     unsigned char 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;  byt             1   36[COMRAM] unsigned char 
  1951 ;;  i               1   37[COMRAM] unsigned char 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      void 
  1954 ;; Registers used:
  1955 ;;		wreg, status,2, status,0, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;Total ram usage:        2 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    5
  1968 ;; This function calls:
  1969 ;;		_I2C_SCL_CLEAR
  1970 ;;		_I2C_SCL_SET
  1971 ;;		_I2C_SDA_CLEAR
  1972 ;;		_I2C_SDA_IN_SET
  1973 ;;		_I2C_SDA_OUT_SET
  1974 ;;		_I2C_SDA_SET
  1975 ;; This function is called by:
  1976 ;;		_InitSensor
  1977 ;;		_main
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text10
  1982  000E60                     __ptext10:
  1983                           	opt stack 0
  1984  000E60                     _I2C_Write_Byte:
  1985                           	opt stack 24
  1986                           
  1987                           ;incstack = 0
  1988                           ;I2C_Write_Byte@byt stored from wreg
  1989  000E60  6E25               	movwf	I2C_Write_Byte@byt,c
  1990                           
  1991                           ;soft_i2c.c: 90: char i;
  1992                           ;soft_i2c.c: 91: I2C_SDA_OUT_SET();
  1993  000E62  EC5D  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  1994                           
  1995                           ;soft_i2c.c: 93: for (i = 0; i < 8; i++) {
  1996  000E66  0E00               	movlw	0
  1997  000E68  6E26               	movwf	I2C_Write_Byte@i,c
  1998  000E6A                     l2703:
  1999  000E6A  0E07               	movlw	7
  2000  000E6C  6426               	cpfsgt	I2C_Write_Byte@i,c
  2001  000E6E  D001               	goto	l356
  2002  000E70  D01E               	goto	l2727
  2003  000E72                     l356:
  2004                           
  2005                           ;soft_i2c.c: 94: if (byt & 0x80) {
  2006  000E72  AE25               	btfss	I2C_Write_Byte@byt,7,c
  2007  000E74  D006               	goto	l2711
  2008                           
  2009                           ;soft_i2c.c: 95: I2C_SDA_SET();
  2010  000E76  EC5B  F00A         	call	_I2C_SDA_SET	;wreg free
  2011                           
  2012                           ;soft_i2c.c: 96: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2013  000E7A  0E6A               	movlw	106
  2014  000E7C                     u3017:
  2015  000E7C  2EE8               	decfsz	wreg,f,c
  2016  000E7E  D7FE               	goto	u3017
  2017  000E80  D005               	goto	L1
  2018  000E82                     l2711:
  2019                           
  2020                           ;soft_i2c.c: 98: I2C_SDA_CLEAR();
  2021  000E82  EC61  F00A         	call	_I2C_SDA_CLEAR	;wreg free
  2022                           
  2023                           ;soft_i2c.c: 99: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2024  000E86  0E6A               	movlw	106
  2025  000E88                     u3027:
  2026  000E88  2EE8               	decfsz	wreg,f,c
  2027  000E8A  D7FE               	goto	u3027
  2028  000E8C                     L1:
  2029  000E8C  D000               	nop2		;nop
  2030                           
  2031                           ;soft_i2c.c: 100: }
  2032                           ;soft_i2c.c: 102: I2C_SCL_SET();
  2033  000E8E  EC63  F00A         	call	_I2C_SCL_SET	;wreg free
  2034                           
  2035                           ;soft_i2c.c: 103: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2036  000E92  0E6A               	movlw	106
  2037  000E94                     u3037:
  2038  000E94  2EE8               	decfsz	wreg,f,c
  2039  000E96  D7FE               	goto	u3037
  2040  000E98  D000               	nop2		;nop
  2041                           
  2042                           ;soft_i2c.c: 104: I2C_SCL_CLEAR();
  2043  000E9A  EC65  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  2044                           
  2045                           ;soft_i2c.c: 105: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2046  000E9E  0E6A               	movlw	106
  2047  000EA0                     u3047:
  2048  000EA0  2EE8               	decfsz	wreg,f,c
  2049  000EA2  D7FE               	goto	u3047
  2050  000EA4  D000               	nop2		;nop
  2051                           
  2052                           ;soft_i2c.c: 106: byt <<= 1;
  2053  000EA6  90D8               	bcf	status,0,c
  2054  000EA8  3625               	rlcf	I2C_Write_Byte@byt,f,c
  2055  000EAA  2A26               	incf	I2C_Write_Byte@i,f,c
  2056  000EAC  D7DE               	goto	l2703
  2057  000EAE                     l2727:
  2058                           
  2059                           ;soft_i2c.c: 107: }
  2060                           ;soft_i2c.c: 108: I2C_SDA_IN_SET();
  2061  000EAE  EC5F  F00A         	call	_I2C_SDA_IN_SET	;wreg free
  2062                           
  2063                           ;soft_i2c.c: 109: I2C_SCL_SET();
  2064  000EB2  EC63  F00A         	call	_I2C_SCL_SET	;wreg free
  2065                           
  2066                           ;soft_i2c.c: 110: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2067  000EB6  0E6A               	movlw	106
  2068  000EB8                     u3057:
  2069  000EB8  2EE8               	decfsz	wreg,f,c
  2070  000EBA  D7FE               	goto	u3057
  2071  000EBC  D000               	nop2		;nop
  2072                           
  2073                           ;soft_i2c.c: 111: I2C_SCL_CLEAR();
  2074  000EBE  EC65  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  2075                           
  2076                           ;soft_i2c.c: 112: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2077  000EC2  0E6A               	movlw	106
  2078  000EC4                     u3067:
  2079  000EC4  2EE8               	decfsz	wreg,f,c
  2080  000EC6  D7FE               	goto	u3067
  2081  000EC8  D000               	nop2		;nop
  2082                           
  2083                           ;soft_i2c.c: 114: I2C_SDA_OUT_SET();
  2084  000ECA  EC5D  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  2085  000ECE  0012               	return		;funcret
  2086  000ED0                     __end_of_I2C_Write_Byte:
  2087                           	opt stack 0
  2088                           tblptru	equ	0xFF8
  2089                           tblptrh	equ	0xFF7
  2090                           tblptrl	equ	0xFF6
  2091                           tablat	equ	0xFF5
  2092                           intcon	equ	0xFF2
  2093                           intcon2	equ	0xFF1
  2094                           postinc0	equ	0xFEE
  2095                           wreg	equ	0xFE8
  2096                           postdec1	equ	0xFE5
  2097                           fsr1h	equ	0xFE2
  2098                           fsr1l	equ	0xFE1
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _I2C_Stop *****************
  2102 ;; Defined at:
  2103 ;;		line 75 in file "soft_i2c.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;		None
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;		None
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;Total ram usage:        0 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    5
  2124 ;; This function calls:
  2125 ;;		_I2C_SCL_SET
  2126 ;;		_I2C_SDA_OUT_SET
  2127 ;;		_I2C_SDA_SET
  2128 ;; This function is called by:
  2129 ;;		_InitSensor
  2130 ;;		_main
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           	psect	text11
  2135  0013C8                     __ptext11:
  2136                           	opt stack 0
  2137  0013C8                     _I2C_Stop:
  2138                           	opt stack 24
  2139                           
  2140                           ;soft_i2c.c: 76: I2C_SDA_OUT_SET();
  2141                           
  2142                           ;incstack = 0
  2143  0013C8  EC5D  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  2144                           
  2145                           ;soft_i2c.c: 79: I2C_SCL_SET();
  2146  0013CC  EC63  F00A         	call	_I2C_SCL_SET	;wreg free
  2147                           
  2148                           ;soft_i2c.c: 80: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2149  0013D0  0E6A               	movlw	106
  2150  0013D2                     u3077:
  2151  0013D2  2EE8               	decfsz	wreg,f,c
  2152  0013D4  D7FE               	goto	u3077
  2153  0013D6  D000               	nop2		;nop
  2154                           
  2155                           ;soft_i2c.c: 81: I2C_SDA_SET();
  2156  0013D8  EC5B  F00A         	call	_I2C_SDA_SET	;wreg free
  2157                           
  2158                           ;soft_i2c.c: 82: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2159  0013DC  0E6A               	movlw	106
  2160  0013DE                     u3087:
  2161  0013DE  2EE8               	decfsz	wreg,f,c
  2162  0013E0  D7FE               	goto	u3087
  2163  0013E2  D000               	nop2		;nop
  2164  0013E4  0012               	return		;funcret
  2165  0013E6                     __end_of_I2C_Stop:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           intcon	equ	0xFF2
  2172                           intcon2	equ	0xFF1
  2173                           postinc0	equ	0xFEE
  2174                           wreg	equ	0xFE8
  2175                           postdec1	equ	0xFE5
  2176                           fsr1h	equ	0xFE2
  2177                           fsr1l	equ	0xFE1
  2178                           status	equ	0xFD8
  2179                           
  2180 ;; *************** function _I2C_Start *****************
  2181 ;; Defined at:
  2182 ;;		line 57 in file "soft_i2c.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;		None
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;		None
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      void 
  2189 ;; Registers used:
  2190 ;;		wreg, cstack
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;Total ram usage:        0 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    5
  2203 ;; This function calls:
  2204 ;;		_I2C_SCL_CLEAR
  2205 ;;		_I2C_SCL_SET
  2206 ;;		_I2C_SDA_CLEAR
  2207 ;;		_I2C_SDA_OUT_SET
  2208 ;;		_I2C_SDA_SET
  2209 ;; This function is called by:
  2210 ;;		_InitSensor
  2211 ;;		_main
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text12
  2216  001236                     __ptext12:
  2217                           	opt stack 0
  2218  001236                     _I2C_Start:
  2219                           	opt stack 24
  2220                           
  2221                           ;soft_i2c.c: 58: I2C_SDA_OUT_SET();
  2222                           
  2223                           ;incstack = 0
  2224  001236  EC5D  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  2225                           
  2226                           ;soft_i2c.c: 61: I2C_SDA_SET();
  2227  00123A  EC5B  F00A         	call	_I2C_SDA_SET	;wreg free
  2228                           
  2229                           ;soft_i2c.c: 62: I2C_SCL_SET();
  2230  00123E  EC63  F00A         	call	_I2C_SCL_SET	;wreg free
  2231                           
  2232                           ;soft_i2c.c: 63: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2233  001242  0E6A               	movlw	106
  2234  001244                     u3097:
  2235  001244  2EE8               	decfsz	wreg,f,c
  2236  001246  D7FE               	goto	u3097
  2237  001248  D000               	nop2		;nop
  2238                           
  2239                           ;soft_i2c.c: 66: I2C_SDA_CLEAR();
  2240  00124A  EC61  F00A         	call	_I2C_SDA_CLEAR	;wreg free
  2241                           
  2242                           ;soft_i2c.c: 67: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2243  00124E  0E6A               	movlw	106
  2244  001250                     u3107:
  2245  001250  2EE8               	decfsz	wreg,f,c
  2246  001252  D7FE               	goto	u3107
  2247  001254  D000               	nop2		;nop
  2248                           
  2249                           ;soft_i2c.c: 68: I2C_SCL_CLEAR();
  2250  001256  EC65  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  2251                           
  2252                           ;soft_i2c.c: 69: _delay((unsigned long)((20)*(64000000/4000000.0)));
  2253  00125A  0E6A               	movlw	106
  2254  00125C                     u3117:
  2255  00125C  2EE8               	decfsz	wreg,f,c
  2256  00125E  D7FE               	goto	u3117
  2257  001260  D000               	nop2		;nop
  2258  001262  0012               	return		;funcret
  2259  001264                     __end_of_I2C_Start:
  2260                           	opt stack 0
  2261                           tblptru	equ	0xFF8
  2262                           tblptrh	equ	0xFF7
  2263                           tblptrl	equ	0xFF6
  2264                           tablat	equ	0xFF5
  2265                           intcon	equ	0xFF2
  2266                           intcon2	equ	0xFF1
  2267                           postinc0	equ	0xFEE
  2268                           wreg	equ	0xFE8
  2269                           postdec1	equ	0xFE5
  2270                           fsr1h	equ	0xFE2
  2271                           fsr1l	equ	0xFE1
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _I2C_Init *****************
  2275 ;; Defined at:
  2276 ;;		line 46 in file "soft_i2c.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;		None
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;		None
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;Total ram usage:        1 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    5
  2297 ;; This function calls:
  2298 ;;		_I2C_SCL_OUT_SET
  2299 ;;		_I2C_SCL_SET
  2300 ;;		_I2C_SDA_OUT_SET
  2301 ;;		_I2C_SDA_SET
  2302 ;; This function is called by:
  2303 ;;		_InitSensor
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text13
  2308  0013A8                     __ptext13:
  2309                           	opt stack 0
  2310  0013A8                     _I2C_Init:
  2311                           	opt stack 24
  2312                           
  2313                           ;soft_i2c.c: 47: I2C_SDA_OUT_SET();
  2314                           
  2315                           ;incstack = 0
  2316  0013A8  EC5D  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  2317                           
  2318                           ;soft_i2c.c: 48: I2C_SCL_OUT_SET();
  2319  0013AC  EC59  F00A         	call	_I2C_SCL_OUT_SET	;wreg free
  2320                           
  2321                           ;soft_i2c.c: 49: I2C_SCL_SET();
  2322  0013B0  EC63  F00A         	call	_I2C_SCL_SET	;wreg free
  2323                           
  2324                           ;soft_i2c.c: 50: I2C_SDA_SET();
  2325  0013B4  EC5B  F00A         	call	_I2C_SDA_SET	;wreg free
  2326                           
  2327                           ;soft_i2c.c: 51: _delay((unsigned long)((10)*(64000000/4000.0)));
  2328  0013B8  0ED0               	movlw	208
  2329  0013BA  6E25               	movwf	??_I2C_Init& (0+255),c
  2330  0013BC  0ECA               	movlw	202
  2331  0013BE                     u3127:
  2332  0013BE  2EE8               	decfsz	wreg,f,c
  2333  0013C0  D7FE               	goto	u3127
  2334  0013C2  2E25               	decfsz	??_I2C_Init& (0+255),f,c
  2335  0013C4  D7FC               	goto	u3127
  2336  0013C6  0012               	return		;funcret
  2337  0013C8                     __end_of_I2C_Init:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           intcon	equ	0xFF2
  2344                           intcon2	equ	0xFF1
  2345                           postinc0	equ	0xFEE
  2346                           wreg	equ	0xFE8
  2347                           postdec1	equ	0xFE5
  2348                           fsr1h	equ	0xFE2
  2349                           fsr1l	equ	0xFE1
  2350                           status	equ	0xFD8
  2351                           
  2352 ;; *************** function _I2C_SCL_OUT_SET *****************
  2353 ;; Defined at:
  2354 ;;		line 35 in file "soft_i2c.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;		None
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      void 
  2361 ;; Registers used:
  2362 ;;		None
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;Total ram usage:        0 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    4
  2375 ;; This function calls:
  2376 ;;		Nothing
  2377 ;; This function is called by:
  2378 ;;		_I2C_Init
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           	psect	text14
  2383  0014B2                     __ptext14:
  2384                           	opt stack 0
  2385  0014B2                     _I2C_SCL_OUT_SET:
  2386                           	opt stack 24
  2387                           
  2388                           ;soft_i2c.c: 36: TRISC3 = 0;
  2389                           
  2390                           ;incstack = 0
  2391  0014B2  9694               	bcf	3988,3,c	;volatile
  2392  0014B4  0012               	return		;funcret
  2393  0014B6                     __end_of_I2C_SCL_OUT_SET:
  2394                           	opt stack 0
  2395                           tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           intcon	equ	0xFF2
  2400                           intcon2	equ	0xFF1
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           postdec1	equ	0xFE5
  2404                           fsr1h	equ	0xFE2
  2405                           fsr1l	equ	0xFE1
  2406                           status	equ	0xFD8
  2407                           
  2408 ;; *************** function _InitRadio *****************
  2409 ;; Defined at:
  2410 ;;		line 62 in file "main.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;		None
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;  delay           2   35[BANK0 ] int 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2427 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2428 ;;Total ram usage:        2 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    8
  2431 ;; This function calls:
  2432 ;;		___awmod
  2433 ;;		_getUUID
  2434 ;;		_printf
  2435 ;;		_rand
  2436 ;;		_read_line
  2437 ;;		_srand
  2438 ;;		_strtol
  2439 ;;		_wait_5ms
  2440 ;; This function is called by:
  2441 ;;		_main
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           	psect	text15
  2446  0007DC                     __ptext15:
  2447                           	opt stack 0
  2448  0007DC                     _InitRadio:
  2449                           	opt stack 22
  2450                           
  2451                           ;main.c: 63: wait_5ms(5);
  2452                           
  2453                           ;incstack = 0
  2454  0007DC  0E00               	movlw	0
  2455  0007DE  0100               	movlb	0	; () banked
  2456  0007E0  6F98               	movwf	(wait_5ms@j+1)& (0+255),b
  2457  0007E2  0E05               	movlw	5
  2458  0007E4  6F97               	movwf	wait_5ms@j& (0+255),b
  2459  0007E6  EC53  F008         	call	_wait_5ms	;wreg free
  2460                           
  2461                           ;main.c: 64: printf("sys reset\r\n");
  2462  0007EA  0ECD               	movlw	low STR_6
  2463  0007EC  0100               	movlb	0	; () banked
  2464  0007EE  6F8E               	movwf	printf@f& (0+255),b
  2465  0007F0  0EFF               	movlw	high STR_6
  2466  0007F2  0100               	movlb	0	; () banked
  2467  0007F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  2468  0007F6  EC4C  F000         	call	_printf	;wreg free
  2469                           
  2470                           ;main.c: 65: wait_5ms(5);
  2471  0007FA  0E00               	movlw	0
  2472  0007FC  0100               	movlb	0	; () banked
  2473  0007FE  6F98               	movwf	(wait_5ms@j+1)& (0+255),b
  2474  000800  0E05               	movlw	5
  2475  000802  6F97               	movwf	wait_5ms@j& (0+255),b
  2476  000804  EC53  F008         	call	_wait_5ms	;wreg free
  2477                           
  2478                           ;main.c: 66: printf("sys get ver\r\n");
  2479  000808  0EB3               	movlw	low STR_7
  2480  00080A  0100               	movlb	0	; () banked
  2481  00080C  6F8E               	movwf	printf@f& (0+255),b
  2482  00080E  0EFF               	movlw	high STR_7
  2483  000810  0100               	movlb	0	; () banked
  2484  000812  6F8F               	movwf	(printf@f+1)& (0+255),b
  2485  000814  EC4C  F000         	call	_printf	;wreg free
  2486                           
  2487                           ;main.c: 67: read_line();
  2488  000818  EC3F  F00A         	call	_read_line	;wreg free
  2489                           
  2490                           ;main.c: 68: printf("radio get sf\r\n");
  2491  00081C  0E86               	movlw	low STR_8
  2492  00081E  0100               	movlb	0	; () banked
  2493  000820  6F8E               	movwf	printf@f& (0+255),b
  2494  000822  0EFF               	movlw	high STR_8
  2495  000824  0100               	movlb	0	; () banked
  2496  000826  6F8F               	movwf	(printf@f+1)& (0+255),b
  2497  000828  EC4C  F000         	call	_printf	;wreg free
  2498                           
  2499                           ;main.c: 69: read_line();
  2500  00082C  EC3F  F00A         	call	_read_line	;wreg free
  2501                           
  2502                           ;main.c: 70: printf("radio get bw\r\n");
  2503  000830  0EA4               	movlw	low STR_9
  2504  000832  0100               	movlb	0	; () banked
  2505  000834  6F8E               	movwf	printf@f& (0+255),b
  2506  000836  0EFF               	movlw	high STR_9
  2507  000838  0100               	movlb	0	; () banked
  2508  00083A  6F8F               	movwf	(printf@f+1)& (0+255),b
  2509  00083C  EC4C  F000         	call	_printf	;wreg free
  2510                           
  2511                           ;main.c: 71: read_line();
  2512  000840  EC3F  F00A         	call	_read_line	;wreg free
  2513                           
  2514                           ;main.c: 72: printf("radio get cr\r\n");
  2515  000844  0E95               	movlw	low STR_10
  2516  000846  0100               	movlb	0	; () banked
  2517  000848  6F8E               	movwf	printf@f& (0+255),b
  2518  00084A  0EFF               	movlw	high STR_10
  2519  00084C  0100               	movlb	0	; () banked
  2520  00084E  6F8F               	movwf	(printf@f+1)& (0+255),b
  2521  000850  EC4C  F000         	call	_printf	;wreg free
  2522                           
  2523                           ;main.c: 73: read_line();
  2524  000854  EC3F  F00A         	call	_read_line	;wreg free
  2525                           
  2526                           ;main.c: 74: printf("radio get prlen\r\n");
  2527  000858  0E43               	movlw	low STR_11
  2528  00085A  0100               	movlb	0	; () banked
  2529  00085C  6F8E               	movwf	printf@f& (0+255),b
  2530  00085E  0EFF               	movlw	high STR_11
  2531  000860  0100               	movlb	0	; () banked
  2532  000862  6F8F               	movwf	(printf@f+1)& (0+255),b
  2533  000864  EC4C  F000         	call	_printf	;wreg free
  2534                           
  2535                           ;main.c: 75: read_line();
  2536  000868  EC3F  F00A         	call	_read_line	;wreg free
  2537                           
  2538                           ;main.c: 76: printf("radio get pwr\r\n");
  2539  00086C  0E76               	movlw	low STR_12
  2540  00086E  0100               	movlb	0	; () banked
  2541  000870  6F8E               	movwf	printf@f& (0+255),b
  2542  000872  0EFF               	movlw	high STR_12
  2543  000874  0100               	movlb	0	; () banked
  2544  000876  6F8F               	movwf	(printf@f+1)& (0+255),b
  2545  000878  EC4C  F000         	call	_printf	;wreg free
  2546                           
  2547                           ;main.c: 77: read_line();
  2548  00087C  EC3F  F00A         	call	_read_line	;wreg free
  2549                           
  2550                           ;main.c: 78: printf("mac pause\r\n");
  2551  000880  0EC1               	movlw	low STR_13
  2552  000882  0100               	movlb	0	; () banked
  2553  000884  6F8E               	movwf	printf@f& (0+255),b
  2554  000886  0EFF               	movlw	high STR_13
  2555  000888  0100               	movlb	0	; () banked
  2556  00088A  6F8F               	movwf	(printf@f+1)& (0+255),b
  2557  00088C  EC4C  F000         	call	_printf	;wreg free
  2558                           
  2559                           ;main.c: 79: read_line();
  2560  000890  EC3F  F00A         	call	_read_line	;wreg free
  2561                           
  2562                           ;main.c: 81: printf("radio set pwr -2\r\n");
  2563  000894  0EE4               	movlw	low STR_14
  2564  000896  0100               	movlb	0	; () banked
  2565  000898  6F8E               	movwf	printf@f& (0+255),b
  2566  00089A  0EFE               	movlw	high STR_14
  2567  00089C  0100               	movlb	0	; () banked
  2568  00089E  6F8F               	movwf	(printf@f+1)& (0+255),b
  2569  0008A0  EC4C  F000         	call	_printf	;wreg free
  2570                           
  2571                           ;main.c: 82: read_line();
  2572  0008A4  EC3F  F00A         	call	_read_line	;wreg free
  2573                           
  2574                           ;main.c: 83: printf("radio set bw 500\r\n");
  2575  0008A8  0ED1               	movlw	low STR_15
  2576  0008AA  0100               	movlb	0	; () banked
  2577  0008AC  6F8E               	movwf	printf@f& (0+255),b
  2578  0008AE  0EFE               	movlw	high STR_15
  2579  0008B0  0100               	movlb	0	; () banked
  2580  0008B2  6F8F               	movwf	(printf@f+1)& (0+255),b
  2581  0008B4  EC4C  F000         	call	_printf	;wreg free
  2582                           
  2583                           ;main.c: 84: read_line();
  2584  0008B8  EC3F  F00A         	call	_read_line	;wreg free
  2585                           
  2586                           ;main.c: 85: printf("radio set sf sf7\r\n");
  2587  0008BC  0EF7               	movlw	low STR_16
  2588  0008BE  0100               	movlb	0	; () banked
  2589  0008C0  6F8E               	movwf	printf@f& (0+255),b
  2590  0008C2  0EFE               	movlw	high STR_16
  2591  0008C4  0100               	movlb	0	; () banked
  2592  0008C6  6F8F               	movwf	(printf@f+1)& (0+255),b
  2593  0008C8  EC4C  F000         	call	_printf	;wreg free
  2594                           
  2595                           ;main.c: 86: read_line();
  2596  0008CC  EC3F  F00A         	call	_read_line	;wreg free
  2597                           
  2598                           ;main.c: 87: printf("radio set cr 4/8\r\n");
  2599  0008D0  0E0A               	movlw	low STR_17
  2600  0008D2  0100               	movlb	0	; () banked
  2601  0008D4  6F8E               	movwf	printf@f& (0+255),b
  2602  0008D6  0EFF               	movlw	high STR_17
  2603  0008D8  0100               	movlb	0	; () banked
  2604  0008DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  2605  0008DC  EC4C  F000         	call	_printf	;wreg free
  2606                           
  2607                           ;main.c: 88: read_line();
  2608  0008E0  EC3F  F00A         	call	_read_line	;wreg free
  2609                           
  2610                           ;main.c: 89: printf("radio set crc on\r\n");
  2611  0008E4  0E30               	movlw	low STR_18
  2612  0008E6  0100               	movlb	0	; () banked
  2613  0008E8  6F8E               	movwf	printf@f& (0+255),b
  2614  0008EA  0EFF               	movlw	high STR_18
  2615  0008EC  0100               	movlb	0	; () banked
  2616  0008EE  6F8F               	movwf	(printf@f+1)& (0+255),b
  2617  0008F0  EC4C  F000         	call	_printf	;wreg free
  2618                           
  2619                           ;main.c: 90: read_line();
  2620  0008F4  EC3F  F00A         	call	_read_line	;wreg free
  2621                           
  2622                           ;main.c: 92: getUUID();
  2623  0008F8  EC75  F009         	call	_getUUID	;wreg free
  2624                           
  2625                           ;main.c: 94: srand((int)strtol(uuid, (0), 0));
  2626  0008FC  0E61               	movlw	low _uuid
  2627  0008FE  0100               	movlb	0	; () banked
  2628  000900  6F91               	movwf	strtol@s& (0+255),b
  2629  000902  0E00               	movlw	high _uuid
  2630  000904  0100               	movlb	0	; () banked
  2631  000906  6F92               	movwf	(strtol@s+1)& (0+255),b
  2632  000908  0E00               	movlw	0
  2633  00090A  0100               	movlb	0	; () banked
  2634  00090C  6F93               	movwf	strtol@endptr& (0+255),b
  2635  00090E  0E00               	movlw	0
  2636  000910  0100               	movlb	0	; () banked
  2637  000912  6F94               	movwf	(strtol@endptr+1)& (0+255),b
  2638  000914  0E00               	movlw	0
  2639  000916  0100               	movlb	0	; () banked
  2640  000918  6F96               	movwf	(strtol@base+1)& (0+255),b
  2641  00091A  0E00               	movlw	0
  2642  00091C  6F95               	movwf	strtol@base& (0+255),b
  2643  00091E  ECCB  F002         	call	_strtol	;wreg free
  2644  000922  C091  F0A1         	movff	?_strtol,srand@x
  2645  000926  C092  F0A2         	movff	?_strtol+1,srand@x+1
  2646  00092A  EC38  F00A         	call	_srand	;wreg free
  2647                           
  2648                           ;main.c: 95: int delay = 2000+(rand()%1000);
  2649  00092E  EC00  F008         	call	_rand	;wreg free
  2650  000932  C029  F091         	movff	?_rand,___awmod@dividend
  2651  000936  C02A  F092         	movff	?_rand+1,___awmod@dividend+1
  2652  00093A  0E03               	movlw	3
  2653  00093C  0100               	movlb	0	; () banked
  2654  00093E  6F94               	movwf	(___awmod@divisor+1)& (0+255),b
  2655  000940  0EE8               	movlw	232
  2656  000942  6F93               	movwf	___awmod@divisor& (0+255),b
  2657  000944  ECC4  F005         	call	___awmod	;wreg free
  2658  000948  0ED0               	movlw	208
  2659  00094A  0100               	movlb	0	; () banked
  2660  00094C  2591               	addwf	?___awmod& (0+255),w,b
  2661  00094E  0100               	movlb	0	; () banked
  2662  000950  6FAC               	movwf	InitRadio@delay& (0+255),b
  2663  000952  0E07               	movlw	7
  2664  000954  0100               	movlb	0	; () banked
  2665  000956  2192               	addwfc	(?___awmod+1)& (0+255),w,b
  2666  000958  0100               	movlb	0	; () banked
  2667  00095A  6FAD               	movwf	(InitRadio@delay+1)& (0+255),b
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;main.c: 96: printf("radio set wdt %d\r\n",delay);
  2671  00095C  0E1D               	movlw	low STR_19
  2672  00095E  0100               	movlb	0	; () banked
  2673  000960  6F8E               	movwf	printf@f& (0+255),b
  2674  000962  0EFF               	movlw	high STR_19
  2675  000964  0100               	movlb	0	; () banked
  2676  000966  6F8F               	movwf	(printf@f+1)& (0+255),b
  2677  000968  C0AC  F090         	movff	InitRadio@delay,?_printf+2
  2678  00096C  C0AD  F091         	movff	InitRadio@delay+1,?_printf+3
  2679  000970  EC4C  F000         	call	_printf	;wreg free
  2680                           
  2681                           ;main.c: 97: read_line();
  2682  000974  EC3F  F00A         	call	_read_line	;wreg free
  2683  000978  0012               	return		;funcret
  2684  00097A                     __end_of_InitRadio:
  2685                           	opt stack 0
  2686                           tblptru	equ	0xFF8
  2687                           tblptrh	equ	0xFF7
  2688                           tblptrl	equ	0xFF6
  2689                           tablat	equ	0xFF5
  2690                           intcon	equ	0xFF2
  2691                           intcon2	equ	0xFF1
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           postdec1	equ	0xFE5
  2695                           fsr1h	equ	0xFE2
  2696                           fsr1l	equ	0xFE1
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _wait_5ms *****************
  2700 ;; Defined at:
  2701 ;;		line 42 in file "main.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  j               2   14[BANK0 ] int 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  i               1   42[COMRAM] unsigned char 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  1    wreg      void 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2, status,0
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2715 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;Total ram usage:        6 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    4
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_InitRadio
  2726 ;;		_main
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           	psect	text16
  2731  0010A6                     __ptext16:
  2732                           	opt stack 0
  2733  0010A6                     _wait_5ms:
  2734                           	opt stack 26
  2735                           
  2736                           ;main.c: 43: for(uint8_t i=0;i<j;i++) { _delay((unsigned long)((5)*(64000000/4000.0))); 
      +                          }
  2737                           
  2738                           ;incstack = 0
  2739  0010A6  0E00               	movlw	0
  2740  0010A8  6E2B               	movwf	wait_5ms@i,c
  2741  0010AA  D00A               	goto	l284
  2742  0010AC                     l3217:
  2743  0010AC  0E68               	movlw	104
  2744  0010AE  0100               	movlb	0	; () banked
  2745  0010B0  6F99               	movwf	??_wait_5ms& (0+255),b
  2746  0010B2  0EE4               	movlw	228
  2747  0010B4                     u3137:
  2748  0010B4  2EE8               	decfsz	wreg,f,c
  2749  0010B6  D7FE               	goto	u3137
  2750  0010B8  2F99               	decfsz	??_wait_5ms& (0+255),f,b
  2751  0010BA  D7FC               	goto	u3137
  2752  0010BC  D000               	nop2	
  2753  0010BE  2A2B               	incf	wait_5ms@i,f,c
  2754  0010C0                     l284:
  2755  0010C0  502B               	movf	wait_5ms@i,w,c
  2756  0010C2  0100               	movlb	0	; () banked
  2757  0010C4  6F99               	movwf	??_wait_5ms& (0+255),b
  2758  0010C6  6B9A               	clrf	(??_wait_5ms+1)& (0+255),b
  2759  0010C8  0100               	movlb	0	; () banked
  2760  0010CA  5197               	movf	wait_5ms@j& (0+255),w,b
  2761  0010CC  0100               	movlb	0	; () banked
  2762  0010CE  5D99               	subwf	??_wait_5ms& (0+255),w,b
  2763  0010D0  0100               	movlb	0	; () banked
  2764  0010D2  519A               	movf	(??_wait_5ms+1)& (0+255),w,b
  2765  0010D4  0A80               	xorlw	128
  2766  0010D6  0100               	movlb	0	; () banked
  2767  0010D8  6F9B               	movwf	(??_wait_5ms+2)& (0+255),b
  2768  0010DA  0100               	movlb	0	; () banked
  2769  0010DC  5198               	movf	(wait_5ms@j+1)& (0+255),w,b
  2770  0010DE  0A80               	xorlw	128
  2771  0010E0  0100               	movlb	0	; () banked
  2772  0010E2  599B               	subwfb	(??_wait_5ms+2)& (0+255),w,b
  2773  0010E4  B0D8               	btfsc	status,0,c
  2774  0010E6  0012               	return	
  2775  0010E8  D7E1               	goto	l3217
  2776  0010EA                     __end_of_wait_5ms:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           intcon	equ	0xFF2
  2783                           intcon2	equ	0xFF1
  2784                           postinc0	equ	0xFEE
  2785                           wreg	equ	0xFE8
  2786                           postdec1	equ	0xFE5
  2787                           fsr1h	equ	0xFE2
  2788                           fsr1l	equ	0xFE1
  2789                           status	equ	0xFD8
  2790                           
  2791 ;; *************** function _strtol *****************
  2792 ;; Defined at:
  2793 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strtol.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  2796 ;;		 -> uuid(40), 
  2797 ;;  endptr          2   10[BANK0 ] PTR PTR unsigned char 
  2798 ;;		 -> NULL(0), 
  2799 ;;  base            2   12[BANK0 ] int 
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;  a               4   19[BANK0 ] long 
  2802 ;;  c               1   23[BANK0 ] unsigned char 
  2803 ;;  sign            1   18[BANK0 ] unsigned char 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  4    8[BANK0 ] long 
  2806 ;; Registers used:
  2807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2813 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;Total ram usage:       16 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    6
  2820 ;; This function calls:
  2821 ;;		___lmul
  2822 ;;		_isalpha
  2823 ;;		_isdigit
  2824 ;;		_isspace
  2825 ;;		_toupper
  2826 ;; This function is called by:
  2827 ;;		_InitRadio
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text17
  2832  000596                     __ptext17:
  2833                           	opt stack 0
  2834  000596                     _strtol:
  2835                           	opt stack 23
  2836  000596  C091  FFD9         	movff	strtol@s,fsr2l
  2837  00059A  C092  FFDA         	movff	strtol@s+1,fsr2h
  2838  00059E  50DF               	movf	indf2,w,c
  2839  0005A0  0100               	movlb	0	; () banked
  2840  0005A2  6FA0               	movwf	strtol@c& (0+255),b
  2841                           
  2842                           ; BSR set to: 0
  2843  0005A4  0100               	movlb	0	; () banked
  2844  0005A6  4B91               	infsnz	strtol@s& (0+255),f,b
  2845  0005A8  2B92               	incf	(strtol@s+1)& (0+255),f,b
  2846                           
  2847                           ; BSR set to: 0
  2848  0005AA  0100               	movlb	0	; () banked
  2849  0005AC  51A0               	movf	strtol@c& (0+255),w,b
  2850  0005AE  EC9E  F009         	call	_isspace
  2851  0005B2  B0D8               	btfsc	status,0,c
  2852  0005B4  D7F0               	goto	l3227
  2853  0005B6  0E00               	movlw	0
  2854  0005B8  0100               	movlb	0	; () banked
  2855  0005BA  6F9C               	movwf	strtol@a& (0+255),b
  2856  0005BC  0E00               	movlw	0
  2857  0005BE  6F9D               	movwf	(strtol@a+1)& (0+255),b
  2858  0005C0  0E00               	movlw	0
  2859  0005C2  6F9E               	movwf	(strtol@a+2)& (0+255),b
  2860  0005C4  0E00               	movlw	0
  2861  0005C6  6F9F               	movwf	(strtol@a+3)& (0+255),b
  2862  0005C8  0E00               	movlw	0
  2863  0005CA  0100               	movlb	0	; () banked
  2864  0005CC  6F9B               	movwf	strtol@sign& (0+255),b
  2865                           
  2866                           ; BSR set to: 0
  2867  0005CE  0E2D               	movlw	45
  2868  0005D0  0100               	movlb	0	; () banked
  2869  0005D2  19A0               	xorwf	strtol@c& (0+255),w,b
  2870  0005D4  A4D8               	btfss	status,2,c
  2871  0005D6  D008               	goto	l3243
  2872                           
  2873                           ; BSR set to: 0
  2874  0005D8  0E01               	movlw	1
  2875  0005DA  0100               	movlb	0	; () banked
  2876  0005DC  6F9B               	movwf	strtol@sign& (0+255),b
  2877  0005DE  D009               	goto	l3245
  2878  0005E0                     l3241:
  2879                           
  2880                           ; BSR set to: 0
  2881  0005E0  0100               	movlb	0	; () banked
  2882  0005E2  4B91               	infsnz	strtol@s& (0+255),f,b
  2883  0005E4  2B92               	incf	(strtol@s+1)& (0+255),f,b
  2884  0005E6  D00D               	goto	l3249
  2885  0005E8                     l3243:
  2886                           
  2887                           ; BSR set to: 0
  2888  0005E8  0E2B               	movlw	43
  2889  0005EA  0100               	movlb	0	; () banked
  2890  0005EC  19A0               	xorwf	strtol@c& (0+255),w,b
  2891  0005EE  A4D8               	btfss	status,2,c
  2892  0005F0  D008               	goto	l3249
  2893  0005F2                     l3245:
  2894                           
  2895                           ; BSR set to: 0
  2896  0005F2  C091  FFD9         	movff	strtol@s,fsr2l
  2897  0005F6  C092  FFDA         	movff	strtol@s+1,fsr2h
  2898  0005FA  50DF               	movf	indf2,w,c
  2899  0005FC  0100               	movlb	0	; () banked
  2900  0005FE  6FA0               	movwf	strtol@c& (0+255),b
  2901  000600  D7EF               	goto	l3241
  2902  000602                     l3249:
  2903                           
  2904                           ; BSR set to: 0
  2905  000602  0E30               	movlw	48
  2906  000604  0100               	movlb	0	; () banked
  2907  000606  19A0               	xorwf	strtol@c& (0+255),w,b
  2908  000608  A4D8               	btfss	status,2,c
  2909  00060A  D03C               	goto	l3273
  2910                           
  2911                           ; BSR set to: 0
  2912  00060C  C091  FFD9         	movff	strtol@s,fsr2l
  2913  000610  C092  FFDA         	movff	strtol@s+1,fsr2h
  2914  000614  50DF               	movf	indf2,w,c
  2915  000616  0100               	movlb	0	; () banked
  2916  000618  6FA0               	movwf	strtol@c& (0+255),b
  2917                           
  2918                           ; BSR set to: 0
  2919  00061A  0100               	movlb	0	; () banked
  2920  00061C  4B91               	infsnz	strtol@s& (0+255),f,b
  2921  00061E  2B92               	incf	(strtol@s+1)& (0+255),f,b
  2922                           
  2923                           ; BSR set to: 0
  2924  000620  0100               	movlb	0	; () banked
  2925  000622  5195               	movf	strtol@base& (0+255),w,b
  2926  000624  0100               	movlb	0	; () banked
  2927  000626  1196               	iorwf	(strtol@base+1)& (0+255),w,b
  2928  000628  B4D8               	btfsc	status,2,c
  2929  00062A  D007               	goto	l3259
  2930                           
  2931                           ; BSR set to: 0
  2932  00062C  0E10               	movlw	16
  2933  00062E  0100               	movlb	0	; () banked
  2934  000630  1995               	xorwf	strtol@base& (0+255),w,b
  2935  000632  0100               	movlb	0	; () banked
  2936  000634  1196               	iorwf	(strtol@base+1)& (0+255),w,b
  2937  000636  A4D8               	btfss	status,2,c
  2938  000638  D01A               	goto	l3269
  2939  00063A                     l3259:
  2940                           
  2941                           ; BSR set to: 0
  2942  00063A  0E78               	movlw	120
  2943  00063C  0100               	movlb	0	; () banked
  2944  00063E  19A0               	xorwf	strtol@c& (0+255),w,b
  2945  000640  B4D8               	btfsc	status,2,c
  2946  000642  D005               	goto	l3263
  2947                           
  2948                           ; BSR set to: 0
  2949  000644  0E58               	movlw	88
  2950  000646  0100               	movlb	0	; () banked
  2951  000648  19A0               	xorwf	strtol@c& (0+255),w,b
  2952  00064A  A4D8               	btfss	status,2,c
  2953  00064C  D010               	goto	l3269
  2954  00064E                     l3263:
  2955                           
  2956                           ; BSR set to: 0
  2957  00064E  0E00               	movlw	0
  2958  000650  0100               	movlb	0	; () banked
  2959  000652  6F96               	movwf	(strtol@base+1)& (0+255),b
  2960  000654  0E10               	movlw	16
  2961  000656  6F95               	movwf	strtol@base& (0+255),b
  2962                           
  2963                           ; BSR set to: 0
  2964  000658  C091  FFD9         	movff	strtol@s,fsr2l
  2965  00065C  C092  FFDA         	movff	strtol@s+1,fsr2h
  2966  000660  50DF               	movf	indf2,w,c
  2967  000662  0100               	movlb	0	; () banked
  2968  000664  6FA0               	movwf	strtol@c& (0+255),b
  2969                           
  2970                           ; BSR set to: 0
  2971  000666  0100               	movlb	0	; () banked
  2972  000668  4B91               	infsnz	strtol@s& (0+255),f,b
  2973  00066A  2B92               	incf	(strtol@s+1)& (0+255),f,b
  2974  00066C  D00B               	goto	l3273
  2975  00066E                     l3269:
  2976                           
  2977                           ; BSR set to: 0
  2978  00066E  0100               	movlb	0	; () banked
  2979  000670  5195               	movf	strtol@base& (0+255),w,b
  2980  000672  0100               	movlb	0	; () banked
  2981  000674  1196               	iorwf	(strtol@base+1)& (0+255),w,b
  2982  000676  A4D8               	btfss	status,2,c
  2983  000678  D005               	goto	l3273
  2984                           
  2985                           ; BSR set to: 0
  2986  00067A  0E00               	movlw	0
  2987  00067C  0100               	movlb	0	; () banked
  2988  00067E  6F96               	movwf	(strtol@base+1)& (0+255),b
  2989  000680  0E08               	movlw	8
  2990  000682  6F95               	movwf	strtol@base& (0+255),b
  2991  000684                     l3273:
  2992                           
  2993                           ; BSR set to: 0
  2994  000684  0100               	movlb	0	; () banked
  2995  000686  5195               	movf	strtol@base& (0+255),w,b
  2996  000688  0100               	movlb	0	; () banked
  2997  00068A  1196               	iorwf	(strtol@base+1)& (0+255),w,b
  2998  00068C  A4D8               	btfss	status,2,c
  2999  00068E  D005               	goto	l3277
  3000                           
  3001                           ; BSR set to: 0
  3002  000690  0E00               	movlw	0
  3003  000692  0100               	movlb	0	; () banked
  3004  000694  6F96               	movwf	(strtol@base+1)& (0+255),b
  3005  000696  0E0A               	movlw	10
  3006  000698  6F95               	movwf	strtol@base& (0+255),b
  3007  00069A                     l3277:
  3008                           
  3009                           ; BSR set to: 0
  3010  00069A  0100               	movlb	0	; () banked
  3011  00069C  51A0               	movf	strtol@c& (0+255),w,b
  3012  00069E  EC8A  F009         	call	_isalpha
  3013  0006A2  A0D8               	btfss	status,0,c
  3014  0006A4  D008               	goto	l3281
  3015  0006A6  0100               	movlb	0	; () banked
  3016  0006A8  51A0               	movf	strtol@c& (0+255),w,b
  3017  0006AA  EC1E  F00A         	call	_toupper
  3018  0006AE  0FC9               	addlw	201
  3019  0006B0  0100               	movlb	0	; () banked
  3020  0006B2  6FA0               	movwf	strtol@c& (0+255),b
  3021  0006B4  D009               	goto	l3285
  3022  0006B6                     l3281:
  3023  0006B6  0100               	movlb	0	; () banked
  3024  0006B8  51A0               	movf	strtol@c& (0+255),w,b
  3025  0006BA  EC02  F00A         	call	_isdigit
  3026  0006BE  A0D8               	btfss	status,0,c
  3027  0006C0  D04C               	goto	l3295
  3028  0006C2  0E30               	movlw	48
  3029  0006C4  0100               	movlb	0	; () banked
  3030  0006C6  5FA0               	subwf	strtol@c& (0+255),f,b
  3031  0006C8                     l3285:
  3032                           
  3033                           ; BSR set to: 0
  3034  0006C8  0100               	movlb	0	; () banked
  3035  0006CA  51A0               	movf	strtol@c& (0+255),w,b
  3036  0006CC  0100               	movlb	0	; () banked
  3037  0006CE  6F97               	movwf	??_strtol& (0+255),b
  3038  0006D0  6B98               	clrf	(??_strtol+1)& (0+255),b
  3039  0006D2  0100               	movlb	0	; () banked
  3040  0006D4  5195               	movf	strtol@base& (0+255),w,b
  3041  0006D6  0100               	movlb	0	; () banked
  3042  0006D8  5D97               	subwf	??_strtol& (0+255),w,b
  3043  0006DA  0100               	movlb	0	; () banked
  3044  0006DC  5198               	movf	(??_strtol+1)& (0+255),w,b
  3045  0006DE  0A80               	xorlw	128
  3046  0006E0  0100               	movlb	0	; () banked
  3047  0006E2  6F99               	movwf	(??_strtol+2)& (0+255),b
  3048  0006E4  0100               	movlb	0	; () banked
  3049  0006E6  5196               	movf	(strtol@base+1)& (0+255),w,b
  3050  0006E8  0A80               	xorlw	128
  3051  0006EA  0100               	movlb	0	; () banked
  3052  0006EC  5999               	subwfb	(??_strtol+2)& (0+255),w,b
  3053  0006EE  B0D8               	btfsc	status,0,c
  3054  0006F0  D034               	goto	l3295
  3055                           
  3056                           ; BSR set to: 0
  3057                           
  3058                           ; BSR set to: 0
  3059                           
  3060                           ; BSR set to: 0
  3061  0006F2  C095  F089         	movff	strtol@base,___lmul@multiplier
  3062  0006F6  C096  F08A         	movff	strtol@base+1,___lmul@multiplier+1
  3063  0006FA  0100               	movlb	0	; () banked
  3064  0006FC  0E00               	movlw	0
  3065  0006FE  BF8A               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  3066  000700  0EFF               	movlw	-1
  3067  000702  6F8B               	movwf	(___lmul@multiplier+2)& (0+255),b
  3068  000704  6F8C               	movwf	(___lmul@multiplier+3)& (0+255),b
  3069  000706  C09C  F08D         	movff	strtol@a,___lmul@multiplicand
  3070  00070A  C09D  F08E         	movff	strtol@a+1,___lmul@multiplicand+1
  3071  00070E  C09E  F08F         	movff	strtol@a+2,___lmul@multiplicand+2
  3072  000712  C09F  F090         	movff	strtol@a+3,___lmul@multiplicand+3
  3073  000716  EC68  F007         	call	___lmul	;wreg free
  3074  00071A  0100               	movlb	0	; () banked
  3075  00071C  51A0               	movf	strtol@c& (0+255),w,b
  3076  00071E  0100               	movlb	0	; () banked
  3077  000720  2589               	addwf	?___lmul& (0+255),w,b
  3078  000722  0100               	movlb	0	; () banked
  3079  000724  6F9C               	movwf	strtol@a& (0+255),b
  3080  000726  0E00               	movlw	0
  3081  000728  0100               	movlb	0	; () banked
  3082  00072A  218A               	addwfc	(?___lmul+1)& (0+255),w,b
  3083  00072C  0100               	movlb	0	; () banked
  3084  00072E  6F9D               	movwf	(strtol@a+1)& (0+255),b
  3085  000730  0E00               	movlw	0
  3086  000732  0100               	movlb	0	; () banked
  3087  000734  218B               	addwfc	(?___lmul+2)& (0+255),w,b
  3088  000736  0100               	movlb	0	; () banked
  3089  000738  6F9E               	movwf	(strtol@a+2)& (0+255),b
  3090  00073A  0E00               	movlw	0
  3091  00073C  0100               	movlb	0	; () banked
  3092  00073E  218C               	addwfc	(?___lmul+3)& (0+255),w,b
  3093  000740  0100               	movlb	0	; () banked
  3094  000742  6F9F               	movwf	(strtol@a+3)& (0+255),b
  3095                           
  3096                           ; BSR set to: 0
  3097  000744  C091  FFD9         	movff	strtol@s,fsr2l
  3098  000748  C092  FFDA         	movff	strtol@s+1,fsr2h
  3099  00074C  50DF               	movf	indf2,w,c
  3100  00074E  0100               	movlb	0	; () banked
  3101  000750  6FA0               	movwf	strtol@c& (0+255),b
  3102                           
  3103                           ; BSR set to: 0
  3104  000752  0100               	movlb	0	; () banked
  3105  000754  4B91               	infsnz	strtol@s& (0+255),f,b
  3106  000756  2B92               	incf	(strtol@s+1)& (0+255),f,b
  3107  000758  D7A0               	goto	l3277
  3108  00075A                     l3295:
  3109  00075A  0100               	movlb	0	; () banked
  3110  00075C  5193               	movf	strtol@endptr& (0+255),w,b
  3111  00075E  0100               	movlb	0	; () banked
  3112  000760  1194               	iorwf	(strtol@endptr+1)& (0+255),w,b
  3113  000762  B4D8               	btfsc	status,2,c
  3114  000764  D012               	goto	l3299
  3115                           
  3116                           ; BSR set to: 0
  3117  000766  0EFF               	movlw	255
  3118  000768  0100               	movlb	0	; () banked
  3119  00076A  2591               	addwf	strtol@s& (0+255),w,b
  3120  00076C  0100               	movlb	0	; () banked
  3121  00076E  6F97               	movwf	??_strtol& (0+255),b
  3122  000770  0EFF               	movlw	255
  3123  000772  0100               	movlb	0	; () banked
  3124  000774  2192               	addwfc	(strtol@s+1)& (0+255),w,b
  3125  000776  0100               	movlb	0	; () banked
  3126  000778  6F98               	movwf	(??_strtol+1)& (0+255),b
  3127  00077A  C093  FFD9         	movff	strtol@endptr,fsr2l
  3128  00077E  C094  FFDA         	movff	strtol@endptr+1,fsr2h
  3129  000782  C097  FFDE         	movff	??_strtol,postinc2
  3130  000786  C098  FFDD         	movff	??_strtol+1,postdec2
  3131  00078A                     l3299:
  3132                           
  3133                           ; BSR set to: 0
  3134  00078A  0100               	movlb	0	; () banked
  3135  00078C  519B               	movf	strtol@sign& (0+255),w,b
  3136  00078E  0100               	movlb	0	; () banked
  3137  000790  B4D8               	btfsc	status,2,c
  3138  000792  D01B               	goto	l1073
  3139                           
  3140                           ; BSR set to: 0
  3141  000794  C09C  F097         	movff	strtol@a,??_strtol
  3142  000798  C09D  F098         	movff	strtol@a+1,??_strtol+1
  3143  00079C  C09E  F099         	movff	strtol@a+2,??_strtol+2
  3144  0007A0  C09F  F09A         	movff	strtol@a+3,??_strtol+3
  3145  0007A4  0100               	movlb	0	; () banked
  3146  0007A6  1F97               	comf	??_strtol& (0+255),f,b
  3147  0007A8  1F98               	comf	(??_strtol+1)& (0+255),f,b
  3148  0007AA  1F99               	comf	(??_strtol+2)& (0+255),f,b
  3149  0007AC  1F9A               	comf	(??_strtol+3)& (0+255),f,b
  3150  0007AE  2B97               	incf	??_strtol& (0+255),f,b
  3151  0007B0  0E00               	movlw	0
  3152  0007B2  2398               	addwfc	(??_strtol+1)& (0+255),f,b
  3153  0007B4  2399               	addwfc	(??_strtol+2)& (0+255),f,b
  3154  0007B6  239A               	addwfc	(??_strtol+3)& (0+255),f,b
  3155  0007B8  C097  F091         	movff	??_strtol,?_strtol
  3156  0007BC  C098  F092         	movff	??_strtol+1,?_strtol+1
  3157  0007C0  C099  F093         	movff	??_strtol+2,?_strtol+2
  3158  0007C4  C09A  F094         	movff	??_strtol+3,?_strtol+3
  3159                           
  3160                           ; BSR set to: 0
  3161  0007C8  0012               	return	
  3162  0007CA                     l1073:
  3163                           
  3164                           ; BSR set to: 0
  3165  0007CA  C09C  F091         	movff	strtol@a,?_strtol
  3166  0007CE  C09D  F092         	movff	strtol@a+1,?_strtol+1
  3167  0007D2  C09E  F093         	movff	strtol@a+2,?_strtol+2
  3168  0007D6  C09F  F094         	movff	strtol@a+3,?_strtol+3
  3169                           
  3170                           ; BSR set to: 0
  3171  0007DA  0012               	return		;funcret
  3172  0007DC                     __end_of_strtol:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           intcon	equ	0xFF2
  3179                           intcon2	equ	0xFF1
  3180                           postinc0	equ	0xFEE
  3181                           wreg	equ	0xFE8
  3182                           postdec1	equ	0xFE5
  3183                           fsr1h	equ	0xFE2
  3184                           fsr1l	equ	0xFE1
  3185                           indf2	equ	0xFDF
  3186                           postinc2	equ	0xFDE
  3187                           postdec2	equ	0xFDD
  3188                           fsr2h	equ	0xFDA
  3189                           fsr2l	equ	0xFD9
  3190                           status	equ	0xFD8
  3191                           
  3192 ;; *************** function _toupper *****************
  3193 ;; Defined at:
  3194 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\toupper.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;  c               1    wreg     unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  c               1   36[COMRAM] unsigned char 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      unsigned char 
  3201 ;; Registers used:
  3202 ;;		wreg, status,2, status,0
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;Total ram usage:        1 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    4
  3215 ;; This function calls:
  3216 ;;		Nothing
  3217 ;; This function is called by:
  3218 ;;		_strtol
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           	psect	text18
  3223  00143C                     __ptext18:
  3224                           	opt stack 0
  3225  00143C                     _toupper:
  3226                           	opt stack 24
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;incstack = 0
  3230                           ;toupper@c stored from wreg
  3231  00143C  6E25               	movwf	toupper@c,c
  3232  00143E  0E7B               	movlw	123
  3233  001440  6025               	cpfslt	toupper@c,c
  3234  001442  D004               	goto	l2505
  3235  001444  0E60               	movlw	96
  3236  001446  6425               	cpfsgt	toupper@c,c
  3237  001448  D001               	goto	l2505
  3238  00144A  9A25               	bcf	toupper@c,5,c
  3239  00144C                     l2505:
  3240  00144C  5025               	movf	toupper@c,w,c
  3241  00144E  0012               	return	
  3242  001450                     __end_of_toupper:
  3243                           	opt stack 0
  3244                           tblptru	equ	0xFF8
  3245                           tblptrh	equ	0xFF7
  3246                           tblptrl	equ	0xFF6
  3247                           tablat	equ	0xFF5
  3248                           intcon	equ	0xFF2
  3249                           intcon2	equ	0xFF1
  3250                           postinc0	equ	0xFEE
  3251                           wreg	equ	0xFE8
  3252                           postdec1	equ	0xFE5
  3253                           fsr1h	equ	0xFE2
  3254                           fsr1l	equ	0xFE1
  3255                           indf2	equ	0xFDF
  3256                           postinc2	equ	0xFDE
  3257                           postdec2	equ	0xFDD
  3258                           fsr2h	equ	0xFDA
  3259                           fsr2l	equ	0xFD9
  3260                           status	equ	0xFD8
  3261                           
  3262 ;; *************** function _isspace *****************
  3263 ;; Defined at:
  3264 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isspace.c"
  3265 ;; Parameters:    Size  Location     Type
  3266 ;;  c               1    wreg     unsigned char 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;  c               1   38[COMRAM] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;		None               void
  3271 ;; Registers used:
  3272 ;;		wreg, status,2, status,0
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;Total ram usage:        3 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    4
  3285 ;; This function calls:
  3286 ;;		Nothing
  3287 ;; This function is called by:
  3288 ;;		_strtol
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text19
  3293  00133C                     __ptext19:
  3294                           	opt stack 0
  3295  00133C                     _isspace:
  3296                           	opt stack 24
  3297                           
  3298                           ;incstack = 0
  3299                           ;isspace@c stored from wreg
  3300  00133C  6E27               	movwf	isspace@c,c
  3301  00133E  0E01               	movlw	1
  3302  001340  6E26               	movwf	_isspace$1481,c
  3303  001342  0E20               	movlw	32
  3304  001344  1827               	xorwf	isspace@c,w,c
  3305  001346  B4D8               	btfsc	status,2,c
  3306  001348  D008               	goto	l2481
  3307  00134A  0E0E               	movlw	14
  3308  00134C  6027               	cpfslt	isspace@c,c
  3309  00134E  D003               	goto	l2479
  3310  001350  0E09               	movlw	9
  3311  001352  6027               	cpfslt	isspace@c,c
  3312  001354  D002               	goto	l2481
  3313  001356                     l2479:
  3314  001356  0E00               	movlw	0
  3315  001358  6E26               	movwf	_isspace$1481,c
  3316  00135A                     l2481:
  3317  00135A  C026  F025         	movff	_isspace$1481,??_isspace
  3318  00135E  3025               	rrcf	??_isspace,w,c
  3319  001360  0012               	return	
  3320  001362                     __end_of_isspace:
  3321                           	opt stack 0
  3322                           tblptru	equ	0xFF8
  3323                           tblptrh	equ	0xFF7
  3324                           tblptrl	equ	0xFF6
  3325                           tablat	equ	0xFF5
  3326                           intcon	equ	0xFF2
  3327                           intcon2	equ	0xFF1
  3328                           postinc0	equ	0xFEE
  3329                           wreg	equ	0xFE8
  3330                           postdec1	equ	0xFE5
  3331                           fsr1h	equ	0xFE2
  3332                           fsr1l	equ	0xFE1
  3333                           indf2	equ	0xFDF
  3334                           postinc2	equ	0xFDE
  3335                           postdec2	equ	0xFDD
  3336                           fsr2h	equ	0xFDA
  3337                           fsr2l	equ	0xFD9
  3338                           status	equ	0xFD8
  3339                           
  3340 ;; *************** function _isalpha *****************
  3341 ;; Defined at:
  3342 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isalpha.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  c               1    wreg     unsigned char 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  c               1   41[COMRAM] unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;		None               void
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, status,0, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;Total ram usage:        3 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    5
  3363 ;; This function calls:
  3364 ;;		_isupper
  3365 ;; This function is called by:
  3366 ;;		_strtol
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text20
  3371  001314                     __ptext20:
  3372                           	opt stack 0
  3373  001314                     _isalpha:
  3374                           	opt stack 23
  3375                           
  3376                           ;incstack = 0
  3377                           ;isalpha@c stored from wreg
  3378  001314  6E2A               	movwf	isalpha@c,c
  3379  001316  0E01               	movlw	1
  3380  001318  6E29               	movwf	_isalpha$1478,c
  3381  00131A  0E7B               	movlw	123
  3382  00131C  602A               	cpfslt	isalpha@c,c
  3383  00131E  D003               	goto	l2491
  3384  001320  0E61               	movlw	97
  3385  001322  602A               	cpfslt	isalpha@c,c
  3386  001324  D007               	goto	l2495
  3387  001326                     l2491:
  3388  001326  502A               	movf	isalpha@c,w,c
  3389  001328  ECF3  F009         	call	_isupper
  3390  00132C  B0D8               	btfsc	status,0,c
  3391  00132E  D002               	goto	l2495
  3392  001330  0E00               	movlw	0
  3393  001332  6E29               	movwf	_isalpha$1478,c
  3394  001334                     l2495:
  3395  001334  C029  F028         	movff	_isalpha$1478,??_isalpha
  3396  001338  3028               	rrcf	??_isalpha,w,c
  3397  00133A  0012               	return	
  3398  00133C                     __end_of_isalpha:
  3399                           	opt stack 0
  3400                           tblptru	equ	0xFF8
  3401                           tblptrh	equ	0xFF7
  3402                           tblptrl	equ	0xFF6
  3403                           tablat	equ	0xFF5
  3404                           intcon	equ	0xFF2
  3405                           intcon2	equ	0xFF1
  3406                           postinc0	equ	0xFEE
  3407                           wreg	equ	0xFE8
  3408                           postdec1	equ	0xFE5
  3409                           fsr1h	equ	0xFE2
  3410                           fsr1l	equ	0xFE1
  3411                           indf2	equ	0xFDF
  3412                           postinc2	equ	0xFDE
  3413                           postdec2	equ	0xFDD
  3414                           fsr2h	equ	0xFDA
  3415                           fsr2l	equ	0xFD9
  3416                           status	equ	0xFD8
  3417                           
  3418 ;; *************** function _isupper *****************
  3419 ;; Defined at:
  3420 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isupper.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  c               1    wreg     unsigned char 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;  c               1   38[COMRAM] unsigned char 
  3425 ;; Return value:  Size  Location     Type
  3426 ;;		None               void
  3427 ;; Registers used:
  3428 ;;		wreg, status,2, status,0
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;Total ram usage:        3 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    4
  3441 ;; This function calls:
  3442 ;;		Nothing
  3443 ;; This function is called by:
  3444 ;;		_isalpha
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text21
  3449  0013E6                     __ptext21:
  3450                           	opt stack 0
  3451  0013E6                     _isupper:
  3452                           	opt stack 23
  3453                           
  3454                           ;incstack = 0
  3455                           ;isupper@c stored from wreg
  3456  0013E6  6E27               	movwf	isupper@c,c
  3457  0013E8  0E00               	movlw	0
  3458  0013EA  6E26               	movwf	_isupper$1484,c
  3459  0013EC  0E5B               	movlw	91
  3460  0013EE  6027               	cpfslt	isupper@c,c
  3461  0013F0  D005               	goto	l2227
  3462  0013F2  0E40               	movlw	64
  3463  0013F4  6427               	cpfsgt	isupper@c,c
  3464  0013F6  D002               	goto	l2227
  3465  0013F8  0E01               	movlw	1
  3466  0013FA  6E26               	movwf	_isupper$1484,c
  3467  0013FC                     l2227:
  3468  0013FC  C026  F025         	movff	_isupper$1484,??_isupper
  3469  001400  3025               	rrcf	??_isupper,w,c
  3470  001402  0012               	return	
  3471  001404                     __end_of_isupper:
  3472                           	opt stack 0
  3473                           tblptru	equ	0xFF8
  3474                           tblptrh	equ	0xFF7
  3475                           tblptrl	equ	0xFF6
  3476                           tablat	equ	0xFF5
  3477                           intcon	equ	0xFF2
  3478                           intcon2	equ	0xFF1
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           postdec1	equ	0xFE5
  3482                           fsr1h	equ	0xFE2
  3483                           fsr1l	equ	0xFE1
  3484                           indf2	equ	0xFDF
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function _srand *****************
  3492 ;; Defined at:
  3493 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\rand.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  x               2   24[BANK0 ] unsigned int 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      void 
  3500 ;; Registers used:
  3501 ;;		status,2
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;Total ram usage:        2 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    4
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_InitRadio
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text22
  3522  001470                     __ptext22:
  3523                           	opt stack 0
  3524  001470                     _srand:
  3525                           	opt stack 25
  3526                           
  3527                           ;incstack = 0
  3528  001470  C0A1  F036         	movff	srand@x,_randx
  3529  001474  C0A2  F037         	movff	srand@x+1,_randx+1
  3530  001478  6A38               	clrf	_randx+2,c
  3531  00147A  6A39               	clrf	_randx+3,c
  3532  00147C  0012               	return		;funcret
  3533  00147E                     __end_of_srand:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           intcon	equ	0xFF2
  3540                           intcon2	equ	0xFF1
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           postdec1	equ	0xFE5
  3544                           fsr1h	equ	0xFE2
  3545                           fsr1l	equ	0xFE1
  3546                           indf2	equ	0xFDF
  3547                           postinc2	equ	0xFDE
  3548                           postdec2	equ	0xFDD
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553 ;; *************** function _rand *****************
  3554 ;; Defined at:
  3555 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\rand.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;		None
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  2   40[COMRAM] int 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3569 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;Total ram usage:        2 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    5
  3576 ;; This function calls:
  3577 ;;		___lmul
  3578 ;; This function is called by:
  3579 ;;		_InitRadio
  3580 ;;		_main
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text23
  3585  001000                     __ptext23:
  3586                           	opt stack 0
  3587  001000                     _rand:
  3588                           	opt stack 25
  3589                           
  3590                           ;incstack = 0
  3591  001000  C036  F089         	movff	_randx,___lmul@multiplier
  3592  001004  C037  F08A         	movff	_randx+1,___lmul@multiplier+1
  3593  001008  C038  F08B         	movff	_randx+2,___lmul@multiplier+2
  3594  00100C  C039  F08C         	movff	_randx+3,___lmul@multiplier+3
  3595  001010  0E6D               	movlw	109
  3596  001012  0100               	movlb	0	; () banked
  3597  001014  6F8D               	movwf	___lmul@multiplicand& (0+255),b
  3598  001016  0E4E               	movlw	78
  3599  001018  6F8E               	movwf	(___lmul@multiplicand+1)& (0+255),b
  3600  00101A  0EC6               	movlw	198
  3601  00101C  6F8F               	movwf	(___lmul@multiplicand+2)& (0+255),b
  3602  00101E  0E41               	movlw	65
  3603  001020  6F90               	movwf	(___lmul@multiplicand+3)& (0+255),b
  3604  001022  EC68  F007         	call	___lmul	;wreg free
  3605  001026  C089  F036         	movff	?___lmul,_randx
  3606  00102A  C08A  F037         	movff	?___lmul+1,_randx+1
  3607  00102E  C08B  F038         	movff	?___lmul+2,_randx+2
  3608  001032  C08C  F039         	movff	?___lmul+3,_randx+3
  3609  001036  0E39               	movlw	57
  3610  001038  2636               	addwf	_randx,f,c
  3611  00103A  0E30               	movlw	48
  3612  00103C  2237               	addwfc	_randx+1,f,c
  3613  00103E  0E00               	movlw	0
  3614  001040  2238               	addwfc	_randx+2,f,c
  3615  001042  0E00               	movlw	0
  3616  001044  2239               	addwfc	_randx+3,f,c
  3617  001046  0EFF               	movlw	255
  3618  001048  1438               	andwf	_randx+2,w,c
  3619  00104A  6E29               	movwf	?_rand,c
  3620  00104C  0E7F               	movlw	127
  3621  00104E  1439               	andwf	_randx+3,w,c
  3622  001050  6E2A               	movwf	?_rand+1,c
  3623  001052  0012               	return	
  3624  001054                     __end_of_rand:
  3625                           	opt stack 0
  3626                           tblptru	equ	0xFF8
  3627                           tblptrh	equ	0xFF7
  3628                           tblptrl	equ	0xFF6
  3629                           tablat	equ	0xFF5
  3630                           intcon	equ	0xFF2
  3631                           intcon2	equ	0xFF1
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           postdec1	equ	0xFE5
  3635                           fsr1h	equ	0xFE2
  3636                           fsr1l	equ	0xFE1
  3637                           indf2	equ	0xFDF
  3638                           postinc2	equ	0xFDE
  3639                           postdec2	equ	0xFDD
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function ___lmul *****************
  3645 ;; Defined at:
  3646 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul32.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3649 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  product         4   36[COMRAM] unsigned long 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  4    0[BANK0 ] unsigned long 
  3654 ;; Registers used:
  3655 ;;		wreg, status,2, status,0
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3661 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3664 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3665 ;;Total ram usage:       12 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:    4
  3668 ;; This function calls:
  3669 ;;		Nothing
  3670 ;; This function is called by:
  3671 ;;		_rand
  3672 ;;		_strtol
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text24
  3677  000ED0                     __ptext24:
  3678                           	opt stack 0
  3679  000ED0                     ___lmul:
  3680                           	opt stack 25
  3681                           
  3682                           ;incstack = 0
  3683  000ED0  0E00               	movlw	0
  3684  000ED2  6E25               	movwf	___lmul@product,c
  3685  000ED4  0E00               	movlw	0
  3686  000ED6  6E26               	movwf	___lmul@product+1,c
  3687  000ED8  0E00               	movlw	0
  3688  000EDA  6E27               	movwf	___lmul@product+2,c
  3689  000EDC  0E00               	movlw	0
  3690  000EDE  6E28               	movwf	___lmul@product+3,c
  3691  000EE0                     l3207:
  3692  000EE0  0100               	movlb	0	; () banked
  3693  000EE2  A189               	btfss	___lmul@multiplier& (0+255),0,b
  3694  000EE4  D00C               	goto	l3211
  3695                           
  3696                           ; BSR set to: 0
  3697  000EE6  0100               	movlb	0	; () banked
  3698  000EE8  518D               	movf	___lmul@multiplicand& (0+255),w,b
  3699  000EEA  2625               	addwf	___lmul@product,f,c
  3700  000EEC  0100               	movlb	0	; () banked
  3701  000EEE  518E               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  3702  000EF0  2226               	addwfc	___lmul@product+1,f,c
  3703  000EF2  0100               	movlb	0	; () banked
  3704  000EF4  518F               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  3705  000EF6  2227               	addwfc	___lmul@product+2,f,c
  3706  000EF8  0100               	movlb	0	; () banked
  3707  000EFA  5190               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  3708  000EFC  2228               	addwfc	___lmul@product+3,f,c
  3709  000EFE                     l3211:
  3710                           
  3711                           ; BSR set to: 0
  3712  000EFE  0100               	movlb	0	; () banked
  3713  000F00  90D8               	bcf	status,0,c
  3714  000F02  378D               	rlcf	___lmul@multiplicand& (0+255),f,b
  3715  000F04  378E               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  3716  000F06  378F               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  3717  000F08  3790               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  3718                           
  3719                           ; BSR set to: 0
  3720  000F0A  0100               	movlb	0	; () banked
  3721  000F0C  90D8               	bcf	status,0,c
  3722  000F0E  338C               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  3723  000F10  338B               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  3724  000F12  338A               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  3725  000F14  3389               	rrcf	___lmul@multiplier& (0+255),f,b
  3726  000F16  0100               	movlb	0	; () banked
  3727  000F18  5189               	movf	___lmul@multiplier& (0+255),w,b
  3728  000F1A  0100               	movlb	0	; () banked
  3729  000F1C  118A               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  3730  000F1E  0100               	movlb	0	; () banked
  3731  000F20  118B               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  3732  000F22  0100               	movlb	0	; () banked
  3733  000F24  118C               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  3734  000F26  A4D8               	btfss	status,2,c
  3735  000F28  D7DB               	goto	l3207
  3736                           
  3737                           ; BSR set to: 0
  3738  000F2A  C025  F089         	movff	___lmul@product,?___lmul
  3739  000F2E  C026  F08A         	movff	___lmul@product+1,?___lmul+1
  3740  000F32  C027  F08B         	movff	___lmul@product+2,?___lmul+2
  3741  000F36  C028  F08C         	movff	___lmul@product+3,?___lmul+3
  3742                           
  3743                           ; BSR set to: 0
  3744  000F3A  0012               	return		;funcret
  3745  000F3C                     __end_of___lmul:
  3746                           	opt stack 0
  3747                           tblptru	equ	0xFF8
  3748                           tblptrh	equ	0xFF7
  3749                           tblptrl	equ	0xFF6
  3750                           tablat	equ	0xFF5
  3751                           intcon	equ	0xFF2
  3752                           intcon2	equ	0xFF1
  3753                           postinc0	equ	0xFEE
  3754                           wreg	equ	0xFE8
  3755                           postdec1	equ	0xFE5
  3756                           fsr1h	equ	0xFE2
  3757                           fsr1l	equ	0xFE1
  3758                           indf2	equ	0xFDF
  3759                           postinc2	equ	0xFDE
  3760                           postdec2	equ	0xFDD
  3761                           fsr2h	equ	0xFDA
  3762                           fsr2l	equ	0xFD9
  3763                           status	equ	0xFD8
  3764                           
  3765 ;; *************** function _getUUID *****************
  3766 ;; Defined at:
  3767 ;;		line 53 in file "main.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;		None
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;		None
  3772 ;; Return value:  Size  Location     Type
  3773 ;;                  1    wreg      void 
  3774 ;; Registers used:
  3775 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3785 ;;Total ram usage:        0 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    7
  3788 ;; This function calls:
  3789 ;;		_printf
  3790 ;;		_read_line
  3791 ;;		_strcpy
  3792 ;; This function is called by:
  3793 ;;		_InitRadio
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text25
  3798  0012EA                     __ptext25:
  3799                           	opt stack 0
  3800  0012EA                     _getUUID:
  3801                           	opt stack 22
  3802                           
  3803                           ;main.c: 54: printf("sys get hweui\r\n");
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;incstack = 0
  3807  0012EA  0E66               	movlw	low STR_5
  3808  0012EC  0100               	movlb	0	; () banked
  3809  0012EE  6F8E               	movwf	printf@f& (0+255),b
  3810  0012F0  0EFF               	movlw	high STR_5
  3811  0012F2  0100               	movlb	0	; () banked
  3812  0012F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  3813  0012F6  EC4C  F000         	call	_printf	;wreg free
  3814                           
  3815                           ;main.c: 55: read_line();
  3816  0012FA  EC3F  F00A         	call	_read_line	;wreg free
  3817                           
  3818                           ;main.c: 56: strcpy(uuid,line);
  3819  0012FE  0E61               	movlw	low _uuid
  3820  001300  6E25               	movwf	strcpy@to,c
  3821  001302  0E00               	movlw	high _uuid
  3822  001304  6E26               	movwf	strcpy@to+1,c
  3823  001306  0E80               	movlw	low _line
  3824  001308  6E27               	movwf	strcpy@from,c
  3825  00130A  0E01               	movlw	high _line
  3826  00130C  6E28               	movwf	strcpy@from+1,c
  3827  00130E  EC32  F009         	call	_strcpy	;wreg free
  3828  001312  0012               	return		;funcret
  3829  001314                     __end_of_getUUID:
  3830                           	opt stack 0
  3831                           tblptru	equ	0xFF8
  3832                           tblptrh	equ	0xFF7
  3833                           tblptrl	equ	0xFF6
  3834                           tablat	equ	0xFF5
  3835                           intcon	equ	0xFF2
  3836                           intcon2	equ	0xFF1
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           postdec1	equ	0xFE5
  3840                           fsr1h	equ	0xFE2
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _strcpy *****************
  3850 ;; Defined at:
  3851 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strcpy.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  to              2   36[COMRAM] PTR unsigned char 
  3854 ;;		 -> uuid(40), 
  3855 ;;  from            2   38[COMRAM] PTR const unsigned char 
  3856 ;;		 -> line(128), 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  cp              2   40[COMRAM] PTR unsigned char 
  3859 ;;		 -> uuid(40), 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  2   36[COMRAM] PTR unsigned char 
  3862 ;; Registers used:
  3863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3869 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;Total ram usage:        6 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    4
  3876 ;; This function calls:
  3877 ;;		Nothing
  3878 ;; This function is called by:
  3879 ;;		_getUUID
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           	psect	text26
  3884  001264                     __ptext26:
  3885                           	opt stack 0
  3886  001264                     _strcpy:
  3887                           	opt stack 24
  3888                           
  3889                           ;incstack = 0
  3890  001264  C025  F029         	movff	strcpy@to,strcpy@cp
  3891  001268  C026  F02A         	movff	strcpy@to+1,strcpy@cp+1
  3892  00126C  D004               	goto	l2405
  3893  00126E                     l2403:
  3894  00126E  4A29               	infsnz	strcpy@cp,f,c
  3895  001270  2A2A               	incf	strcpy@cp+1,f,c
  3896  001272  4A27               	infsnz	strcpy@from,f,c
  3897  001274  2A28               	incf	strcpy@from+1,f,c
  3898  001276                     l2405:
  3899  001276  C027  FFD9         	movff	strcpy@from,fsr2l
  3900  00127A  C028  FFDA         	movff	strcpy@from+1,fsr2h
  3901  00127E  C029  FFE1         	movff	strcpy@cp,fsr1l
  3902  001282  C02A  FFE2         	movff	strcpy@cp+1,fsr1h
  3903  001286  CFDF FFE7          	movff	indf2,indf1
  3904  00128A  50E7               	movf	indf1,w,c
  3905  00128C  B4D8               	btfsc	status,2,c
  3906  00128E  0012               	return	
  3907  001290  D7EE               	goto	l2403
  3908  001292                     __end_of_strcpy:
  3909                           	opt stack 0
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           intcon	equ	0xFF2
  3915                           intcon2	equ	0xFF1
  3916                           postinc0	equ	0xFEE
  3917                           wreg	equ	0xFE8
  3918                           indf1	equ	0xFE7
  3919                           postdec1	equ	0xFE5
  3920                           fsr1h	equ	0xFE2
  3921                           fsr1l	equ	0xFE1
  3922                           indf2	equ	0xFDF
  3923                           postinc2	equ	0xFDE
  3924                           postdec2	equ	0xFDD
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function _read_line *****************
  3930 ;; Defined at:
  3931 ;;		line 250 in file "mcc_generated_files/eusart1.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;		None
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;		None
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  2  147[None  ] int 
  3938 ;; Registers used:
  3939 ;;		wreg, status,2, status,0
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;Total ram usage:        0 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    4
  3952 ;; This function calls:
  3953 ;;		Nothing
  3954 ;; This function is called by:
  3955 ;;		_getUUID
  3956 ;;		_InitRadio
  3957 ;;		_main
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text27
  3962  00147E                     __ptext27:
  3963                           	opt stack 0
  3964  00147E                     _read_line:
  3965                           	opt stack 26
  3966  00147E                     l2233:
  3967  00147E  0433               	decf	_ready,w,c	;volatile
  3968  001480  A4D8               	btfss	status,2,c
  3969  001482  D7FD               	goto	l2233
  3970                           
  3971                           ;eusart1.c: 252: }
  3972                           ;eusart1.c: 253: ready=0;
  3973  001484  0E00               	movlw	0
  3974  001486  6E33               	movwf	_ready,c	;volatile
  3975  001488  0012               	return	
  3976  00148A                     __end_of_read_line:
  3977                           	opt stack 0
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           intcon	equ	0xFF2
  3983                           intcon2	equ	0xFF1
  3984                           postinc0	equ	0xFEE
  3985                           wreg	equ	0xFE8
  3986                           indf1	equ	0xFE7
  3987                           postdec1	equ	0xFE5
  3988                           fsr1h	equ	0xFE2
  3989                           fsr1l	equ	0xFE1
  3990                           indf2	equ	0xFDF
  3991                           postinc2	equ	0xFDE
  3992                           postdec2	equ	0xFDD
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _printf *****************
  3998 ;; Defined at:
  3999 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  f               2    5[BANK0 ] PTR const unsigned char 
  4002 ;;		 -> STR_20(36), STR_19(19), STR_18(19), STR_17(19), 
  4003 ;;		 -> STR_16(19), STR_15(19), STR_14(19), STR_13(12), 
  4004 ;;		 -> STR_12(16), STR_11(18), STR_10(15), STR_9(15), 
  4005 ;;		 -> STR_8(15), STR_7(14), STR_6(12), STR_5(16), 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  idx             1   21[BANK0 ] unsigned char 
  4008 ;;  tmpval          4    0        struct .
  4009 ;;  width           2   32[BANK0 ] int 
  4010 ;;  val             2   29[BANK0 ] unsigned int 
  4011 ;;  len             2   27[BANK0 ] unsigned int 
  4012 ;;  ap              2   25[BANK0 ] PTR void [1]
  4013 ;;		 -> ?_printf(2), 
  4014 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
  4015 ;;		 -> STR_21(7), uuid(40), 
  4016 ;;  c               1   34[BANK0 ] char 
  4017 ;;  flag            1   31[BANK0 ] unsigned char 
  4018 ;;  prec            1   22[BANK0 ] char 
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  2    5[BANK0 ] int 
  4021 ;; Registers used:
  4022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4028 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;Total ram usage:       30 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    6
  4035 ;; This function calls:
  4036 ;;		___lwdiv
  4037 ;;		___lwmod
  4038 ;;		___wmul
  4039 ;;		_isdigit
  4040 ;;		_putch
  4041 ;; This function is called by:
  4042 ;;		_getUUID
  4043 ;;		_InitRadio
  4044 ;;		_main
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text28
  4049  000098                     __ptext28:
  4050                           	opt stack 0
  4051  000098                     _printf:
  4052                           	opt stack 24
  4053                           
  4054                           ;doprnt.c: 466: va_list ap;
  4055                           ;doprnt.c: 499: signed char c;
  4056                           ;doprnt.c: 501: int width;
  4057                           ;doprnt.c: 506: signed char prec;
  4058                           ;doprnt.c: 508: unsigned char flag;
  4059                           ;doprnt.c: 523: union {
  4060                           ;doprnt.c: 524: unsigned long vd;
  4061                           ;doprnt.c: 525: double integ;
  4062                           ;doprnt.c: 526: } tmpval;
  4063                           ;doprnt.c: 528: unsigned int val;
  4064                           ;doprnt.c: 529: unsigned len;
  4065                           ;doprnt.c: 530: const char * cp;
  4066                           ;doprnt.c: 533: *ap = __va_start();
  4067                           
  4068                           ;incstack = 0
  4069  000098  0E90               	movlw	low (?_printf+2)
  4070  00009A  0100               	movlb	0	; () banked
  4071  00009C  6FA2               	movwf	printf@ap& (0+255),b
  4072  00009E  0E00               	movlw	high (?_printf+2)
  4073  0000A0  0100               	movlb	0	; () banked
  4074  0000A2  6FA3               	movwf	(printf@ap+1)& (0+255),b
  4075                           
  4076                           ;doprnt.c: 536: while(c = *f++) {
  4077  0000A4  D268               	goto	l3203
  4078  0000A6                     l3047:
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;doprnt.c: 538: if(c != '%')
  4082  0000A6  0E25               	movlw	37
  4083  0000A8  0100               	movlb	0	; () banked
  4084  0000AA  19AB               	xorwf	printf@c& (0+255),w,b
  4085  0000AC  B4D8               	btfsc	status,2,c
  4086  0000AE  D005               	goto	l3051
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;doprnt.c: 540: {
  4090                           ;doprnt.c: 541: (putch(c) );
  4091  0000B0  0100               	movlb	0	; () banked
  4092  0000B2  51AB               	movf	printf@c& (0+255),w,b
  4093  0000B4  EC50  F00A         	call	_putch
  4094                           
  4095                           ;doprnt.c: 542: continue;
  4096  0000B8  D25E               	goto	l3203
  4097  0000BA                     l3051:
  4098                           
  4099                           ;doprnt.c: 543: }
  4100                           ;doprnt.c: 546: width = 0;
  4101  0000BA  0E00               	movlw	0
  4102  0000BC  0100               	movlb	0	; () banked
  4103  0000BE  6FAA               	movwf	(printf@width+1)& (0+255),b
  4104  0000C0  0E00               	movlw	0
  4105  0000C2  6FA9               	movwf	printf@width& (0+255),b
  4106                           
  4107                           ;doprnt.c: 548: flag = 0;
  4108  0000C4  0E00               	movlw	0
  4109  0000C6  0100               	movlb	0	; () banked
  4110  0000C8  6FA8               	movwf	printf@flag& (0+255),b
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;doprnt.c: 551: switch(*f) {
  4114                           
  4115                           ;doprnt.c: 550: for(;;) {
  4116  0000CA  D005               	goto	l3057
  4117  0000CC                     l3053:
  4118                           
  4119                           ;doprnt.c: 580: flag |= 0x04;
  4120  0000CC  0100               	movlb	0	; () banked
  4121  0000CE  85A8               	bsf	printf@flag& (0+255),2,b
  4122                           
  4123                           ;doprnt.c: 581: f++;
  4124  0000D0  0100               	movlb	0	; () banked
  4125  0000D2  4B8E               	infsnz	printf@f& (0+255),f,b
  4126  0000D4  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4127  0000D6                     l3057:
  4128  0000D6  C08E  FFF6         	movff	printf@f,tblptrl
  4129  0000DA  C08F  FFF7         	movff	printf@f+1,tblptrh
  4130  0000DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4131  0000DE  6AF8               	clrf	tblptru,c
  4132  0000E0                     	endif
  4133  0000E0                     	if	0	;tblptru may be non-zero
  4134  0000E0                     	endif
  4135  0000E0  0008               	tblrd		*
  4136  0000E2  50F5               	movf	tablat,w,c
  4137                           
  4138                           ; Switch size 1, requested type "space"
  4139                           ; Number of cases is 1, Range of values is 48 to 48
  4140                           ; switch strategies available:
  4141                           ; Name         Instructions Cycles
  4142                           ; simple_byte            4     3 (average)
  4143                           ;	Chosen strategy is simple_byte
  4144  0000E4  0A30               	xorlw	48	; case 48
  4145  0000E6  B4D8               	btfsc	status,2,c
  4146  0000E8  D7F1               	goto	l3053
  4147                           
  4148                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4149                           
  4150                           ;doprnt.c: 586: }
  4151                           
  4152                           ;doprnt.c: 585: break;
  4153  0000EA  C08E  FFF6         	movff	printf@f,tblptrl
  4154  0000EE  C08F  FFF7         	movff	printf@f+1,tblptrh
  4155  0000F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4156  0000F2  6AF8               	clrf	tblptru,c
  4157  0000F4                     	endif
  4158  0000F4                     	if	0	;tblptru may be non-zero
  4159  0000F4                     	endif
  4160  0000F4  0008               	tblrd		*
  4161  0000F6  50F5               	movf	tablat,w,c
  4162  0000F8  EC02  F00A         	call	_isdigit
  4163  0000FC  A0D8               	btfss	status,0,c
  4164  0000FE  D0D1               	goto	l3105
  4165                           
  4166                           ;doprnt.c: 598: width = 0;
  4167  000100  0E00               	movlw	0
  4168  000102  0100               	movlb	0	; () banked
  4169  000104  6FAA               	movwf	(printf@width+1)& (0+255),b
  4170  000106  0E00               	movlw	0
  4171  000108  6FA9               	movwf	printf@width& (0+255),b
  4172  00010A                     l3063:
  4173                           
  4174                           ;doprnt.c: 600: width *= 10;
  4175  00010A  C0A9  F025         	movff	printf@width,___wmul@multiplier
  4176  00010E  C0AA  F026         	movff	printf@width+1,___wmul@multiplier+1
  4177  000112  0E00               	movlw	0
  4178  000114  6E28               	movwf	___wmul@multiplicand+1,c
  4179  000116  0E0A               	movlw	10
  4180  000118  6E27               	movwf	___wmul@multiplicand,c
  4181  00011A  ECB1  F009         	call	___wmul	;wreg free
  4182  00011E  C025  F0A9         	movff	?___wmul,printf@width
  4183  000122  C026  F0AA         	movff	?___wmul+1,printf@width+1
  4184                           
  4185                           ;doprnt.c: 601: width += *f++ - '0';
  4186  000126  0ED0               	movlw	208
  4187  000128  0100               	movlb	0	; () banked
  4188  00012A  6F9A               	movwf	??_printf& (0+255),b
  4189  00012C  0EFF               	movlw	255
  4190  00012E  0100               	movlb	0	; () banked
  4191  000130  6F9B               	movwf	(??_printf+1)& (0+255),b
  4192  000132  C08E  FFF6         	movff	printf@f,tblptrl
  4193  000136  C08F  FFF7         	movff	printf@f+1,tblptrh
  4194  00013A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4195  00013A  6AF8               	clrf	tblptru,c
  4196  00013C                     	endif
  4197  00013C                     	if	0	;tblptru may be non-zero
  4198  00013C                     	endif
  4199  00013C  0008               	tblrd		*
  4200  00013E  50F5               	movf	tablat,w,c
  4201  000140  0100               	movlb	0	; () banked
  4202  000142  6F9C               	movwf	(??_printf+2)& (0+255),b
  4203  000144  6B9D               	clrf	(??_printf+3)& (0+255),b
  4204  000146  0100               	movlb	0	; () banked
  4205  000148  519A               	movf	??_printf& (0+255),w,b
  4206  00014A  0100               	movlb	0	; () banked
  4207  00014C  279C               	addwf	(??_printf+2)& (0+255),f,b
  4208  00014E  0100               	movlb	0	; () banked
  4209  000150  519B               	movf	(??_printf+1)& (0+255),w,b
  4210  000152  0100               	movlb	0	; () banked
  4211  000154  239D               	addwfc	(??_printf+3)& (0+255),f,b
  4212  000156  0100               	movlb	0	; () banked
  4213  000158  519C               	movf	(??_printf+2)& (0+255),w,b
  4214  00015A  0100               	movlb	0	; () banked
  4215  00015C  27A9               	addwf	printf@width& (0+255),f,b
  4216  00015E  0100               	movlb	0	; () banked
  4217  000160  519D               	movf	(??_printf+3)& (0+255),w,b
  4218  000162  0100               	movlb	0	; () banked
  4219  000164  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  4220                           
  4221                           ; BSR set to: 0
  4222  000166  0100               	movlb	0	; () banked
  4223  000168  4B8E               	infsnz	printf@f& (0+255),f,b
  4224  00016A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4228  00016C  C08E  FFF6         	movff	printf@f,tblptrl
  4229  000170  C08F  FFF7         	movff	printf@f+1,tblptrh
  4230  000174                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4231  000174  6AF8               	clrf	tblptru,c
  4232  000176                     	endif
  4233  000176                     	if	0	;tblptru may be non-zero
  4234  000176                     	endif
  4235  000176  0008               	tblrd		*
  4236  000178  50F5               	movf	tablat,w,c
  4237  00017A  EC02  F00A         	call	_isdigit
  4238  00017E  A0D8               	btfss	status,0,c
  4239  000180  D090               	goto	l3105
  4240  000182  D7C3               	goto	l3063
  4241  000184                     l3071:
  4242                           
  4243                           ;doprnt.c: 718: case 'x':
  4244                           ;doprnt.c: 721: flag |= 0x80;
  4245  000184  0100               	movlb	0	; () banked
  4246  000186  8FA8               	bsf	printf@flag& (0+255),7,b
  4247                           
  4248                           ;doprnt.c: 723: break;
  4249  000188  D0AC               	goto	l402
  4250  00018A                     l3073:
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4254  00018A  C0A2  FFD9         	movff	printf@ap,fsr2l
  4255  00018E  C0A3  FFDA         	movff	printf@ap+1,fsr2h
  4256  000192  CFDE F0A0          	movff	postinc2,printf@cp
  4257  000196  CFDD F0A1          	movff	postdec2,printf@cp+1
  4258                           
  4259                           ; BSR set to: 0
  4260  00019A  0E02               	movlw	2
  4261  00019C  0100               	movlb	0	; () banked
  4262  00019E  27A2               	addwf	printf@ap& (0+255),f,b
  4263  0001A0  0E00               	movlw	0
  4264  0001A2  23A3               	addwfc	(printf@ap+1)& (0+255),f,b
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;doprnt.c: 740: if(!cp)
  4268  0001A4  0100               	movlb	0	; () banked
  4269  0001A6  51A0               	movf	printf@cp& (0+255),w,b
  4270  0001A8  0100               	movlb	0	; () banked
  4271  0001AA  11A1               	iorwf	(printf@cp+1)& (0+255),w,b
  4272  0001AC  A4D8               	btfss	status,2,c
  4273  0001AE  D006               	goto	l3081
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;doprnt.c: 741: cp = "(null)";
  4277  0001B0  0EF8               	movlw	low STR_21
  4278  0001B2  0100               	movlb	0	; () banked
  4279  0001B4  6FA0               	movwf	printf@cp& (0+255),b
  4280  0001B6  0EFF               	movlw	high STR_21
  4281  0001B8  0100               	movlb	0	; () banked
  4282  0001BA  6FA1               	movwf	(printf@cp+1)& (0+255),b
  4283  0001BC                     l3081:
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;doprnt.c: 745: len = 0;
  4287  0001BC  0E00               	movlw	0
  4288  0001BE  0100               	movlb	0	; () banked
  4289  0001C0  6FA5               	movwf	(printf@len+1)& (0+255),b
  4290  0001C2  0E00               	movlw	0
  4291  0001C4  6FA4               	movwf	printf@len& (0+255),b
  4292                           
  4293                           ;doprnt.c: 746: while(cp[len])
  4294  0001C6  D003               	goto	l3085
  4295  0001C8                     l3083:
  4296                           
  4297                           ;doprnt.c: 747: len++;
  4298  0001C8  0100               	movlb	0	; () banked
  4299  0001CA  4BA4               	infsnz	printf@len& (0+255),f,b
  4300  0001CC  2BA5               	incf	(printf@len+1)& (0+255),f,b
  4301  0001CE                     l3085:
  4302                           
  4303                           ; BSR set to: 0
  4304  0001CE  0100               	movlb	0	; () banked
  4305  0001D0  51A4               	movf	printf@len& (0+255),w,b
  4306  0001D2  0100               	movlb	0	; () banked
  4307  0001D4  25A0               	addwf	printf@cp& (0+255),w,b
  4308  0001D6  0100               	movlb	0	; () banked
  4309  0001D8  6F9A               	movwf	??_printf& (0+255),b
  4310  0001DA  0100               	movlb	0	; () banked
  4311  0001DC  51A5               	movf	(printf@len+1)& (0+255),w,b
  4312  0001DE  0100               	movlb	0	; () banked
  4313  0001E0  21A1               	addwfc	(printf@cp+1)& (0+255),w,b
  4314  0001E2  0100               	movlb	0	; () banked
  4315  0001E4  6F9B               	movwf	(??_printf+1)& (0+255),b
  4316  0001E6  C09A  FFF6         	movff	??_printf,tblptrl
  4317  0001EA  C09B  FFF7         	movff	??_printf+1,tblptrh
  4318  0001EE  0E00               	movlw	low (__mediumconst shr (0+16))
  4319  0001F0  6EF8               	movwf	tblptru,c
  4320  0001F2  0E0F               	movlw	(high __ramtop+-1)
  4321  0001F4  64F7               	cpfsgt	tblptrh,c
  4322  0001F6  D003               	bra	u2517
  4323  0001F8  0008               	tblrd		*
  4324  0001FA  50F5               	movf	tablat,w,c
  4325  0001FC  D005               	bra	u2510
  4326  0001FE                     u2517:
  4327  0001FE  CFF6 FFE1          	movff	tblptrl,fsr1l
  4328  000202  CFF7 FFE2          	movff	tblptrh,fsr1h
  4329  000206  50E7               	movf	indf1,w,c
  4330  000208                     u2510:
  4331  000208  0900               	iorlw	0
  4332  00020A  A4D8               	btfss	status,2,c
  4333  00020C  D7DD               	goto	l3083
  4334                           
  4335                           ;doprnt.c: 757: if(width > len)
  4336  00020E  0100               	movlb	0	; () banked
  4337  000210  51A9               	movf	printf@width& (0+255),w,b
  4338  000212  0100               	movlb	0	; () banked
  4339  000214  5DA4               	subwf	printf@len& (0+255),w,b
  4340  000216  0100               	movlb	0	; () banked
  4341  000218  51AA               	movf	(printf@width+1)& (0+255),w,b
  4342  00021A  0100               	movlb	0	; () banked
  4343  00021C  59A5               	subwfb	(printf@len+1)& (0+255),w,b
  4344  00021E  B0D8               	btfsc	status,0,c
  4345  000220  D009               	goto	l3091
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;doprnt.c: 758: width -= len;
  4349  000222  0100               	movlb	0	; () banked
  4350  000224  51A4               	movf	printf@len& (0+255),w,b
  4351  000226  0100               	movlb	0	; () banked
  4352  000228  5FA9               	subwf	printf@width& (0+255),f,b
  4353  00022A  0100               	movlb	0	; () banked
  4354  00022C  51A5               	movf	(printf@len+1)& (0+255),w,b
  4355  00022E  0100               	movlb	0	; () banked
  4356  000230  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  4357  000232  D009               	goto	l3095
  4358  000234                     l3091:
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;doprnt.c: 759: else
  4362                           ;doprnt.c: 760: width = 0;
  4363  000234  0E00               	movlw	0
  4364  000236  0100               	movlb	0	; () banked
  4365  000238  6FAA               	movwf	(printf@width+1)& (0+255),b
  4366  00023A  0E00               	movlw	0
  4367  00023C  6FA9               	movwf	printf@width& (0+255),b
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;doprnt.c: 764: while(width--)
  4371  00023E  D003               	goto	l3095
  4372  000240                     l3093:
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;doprnt.c: 765: (putch(' ') );
  4376  000240  0E20               	movlw	32
  4377  000242  EC50  F00A         	call	_putch
  4378  000246                     l3095:
  4379  000246  0100               	movlb	0	; () banked
  4380  000248  07A9               	decf	printf@width& (0+255),f,b
  4381  00024A  A0D8               	btfss	status,0,c
  4382  00024C  07AA               	decf	(printf@width+1)& (0+255),f,b
  4383  00024E  0100               	movlb	0	; () banked
  4384  000250  29A9               	incf	printf@width& (0+255),w,b
  4385  000252  E1F6               	bnz	l3093
  4386  000254  0100               	movlb	0	; () banked
  4387  000256  29AA               	incf	(printf@width+1)& (0+255),w,b
  4388  000258  B4D8               	btfsc	status,2,c
  4389  00025A  D017               	goto	l3101
  4390  00025C  D7F1               	goto	l3093
  4391  00025E                     l3097:
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;doprnt.c: 768: (putch(*cp++) );
  4395  00025E  C0A0  FFF6         	movff	printf@cp,tblptrl
  4396  000262  C0A1  FFF7         	movff	printf@cp+1,tblptrh
  4397  000266  0E00               	movlw	low (__mediumconst shr (0+16))
  4398  000268  6EF8               	movwf	tblptru,c
  4399  00026A  0E0F               	movlw	(high __ramtop+-1)
  4400  00026C  64F7               	cpfsgt	tblptrh,c
  4401  00026E  D003               	bra	u2557
  4402  000270  0008               	tblrd		*
  4403  000272  50F5               	movf	tablat,w,c
  4404  000274  D005               	bra	u2550
  4405  000276                     u2557:
  4406  000276  CFF6 FFE1          	movff	tblptrl,fsr1l
  4407  00027A  CFF7 FFE2          	movff	tblptrh,fsr1h
  4408  00027E  50E7               	movf	indf1,w,c
  4409  000280                     u2550:
  4410  000280  EC50  F00A         	call	_putch
  4411  000284  0100               	movlb	0	; () banked
  4412  000286  4BA0               	infsnz	printf@cp& (0+255),f,b
  4413  000288  2BA1               	incf	(printf@cp+1)& (0+255),f,b
  4414  00028A                     l3101:
  4415                           
  4416                           ; BSR set to: 0
  4417  00028A  0100               	movlb	0	; () banked
  4418  00028C  07A4               	decf	printf@len& (0+255),f,b
  4419  00028E  A0D8               	btfss	status,0,c
  4420  000290  07A5               	decf	(printf@len+1)& (0+255),f,b
  4421  000292  0100               	movlb	0	; () banked
  4422  000294  29A4               	incf	printf@len& (0+255),w,b
  4423  000296  E1E3               	bnz	l3097
  4424  000298  0100               	movlb	0	; () banked
  4425  00029A  29A5               	incf	(printf@len+1)& (0+255),w,b
  4426  00029C  B4D8               	btfsc	status,2,c
  4427  00029E  D16B               	goto	l3203
  4428  0002A0  D7DE               	goto	l3097
  4429  0002A2                     l3105:
  4430  0002A2  C08E  FFF6         	movff	printf@f,tblptrl
  4431  0002A6  C08F  FFF7         	movff	printf@f+1,tblptrh
  4432  0002AA  0100               	movlb	0	; () banked
  4433  0002AC  4B8E               	infsnz	printf@f& (0+255),f,b
  4434  0002AE  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4435  0002B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4436  0002B0  6AF8               	clrf	tblptru,c
  4437  0002B2                     	endif
  4438  0002B2                     	if	0	;tblptru may be non-zero
  4439  0002B2                     	endif
  4440  0002B2  0008               	tblrd		*
  4441  0002B4  CFF5 F0AB          	movff	tablat,printf@c
  4442  0002B8  0100               	movlb	0	; () banked
  4443  0002BA  51AB               	movf	printf@c& (0+255),w,b
  4444                           
  4445                           ; Switch size 1, requested type "space"
  4446                           ; Number of cases is 6, Range of values is 0 to 120
  4447                           ; switch strategies available:
  4448                           ; Name         Instructions Cycles
  4449                           ; simple_byte           19    10 (average)
  4450                           ;	Chosen strategy is simple_byte
  4451  0002BC  0A00               	xorlw	0	; case 0
  4452  0002BE  B4D8               	btfsc	status,2,c
  4453  0002C0  0012               	return	
  4454  0002C2  0A58               	xorlw	88	; case 88
  4455  0002C4  B4D8               	btfsc	status,2,c
  4456  0002C6  D75E               	goto	l3071
  4457  0002C8  0A3C               	xorlw	60	; case 100
  4458  0002CA  B4D8               	btfsc	status,2,c
  4459  0002CC  D00A               	goto	l402
  4460  0002CE  0A0D               	xorlw	13	; case 105
  4461  0002D0  B4D8               	btfsc	status,2,c
  4462  0002D2  D007               	goto	l402
  4463  0002D4  0A1A               	xorlw	26	; case 115
  4464  0002D6  B4D8               	btfsc	status,2,c
  4465  0002D8  D758               	goto	l3073
  4466  0002DA  0A0B               	xorlw	11	; case 120
  4467  0002DC  B4D8               	btfsc	status,2,c
  4468  0002DE  D752               	goto	l3071
  4469  0002E0  D14A               	goto	l3203
  4470  0002E2                     l402:
  4471                           
  4472                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4473  0002E2  0100               	movlb	0	; () banked
  4474  0002E4  BFA8               	btfsc	printf@flag& (0+255),7,b
  4475  0002E6  D019               	goto	l3117
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;doprnt.c: 1253: {
  4479                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4480  0002E8  C0A2  FFD9         	movff	printf@ap,fsr2l
  4481  0002EC  C0A3  FFDA         	movff	printf@ap+1,fsr2h
  4482  0002F0  CFDE F0A6          	movff	postinc2,printf@val
  4483  0002F4  CFDD F0A7          	movff	postdec2,printf@val+1
  4484                           
  4485                           ; BSR set to: 0
  4486  0002F8  0E02               	movlw	2
  4487  0002FA  0100               	movlb	0	; () banked
  4488  0002FC  27A2               	addwf	printf@ap& (0+255),f,b
  4489  0002FE  0E00               	movlw	0
  4490  000300  23A3               	addwfc	(printf@ap+1)& (0+255),f,b
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;doprnt.c: 1261: if((int)val < 0) {
  4494  000302  0100               	movlb	0	; () banked
  4495  000304  AFA7               	btfss	(printf@val+1)& (0+255),7,b
  4496  000306  D059               	goto	l3151
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;doprnt.c: 1262: flag |= 0x03;
  4500  000308  0E03               	movlw	3
  4501  00030A  0100               	movlb	0	; () banked
  4502  00030C  13A8               	iorwf	printf@flag& (0+255),f,b
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;doprnt.c: 1263: val = -val;
  4506  00030E  0100               	movlb	0	; () banked
  4507  000310  6DA6               	negf	printf@val& (0+255),b
  4508  000312  1FA7               	comf	(printf@val+1)& (0+255),f,b
  4509  000314  B0D8               	btfsc	status,0,c
  4510  000316  2BA7               	incf	(printf@val+1)& (0+255),f,b
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;doprnt.c: 1264: }
  4514                           ;doprnt.c: 1266: }
  4515  000318  D050               	goto	l3151
  4516  00031A                     l3117:
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;doprnt.c: 1268: else
  4520                           ;doprnt.c: 1273: {
  4521                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4522  00031A  C0A2  FFD9         	movff	printf@ap,fsr2l
  4523  00031E  C0A3  FFDA         	movff	printf@ap+1,fsr2h
  4524  000322  CFDE F0A6          	movff	postinc2,printf@val
  4525  000326  CFDD F0A7          	movff	postdec2,printf@val+1
  4526                           
  4527                           ; BSR set to: 0
  4528  00032A  0E02               	movlw	2
  4529  00032C  0100               	movlb	0	; () banked
  4530  00032E  27A2               	addwf	printf@ap& (0+255),f,b
  4531  000330  0E00               	movlw	0
  4532  000332  23A3               	addwfc	(printf@ap+1)& (0+255),f,b
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;doprnt.c: 1287: }
  4536                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4537  000334  D042               	goto	l3151
  4538  000336                     l3121:
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4542  000336  0E01               	movlw	1
  4543  000338  0100               	movlb	0	; () banked
  4544  00033A  6FAB               	movwf	printf@c& (0+255),b
  4545  00033C                     l3123:
  4546                           
  4547                           ; BSR set to: 0
  4548  00033C  0E05               	movlw	5
  4549  00033E  0100               	movlb	0	; () banked
  4550  000340  19AB               	xorwf	printf@c& (0+255),w,b
  4551  000342  B4D8               	btfsc	status,2,c
  4552  000344  D043               	goto	l3153
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;doprnt.c: 1306: if(val < dpowers[c])
  4556                           
  4557                           ; BSR set to: 0
  4558                           
  4559                           ; BSR set to: 0
  4560  000346  0100               	movlb	0	; () banked
  4561  000348  51AB               	movf	printf@c& (0+255),w,b
  4562  00034A  0D02               	mullw	2
  4563  00034C  0E9B               	movlw	low _dpowers
  4564  00034E  24F3               	addwf	prodl,w,c
  4565  000350  6EF6               	movwf	tblptrl,c
  4566  000352  0EFE               	movlw	high _dpowers
  4567  000354  20F4               	addwfc	prodh,w,c
  4568  000356  6EF7               	movwf	tblptrh,c
  4569  000358                     	if	1	;There are 3 active tblptr bytes
  4570  000358  6AF8               	clrf	tblptru,c
  4571  00035A  0E00               	movlw	low (__mediumconst shr (0+16))
  4572  00035C  22F8               	addwfc	tblptru,f,c
  4573  00035E                     	endif
  4574  00035E  0009               	tblrd		*+
  4575  000360  50F5               	movf	tablat,w,c
  4576  000362  0100               	movlb	0	; () banked
  4577  000364  5DA6               	subwf	printf@val& (0+255),w,b
  4578  000366  0009               	tblrd		*+
  4579  000368  50F5               	movf	tablat,w,c
  4580  00036A  0100               	movlb	0	; () banked
  4581  00036C  59A7               	subwfb	(printf@val+1)& (0+255),w,b
  4582  00036E  A0D8               	btfss	status,0,c
  4583  000370  D02D               	goto	l3153
  4584                           
  4585                           ; BSR set to: 0
  4586                           
  4587                           ; BSR set to: 0
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;doprnt.c: 1307: break;
  4591  000372  0100               	movlb	0	; () banked
  4592  000374  2BAB               	incf	printf@c& (0+255),f,b
  4593  000376  D7E2               	goto	l3123
  4594  000378                     l3135:
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4598  000378  0E01               	movlw	1
  4599  00037A  0100               	movlb	0	; () banked
  4600  00037C  6FAB               	movwf	printf@c& (0+255),b
  4601  00037E                     l3137:
  4602                           
  4603                           ; BSR set to: 0
  4604  00037E  0E04               	movlw	4
  4605  000380  0100               	movlb	0	; () banked
  4606  000382  19AB               	xorwf	printf@c& (0+255),w,b
  4607  000384  B4D8               	btfsc	status,2,c
  4608  000386  D022               	goto	l3153
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4612                           
  4613                           ; BSR set to: 0
  4614                           
  4615                           ; BSR set to: 0
  4616  000388  0100               	movlb	0	; () banked
  4617  00038A  51AB               	movf	printf@c& (0+255),w,b
  4618  00038C  0D02               	mullw	2
  4619  00038E  0EA5               	movlw	low _hexpowers
  4620  000390  24F3               	addwf	prodl,w,c
  4621  000392  6EF6               	movwf	tblptrl,c
  4622  000394  0EFE               	movlw	high _hexpowers
  4623  000396  20F4               	addwfc	prodh,w,c
  4624  000398  6EF7               	movwf	tblptrh,c
  4625  00039A                     	if	1	;There are 3 active tblptr bytes
  4626  00039A  6AF8               	clrf	tblptru,c
  4627  00039C  0E00               	movlw	low (__mediumconst shr (0+16))
  4628  00039E  22F8               	addwfc	tblptru,f,c
  4629  0003A0                     	endif
  4630  0003A0  0009               	tblrd		*+
  4631  0003A2  50F5               	movf	tablat,w,c
  4632  0003A4  0100               	movlb	0	; () banked
  4633  0003A6  5DA6               	subwf	printf@val& (0+255),w,b
  4634  0003A8  0009               	tblrd		*+
  4635  0003AA  50F5               	movf	tablat,w,c
  4636  0003AC  0100               	movlb	0	; () banked
  4637  0003AE  59A7               	subwfb	(printf@val+1)& (0+255),w,b
  4638  0003B0  A0D8               	btfss	status,0,c
  4639  0003B2  D00C               	goto	l3153
  4640                           
  4641                           ; BSR set to: 0
  4642                           
  4643                           ; BSR set to: 0
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;doprnt.c: 1318: break;
  4647  0003B4  0100               	movlb	0	; () banked
  4648  0003B6  2BAB               	incf	printf@c& (0+255),f,b
  4649  0003B8  D7E2               	goto	l3137
  4650  0003BA                     l3151:
  4651                           
  4652                           ; BSR set to: 0
  4653  0003BA  0100               	movlb	0	; () banked
  4654  0003BC  51A8               	movf	printf@flag& (0+255),w,b
  4655  0003BE  0B80               	andlw	128
  4656                           
  4657                           ; Switch size 1, requested type "space"
  4658                           ; Number of cases is 2, Range of values is 0 to 128
  4659                           ; switch strategies available:
  4660                           ; Name         Instructions Cycles
  4661                           ; simple_byte            7     4 (average)
  4662                           ;	Chosen strategy is simple_byte
  4663  0003C0  0A00               	xorlw	0	; case 0
  4664  0003C2  B4D8               	btfsc	status,2,c
  4665  0003C4  D7B8               	goto	l3121
  4666  0003C6  0A80               	xorlw	128	; case 128
  4667  0003C8  B4D8               	btfsc	status,2,c
  4668  0003CA  D7D6               	goto	l3135
  4669  0003CC                     l3153:
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4673  0003CC  0100               	movlb	0	; () banked
  4674  0003CE  51A9               	movf	printf@width& (0+255),w,b
  4675  0003D0  0100               	movlb	0	; () banked
  4676  0003D2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  4677  0003D4  B4D8               	btfsc	status,2,c
  4678  0003D6  D00B               	goto	l3159
  4679                           
  4680                           ; BSR set to: 0
  4681  0003D8  C0A8  F09A         	movff	printf@flag,??_printf
  4682  0003DC  0E03               	movlw	3
  4683  0003DE  0100               	movlb	0	; () banked
  4684  0003E0  179A               	andwf	??_printf& (0+255),f,b
  4685  0003E2  B4D8               	btfsc	status,2,c
  4686  0003E4  D004               	goto	l3159
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;doprnt.c: 1346: width--;
  4690  0003E6  0100               	movlb	0	; () banked
  4691  0003E8  07A9               	decf	printf@width& (0+255),f,b
  4692  0003EA  A0D8               	btfss	status,0,c
  4693  0003EC  07AA               	decf	(printf@width+1)& (0+255),f,b
  4694  0003EE                     l3159:
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;doprnt.c: 1381: if(width > c)
  4698  0003EE  0E80               	movlw	128
  4699  0003F0  0100               	movlb	0	; () banked
  4700  0003F2  BFAB               	btfsc	printf@c& (0+255),7,b
  4701  0003F4  0E7F               	movlw	127
  4702  0003F6  0100               	movlb	0	; () banked
  4703  0003F8  6F9A               	movwf	??_printf& (0+255),b
  4704  0003FA  0100               	movlb	0	; () banked
  4705  0003FC  51A9               	movf	printf@width& (0+255),w,b
  4706  0003FE  0100               	movlb	0	; () banked
  4707  000400  5DAB               	subwf	printf@c& (0+255),w,b
  4708  000402  0100               	movlb	0	; () banked
  4709  000404  51AA               	movf	(printf@width+1)& (0+255),w,b
  4710  000406  0A80               	xorlw	128
  4711  000408  0100               	movlb	0	; () banked
  4712  00040A  599A               	subwfb	??_printf& (0+255),w,b
  4713  00040C  B0D8               	btfsc	status,0,c
  4714  00040E  D00B               	goto	l3163
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;doprnt.c: 1382: width -= c;
  4718  000410  0100               	movlb	0	; () banked
  4719  000412  51AB               	movf	printf@c& (0+255),w,b
  4720  000414  0100               	movlb	0	; () banked
  4721  000416  5FA9               	subwf	printf@width& (0+255),f,b
  4722  000418  0E00               	movlw	0
  4723  00041A  0100               	movlb	0	; () banked
  4724  00041C  BFAB               	btfsc	printf@c& (0+255),7,b
  4725  00041E  0EFF               	movlw	255
  4726  000420  0100               	movlb	0	; () banked
  4727  000422  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  4728  000424  D005               	goto	l3165
  4729  000426                     l3163:
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;doprnt.c: 1383: else
  4733                           ;doprnt.c: 1384: width = 0;
  4734  000426  0E00               	movlw	0
  4735  000428  0100               	movlb	0	; () banked
  4736  00042A  6FAA               	movwf	(printf@width+1)& (0+255),b
  4737  00042C  0E00               	movlw	0
  4738  00042E  6FA9               	movwf	printf@width& (0+255),b
  4739  000430                     l3165:
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;doprnt.c: 1387: if(flag & 0x04) {
  4743  000430  0100               	movlb	0	; () banked
  4744  000432  A5A8               	btfss	printf@flag& (0+255),2,b
  4745  000434  D018               	goto	l3177
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;doprnt.c: 1392: if(flag & 0x03)
  4749  000436  C0A8  F09A         	movff	printf@flag,??_printf
  4750  00043A  0E03               	movlw	3
  4751  00043C  0100               	movlb	0	; () banked
  4752  00043E  179A               	andwf	??_printf& (0+255),f,b
  4753  000440  B4D8               	btfsc	status,2,c
  4754  000442  D003               	goto	l3171
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;doprnt.c: 1393: (putch('-') );
  4758  000444  0E2D               	movlw	45
  4759  000446  EC50  F00A         	call	_putch
  4760  00044A                     l3171:
  4761                           
  4762                           ;doprnt.c: 1415: if(width)
  4763  00044A  0100               	movlb	0	; () banked
  4764  00044C  51A9               	movf	printf@width& (0+255),w,b
  4765  00044E  0100               	movlb	0	; () banked
  4766  000450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  4767  000452  B4D8               	btfsc	status,2,c
  4768  000454  D025               	goto	l3187
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;doprnt.c: 1417: (putch('0') );
  4772                           
  4773                           ; BSR set to: 0
  4774                           
  4775                           ;doprnt.c: 1416: do
  4776  000456  0E30               	movlw	48
  4777  000458  EC50  F00A         	call	_putch
  4778                           
  4779                           ;doprnt.c: 1418: while(--width);
  4780  00045C  0100               	movlb	0	; () banked
  4781  00045E  07A9               	decf	printf@width& (0+255),f,b
  4782  000460  A0D8               	btfss	status,0,c
  4783  000462  07AA               	decf	(printf@width+1)& (0+255),f,b
  4784  000464  D7F2               	goto	l3171
  4785  000466                     l3177:
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;doprnt.c: 1422: {
  4789                           ;doprnt.c: 1424: if(width
  4790                           ;doprnt.c: 1428: )
  4791  000466  0100               	movlb	0	; () banked
  4792  000468  51A9               	movf	printf@width& (0+255),w,b
  4793  00046A  0100               	movlb	0	; () banked
  4794  00046C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  4795  00046E  B4D8               	btfsc	status,2,c
  4796  000470  D00D               	goto	l3183
  4797  000472                     l3179:
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;doprnt.c: 1430: (putch(' ') );
  4801  000472  0E20               	movlw	32
  4802  000474  EC50  F00A         	call	_putch
  4803                           
  4804                           ;doprnt.c: 1431: while(--width);
  4805  000478  0100               	movlb	0	; () banked
  4806  00047A  07A9               	decf	printf@width& (0+255),f,b
  4807  00047C  A0D8               	btfss	status,0,c
  4808  00047E  07AA               	decf	(printf@width+1)& (0+255),f,b
  4809  000480  0100               	movlb	0	; () banked
  4810  000482  51A9               	movf	printf@width& (0+255),w,b
  4811  000484  0100               	movlb	0	; () banked
  4812  000486  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  4813  000488  A4D8               	btfss	status,2,c
  4814  00048A  D7F3               	goto	l3179
  4815  00048C                     l3183:
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;doprnt.c: 1438: if(flag & 0x03)
  4819  00048C  C0A8  F09A         	movff	printf@flag,??_printf
  4820  000490  0E03               	movlw	3
  4821  000492  0100               	movlb	0	; () banked
  4822  000494  179A               	andwf	??_printf& (0+255),f,b
  4823  000496  B4D8               	btfsc	status,2,c
  4824  000498  D003               	goto	l3187
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;doprnt.c: 1439: (putch('-') );
  4828  00049A  0E2D               	movlw	45
  4829  00049C  EC50  F00A         	call	_putch
  4830  0004A0                     l3187:
  4831                           
  4832                           ;doprnt.c: 1469: }
  4833                           ;doprnt.c: 1472: prec = c;
  4834  0004A0  C0AB  F09F         	movff	printf@c,printf@prec
  4835                           
  4836                           ;doprnt.c: 1474: while(prec--) {
  4837  0004A4  D062               	goto	l3201
  4838  0004A6                     l3189:
  4839                           
  4840                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4841  0004A6  0100               	movlb	0	; () banked
  4842  0004A8  519F               	movf	printf@prec& (0+255),w,b
  4843  0004AA  0D02               	mullw	2
  4844  0004AC  0E9B               	movlw	low _dpowers
  4845  0004AE  24F3               	addwf	prodl,w,c
  4846  0004B0  6EF6               	movwf	tblptrl,c
  4847  0004B2  0EFE               	movlw	high _dpowers
  4848  0004B4  20F4               	addwfc	prodh,w,c
  4849  0004B6  6EF7               	movwf	tblptrh,c
  4850  0004B8                     	if	1	;There are 3 active tblptr bytes
  4851  0004B8  6AF8               	clrf	tblptru,c
  4852  0004BA  0E00               	movlw	low (__mediumconst shr (0+16))
  4853  0004BC  22F8               	addwfc	tblptru,f,c
  4854  0004BE                     	endif
  4855  0004BE  0009               	tblrd		*+
  4856  0004C0  CFF5 F027          	movff	tablat,___lwdiv@divisor
  4857  0004C4  000A               	tblrd		*-
  4858  0004C6  CFF5 F028          	movff	tablat,___lwdiv@divisor+1
  4859  0004CA  C0A6  F025         	movff	printf@val,___lwdiv@dividend
  4860  0004CE  C0A7  F026         	movff	printf@val+1,___lwdiv@dividend+1
  4861  0004D2  EC2A  F008         	call	___lwdiv	;wreg free
  4862  0004D6  C025  F089         	movff	?___lwdiv,___lwmod@dividend
  4863  0004DA  C026  F08A         	movff	?___lwdiv+1,___lwmod@dividend+1
  4864  0004DE  0E00               	movlw	0
  4865  0004E0  0100               	movlb	0	; () banked
  4866  0004E2  6F8C               	movwf	(___lwmod@divisor+1)& (0+255),b
  4867  0004E4  0E0A               	movlw	10
  4868  0004E6  6F8B               	movwf	___lwmod@divisor& (0+255),b
  4869  0004E8  ECCF  F007         	call	___lwmod	;wreg free
  4870  0004EC  0100               	movlb	0	; () banked
  4871  0004EE  5189               	movf	?___lwmod& (0+255),w,b
  4872  0004F0  0F30               	addlw	48
  4873  0004F2  0100               	movlb	0	; () banked
  4874  0004F4  6FAB               	movwf	printf@c& (0+255),b
  4875                           
  4876                           ;doprnt.c: 1491: break;
  4877  0004F6  D035               	goto	l3199
  4878  0004F8                     l3191:
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;doprnt.c: 1499: {
  4882                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4883  0004F8  C0A6  F025         	movff	printf@val,___lwdiv@dividend
  4884  0004FC  C0A7  F026         	movff	printf@val+1,___lwdiv@dividend+1
  4885  000500  0100               	movlb	0	; () banked
  4886  000502  519F               	movf	printf@prec& (0+255),w,b
  4887  000504  0D02               	mullw	2
  4888  000506  0EA5               	movlw	low _hexpowers
  4889  000508  24F3               	addwf	prodl,w,c
  4890  00050A  6EF6               	movwf	tblptrl,c
  4891  00050C  0EFE               	movlw	high _hexpowers
  4892  00050E  20F4               	addwfc	prodh,w,c
  4893  000510  6EF7               	movwf	tblptrh,c
  4894  000512                     	if	1	;There are 3 active tblptr bytes
  4895  000512  6AF8               	clrf	tblptru,c
  4896  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  4897  000516  22F8               	addwfc	tblptru,f,c
  4898  000518                     	endif
  4899  000518  0009               	tblrd		*+
  4900  00051A  CFF5 F027          	movff	tablat,___lwdiv@divisor
  4901  00051E  000A               	tblrd		*-
  4902  000520  CFF5 F028          	movff	tablat,___lwdiv@divisor+1
  4903  000524  EC2A  F008         	call	___lwdiv	;wreg free
  4904  000528  5025               	movf	?___lwdiv,w,c
  4905  00052A  0B0F               	andlw	15
  4906  00052C  0100               	movlb	0	; () banked
  4907  00052E  6F9E               	movwf	printf@idx& (0+255),b
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4911  000530  0100               	movlb	0	; () banked
  4912  000532  519E               	movf	printf@idx& (0+255),w,b
  4913  000534  0D01               	mullw	1
  4914  000536  0E55               	movlw	low STR_22
  4915  000538  24F3               	addwf	prodl,w,c
  4916  00053A  6EF6               	movwf	tblptrl,c
  4917  00053C  0EFF               	movlw	high STR_22
  4918  00053E  20F4               	addwfc	prodh,w,c
  4919  000540  6EF7               	movwf	tblptrh,c
  4920  000542                     	if	1	;There are 3 active tblptr bytes
  4921  000542  6AF8               	clrf	tblptru,c
  4922  000544  0E00               	movlw	low (__mediumconst shr (0+16))
  4923  000546  22F8               	addwfc	tblptru,f,c
  4924  000548                     	endif
  4925  000548  0008               	tblrd		*
  4926  00054A  CFF5 F0AB          	movff	tablat,printf@c
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;doprnt.c: 1523: }
  4930                           
  4931                           ;doprnt.c: 1508: }
  4932                           ;doprnt.c: 1510: break;
  4933  00054E  D009               	goto	l3199
  4934  000550                     l3197:
  4935  000550  0100               	movlb	0	; () banked
  4936  000552  51A8               	movf	printf@flag& (0+255),w,b
  4937  000554  0B80               	andlw	128
  4938                           
  4939                           ; Switch size 1, requested type "space"
  4940                           ; Number of cases is 2, Range of values is 0 to 128
  4941                           ; switch strategies available:
  4942                           ; Name         Instructions Cycles
  4943                           ; simple_byte            7     4 (average)
  4944                           ;	Chosen strategy is simple_byte
  4945  000556  0A00               	xorlw	0	; case 0
  4946  000558  B4D8               	btfsc	status,2,c
  4947  00055A  D7A5               	goto	l3189
  4948  00055C  0A80               	xorlw	128	; case 128
  4949  00055E  B4D8               	btfsc	status,2,c
  4950  000560  D7CB               	goto	l3191
  4951  000562                     l3199:
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;doprnt.c: 1524: (putch(c) );
  4955  000562  0100               	movlb	0	; () banked
  4956  000564  51AB               	movf	printf@c& (0+255),w,b
  4957  000566  EC50  F00A         	call	_putch
  4958  00056A                     l3201:
  4959  00056A  0100               	movlb	0	; () banked
  4960  00056C  079F               	decf	printf@prec& (0+255),f,b
  4961  00056E  0100               	movlb	0	; () banked
  4962  000570  299F               	incf	printf@prec& (0+255),w,b
  4963  000572  A4D8               	btfss	status,2,c
  4964  000574  D7ED               	goto	l3197
  4965  000576                     l3203:
  4966  000576  C08E  FFF6         	movff	printf@f,tblptrl
  4967  00057A  C08F  FFF7         	movff	printf@f+1,tblptrh
  4968  00057E  0100               	movlb	0	; () banked
  4969  000580  4B8E               	infsnz	printf@f& (0+255),f,b
  4970  000582  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4971  000584                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4972  000584  6AF8               	clrf	tblptru,c
  4973  000586                     	endif
  4974  000586                     	if	0	;tblptru may be non-zero
  4975  000586                     	endif
  4976  000586  0008               	tblrd		*
  4977  000588  CFF5 F0AB          	movff	tablat,printf@c
  4978  00058C  0100               	movlb	0	; () banked
  4979  00058E  51AB               	movf	printf@c& (0+255),w,b
  4980  000590  B4D8               	btfsc	status,2,c
  4981  000592  0012               	return	
  4982  000594  D588               	goto	l3047
  4983  000596                     __end_of_printf:
  4984                           	opt stack 0
  4985                           tblptru	equ	0xFF8
  4986                           tblptrh	equ	0xFF7
  4987                           tblptrl	equ	0xFF6
  4988                           tablat	equ	0xFF5
  4989                           prodh	equ	0xFF4
  4990                           prodl	equ	0xFF3
  4991                           intcon	equ	0xFF2
  4992                           intcon2	equ	0xFF1
  4993                           postinc0	equ	0xFEE
  4994                           wreg	equ	0xFE8
  4995                           indf1	equ	0xFE7
  4996                           postdec1	equ	0xFE5
  4997                           fsr1h	equ	0xFE2
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function _putch *****************
  5007 ;; Defined at:
  5008 ;;		line 170 in file "mcc_generated_files/eusart1.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  txData          1    wreg     unsigned char 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  txData          1   37[COMRAM] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      void 
  5015 ;; Registers used:
  5016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;Total ram usage:        1 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    5
  5029 ;; This function calls:
  5030 ;;		_EUSART1_Write
  5031 ;; This function is called by:
  5032 ;;		_printf
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text29
  5037  0014A0                     __ptext29:
  5038                           	opt stack 0
  5039  0014A0                     _putch:
  5040                           	opt stack 24
  5041                           
  5042                           ;incstack = 0
  5043                           ;putch@txData stored from wreg
  5044  0014A0  6E26               	movwf	putch@txData,c
  5045                           
  5046                           ;eusart1.c: 172: EUSART1_Write(txData);
  5047  0014A2  5026               	movf	putch@txData,w,c
  5048  0014A4  EC95  F008         	call	_EUSART1_Write
  5049  0014A8  0012               	return		;funcret
  5050  0014AA                     __end_of_putch:
  5051                           	opt stack 0
  5052                           tblptru	equ	0xFF8
  5053                           tblptrh	equ	0xFF7
  5054                           tblptrl	equ	0xFF6
  5055                           tablat	equ	0xFF5
  5056                           prodh	equ	0xFF4
  5057                           prodl	equ	0xFF3
  5058                           intcon	equ	0xFF2
  5059                           intcon2	equ	0xFF1
  5060                           postinc0	equ	0xFEE
  5061                           wreg	equ	0xFE8
  5062                           indf1	equ	0xFE7
  5063                           postdec1	equ	0xFE5
  5064                           fsr1h	equ	0xFE2
  5065                           fsr1l	equ	0xFE1
  5066                           indf2	equ	0xFDF
  5067                           postinc2	equ	0xFDE
  5068                           postdec2	equ	0xFDD
  5069                           fsr2h	equ	0xFDA
  5070                           fsr2l	equ	0xFD9
  5071                           status	equ	0xFD8
  5072                           
  5073 ;; *************** function _EUSART1_Write *****************
  5074 ;; Defined at:
  5075 ;;		line 142 in file "mcc_generated_files/eusart1.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  txData          1    wreg     unsigned char 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  txData          1   36[COMRAM] unsigned char 
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  1    wreg      void 
  5082 ;; Registers used:
  5083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;Total ram usage:        1 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    4
  5096 ;; This function calls:
  5097 ;;		Nothing
  5098 ;; This function is called by:
  5099 ;;		_putch
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text30
  5104  00112A                     __ptext30:
  5105                           	opt stack 0
  5106  00112A                     _EUSART1_Write:
  5107                           	opt stack 24
  5108                           
  5109                           ;incstack = 0
  5110                           ;EUSART1_Write@txData stored from wreg
  5111  00112A  6E25               	movwf	EUSART1_Write@txData,c
  5112  00112C                     l2145:
  5113  00112C  503A               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  5114  00112E  B4D8               	btfsc	status,2,c
  5115  001130  D7FD               	goto	l2145
  5116                           
  5117                           ;eusart1.c: 146: }
  5118                           ;eusart1.c: 148: if(0 == PIE1bits.TX1IE)
  5119  001132  B89D               	btfsc	3997,4,c	;volatile
  5120  001134  D003               	goto	l110
  5121                           
  5122                           ;eusart1.c: 149: {
  5123                           ;eusart1.c: 150: TXREG1 = txData;
  5124  001136  C025  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  5125                           
  5126                           ;eusart1.c: 151: }
  5127  00113A  D012               	goto	l2159
  5128  00113C                     l110:
  5129                           
  5130                           ;eusart1.c: 152: else
  5131                           ;eusart1.c: 153: {
  5132                           ;eusart1.c: 154: PIE1bits.TX1IE = 0;
  5133  00113C  989D               	bcf	3997,4,c	;volatile
  5134                           
  5135                           ;eusart1.c: 155: eusart1TxBuffer[eusart1TxHead++] = txData;
  5136  00113E  5031               	movf	_eusart1TxHead,w,c
  5137  001140  0D01               	mullw	1
  5138  001142  0E00               	movlw	low _eusart1TxBuffer
  5139  001144  24F3               	addwf	prodl,w,c
  5140  001146  6ED9               	movwf	fsr2l,c
  5141  001148  0E01               	movlw	high _eusart1TxBuffer
  5142  00114A  20F4               	addwfc	prodh,w,c
  5143  00114C  6EDA               	movwf	fsr2h,c
  5144  00114E  C025  FFDF         	movff	EUSART1_Write@txData,indf2
  5145  001152  2A31               	incf	_eusart1TxHead,f,c
  5146                           
  5147                           ;eusart1.c: 156: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  5148  001154  0E7F               	movlw	127
  5149  001156  6431               	cpfsgt	_eusart1TxHead,c
  5150  001158  D002               	goto	l2157
  5151                           
  5152                           ;eusart1.c: 157: {
  5153                           ;eusart1.c: 158: eusart1TxHead = 0;
  5154  00115A  0E00               	movlw	0
  5155  00115C  6E31               	movwf	_eusart1TxHead,c
  5156  00115E                     l2157:
  5157                           
  5158                           ;eusart1.c: 159: }
  5159                           ;eusart1.c: 160: eusart1TxBufferRemaining--;
  5160  00115E  063A               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  5161  001160                     l2159:
  5162                           
  5163                           ;eusart1.c: 161: }
  5164                           ;eusart1.c: 162: PIE1bits.TX1IE = 1;
  5165  001160  889D               	bsf	3997,4,c	;volatile
  5166  001162  0012               	return		;funcret
  5167  001164                     __end_of_EUSART1_Write:
  5168                           	opt stack 0
  5169                           tblptru	equ	0xFF8
  5170                           tblptrh	equ	0xFF7
  5171                           tblptrl	equ	0xFF6
  5172                           tablat	equ	0xFF5
  5173                           prodh	equ	0xFF4
  5174                           prodl	equ	0xFF3
  5175                           intcon	equ	0xFF2
  5176                           intcon2	equ	0xFF1
  5177                           postinc0	equ	0xFEE
  5178                           wreg	equ	0xFE8
  5179                           indf1	equ	0xFE7
  5180                           postdec1	equ	0xFE5
  5181                           fsr1h	equ	0xFE2
  5182                           fsr1l	equ	0xFE1
  5183                           indf2	equ	0xFDF
  5184                           postinc2	equ	0xFDE
  5185                           postdec2	equ	0xFDD
  5186                           fsr2h	equ	0xFDA
  5187                           fsr2l	equ	0xFD9
  5188                           status	equ	0xFD8
  5189                           
  5190 ;; *************** function _isdigit *****************
  5191 ;; Defined at:
  5192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isdigit.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  c               1    wreg     unsigned char 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  c               1   38[COMRAM] unsigned char 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;		None               void
  5199 ;; Registers used:
  5200 ;;		wreg, status,2, status,0
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;Total ram usage:        3 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    4
  5213 ;; This function calls:
  5214 ;;		Nothing
  5215 ;; This function is called by:
  5216 ;;		_printf
  5217 ;;		_strtol
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           	psect	text31
  5222  001404                     __ptext31:
  5223                           	opt stack 0
  5224  001404                     _isdigit:
  5225                           	opt stack 25
  5226                           
  5227                           ;incstack = 0
  5228                           ;isdigit@c stored from wreg
  5229  001404  6E27               	movwf	isdigit@c,c
  5230  001406  0E00               	movlw	0
  5231  001408  6E26               	movwf	_isdigit$1236,c
  5232  00140A  0E3A               	movlw	58
  5233  00140C  6027               	cpfslt	isdigit@c,c
  5234  00140E  D005               	goto	l2171
  5235  001410  0E2F               	movlw	47
  5236  001412  6427               	cpfsgt	isdigit@c,c
  5237  001414  D002               	goto	l2171
  5238  001416  0E01               	movlw	1
  5239  001418  6E26               	movwf	_isdigit$1236,c
  5240  00141A                     l2171:
  5241  00141A  C026  F025         	movff	_isdigit$1236,??_isdigit
  5242  00141E  3025               	rrcf	??_isdigit,w,c
  5243  001420  0012               	return	
  5244  001422                     __end_of_isdigit:
  5245                           	opt stack 0
  5246                           tblptru	equ	0xFF8
  5247                           tblptrh	equ	0xFF7
  5248                           tblptrl	equ	0xFF6
  5249                           tablat	equ	0xFF5
  5250                           prodh	equ	0xFF4
  5251                           prodl	equ	0xFF3
  5252                           intcon	equ	0xFF2
  5253                           intcon2	equ	0xFF1
  5254                           postinc0	equ	0xFEE
  5255                           wreg	equ	0xFE8
  5256                           indf1	equ	0xFE7
  5257                           postdec1	equ	0xFE5
  5258                           fsr1h	equ	0xFE2
  5259                           fsr1l	equ	0xFE1
  5260                           indf2	equ	0xFDF
  5261                           postinc2	equ	0xFDE
  5262                           postdec2	equ	0xFDD
  5263                           fsr2h	equ	0xFDA
  5264                           fsr2l	equ	0xFD9
  5265                           status	equ	0xFD8
  5266                           
  5267 ;; *************** function ___wmul *****************
  5268 ;; Defined at:
  5269 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  multiplier      2   36[COMRAM] unsigned int 
  5272 ;;  multiplicand    2   38[COMRAM] unsigned int 
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  product         2   40[COMRAM] unsigned int 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  2   36[COMRAM] unsigned int 
  5277 ;; Registers used:
  5278 ;;		wreg, status,2, status,0, prodl, prodh
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5284 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5288 ;;Total ram usage:        6 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    4
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_printf
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           	psect	text32
  5299  001362                     __ptext32:
  5300                           	opt stack 0
  5301  001362                     ___wmul:
  5302                           	opt stack 25
  5303                           
  5304                           ;incstack = 0
  5305  001362  5025               	movf	___wmul@multiplier,w,c
  5306  001364  0227               	mulwf	___wmul@multiplicand,c
  5307  001366  CFF3 F029          	movff	prodl,___wmul@product
  5308  00136A  CFF4 F02A          	movff	prodh,___wmul@product+1
  5309  00136E  5025               	movf	___wmul@multiplier,w,c
  5310  001370  0228               	mulwf	___wmul@multiplicand+1,c
  5311  001372  50F3               	movf	prodl,w,c
  5312  001374  262A               	addwf	___wmul@product+1,f,c
  5313  001376  5026               	movf	___wmul@multiplier+1,w,c
  5314  001378  0227               	mulwf	___wmul@multiplicand,c
  5315  00137A  50F3               	movf	prodl,w,c
  5316  00137C  262A               	addwf	___wmul@product+1,f,c
  5317  00137E  C029  F025         	movff	___wmul@product,?___wmul
  5318  001382  C02A  F026         	movff	___wmul@product+1,?___wmul+1
  5319  001386  0012               	return	
  5320  001388                     __end_of___wmul:
  5321                           	opt stack 0
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           intcon	equ	0xFF2
  5329                           intcon2	equ	0xFF1
  5330                           postinc0	equ	0xFEE
  5331                           wreg	equ	0xFE8
  5332                           indf1	equ	0xFE7
  5333                           postdec1	equ	0xFE5
  5334                           fsr1h	equ	0xFE2
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function ___lwmod *****************
  5344 ;; Defined at:
  5345 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwmod.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  dividend        2    0[BANK0 ] unsigned int 
  5348 ;;  divisor         2    2[BANK0 ] unsigned int 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  counter         1    4[BANK0 ] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  2    0[BANK0 ] unsigned int 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5360 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;Total ram usage:        5 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    4
  5367 ;; This function calls:
  5368 ;;		Nothing
  5369 ;; This function is called by:
  5370 ;;		_printf
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text33
  5375  000F9E                     __ptext33:
  5376                           	opt stack 0
  5377  000F9E                     ___lwmod:
  5378                           	opt stack 25
  5379                           
  5380                           ;incstack = 0
  5381  000F9E  0100               	movlb	0	; () banked
  5382  000FA0  518B               	movf	___lwmod@divisor& (0+255),w,b
  5383  000FA2  0100               	movlb	0	; () banked
  5384  000FA4  118C               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5385  000FA6  B4D8               	btfsc	status,2,c
  5386  000FA8  D026               	goto	l871
  5387                           
  5388                           ; BSR set to: 0
  5389  000FAA  0E01               	movlw	1
  5390  000FAC  0100               	movlb	0	; () banked
  5391  000FAE  6F8D               	movwf	___lwmod@counter& (0+255),b
  5392  000FB0  D006               	goto	l3035
  5393  000FB2                     l3033:
  5394                           
  5395                           ; BSR set to: 0
  5396  000FB2  0100               	movlb	0	; () banked
  5397  000FB4  90D8               	bcf	status,0,c
  5398  000FB6  378B               	rlcf	___lwmod@divisor& (0+255),f,b
  5399  000FB8  378C               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5400  000FBA  0100               	movlb	0	; () banked
  5401  000FBC  2B8D               	incf	___lwmod@counter& (0+255),f,b
  5402  000FBE                     l3035:
  5403                           
  5404                           ; BSR set to: 0
  5405  000FBE  0100               	movlb	0	; () banked
  5406  000FC0  AF8C               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5407  000FC2  D7F7               	goto	l3033
  5408  000FC4                     l3037:
  5409                           
  5410                           ; BSR set to: 0
  5411  000FC4  0100               	movlb	0	; () banked
  5412  000FC6  518B               	movf	___lwmod@divisor& (0+255),w,b
  5413  000FC8  0100               	movlb	0	; () banked
  5414  000FCA  5D89               	subwf	___lwmod@dividend& (0+255),w,b
  5415  000FCC  0100               	movlb	0	; () banked
  5416  000FCE  518C               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5417  000FD0  0100               	movlb	0	; () banked
  5418  000FD2  598A               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5419  000FD4  A0D8               	btfss	status,0,c
  5420  000FD6  D008               	goto	l3041
  5421                           
  5422                           ; BSR set to: 0
  5423  000FD8  0100               	movlb	0	; () banked
  5424  000FDA  518B               	movf	___lwmod@divisor& (0+255),w,b
  5425  000FDC  0100               	movlb	0	; () banked
  5426  000FDE  5F89               	subwf	___lwmod@dividend& (0+255),f,b
  5427  000FE0  0100               	movlb	0	; () banked
  5428  000FE2  518C               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5429  000FE4  0100               	movlb	0	; () banked
  5430  000FE6  5B8A               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5431  000FE8                     l3041:
  5432                           
  5433                           ; BSR set to: 0
  5434  000FE8  0100               	movlb	0	; () banked
  5435  000FEA  90D8               	bcf	status,0,c
  5436  000FEC  338C               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5437  000FEE  338B               	rrcf	___lwmod@divisor& (0+255),f,b
  5438                           
  5439                           ; BSR set to: 0
  5440  000FF0  0100               	movlb	0	; () banked
  5441  000FF2  2F8D               	decfsz	___lwmod@counter& (0+255),f,b
  5442  000FF4  D7E7               	goto	l3037
  5443  000FF6                     l871:
  5444                           
  5445                           ; BSR set to: 0
  5446  000FF6  C089  F089         	movff	___lwmod@dividend,?___lwmod
  5447  000FFA  C08A  F08A         	movff	___lwmod@dividend+1,?___lwmod+1
  5448                           
  5449                           ; BSR set to: 0
  5450  000FFE  0012               	return		;funcret
  5451  001000                     __end_of___lwmod:
  5452                           	opt stack 0
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           intcon	equ	0xFF2
  5460                           intcon2	equ	0xFF1
  5461                           postinc0	equ	0xFEE
  5462                           wreg	equ	0xFE8
  5463                           indf1	equ	0xFE7
  5464                           postdec1	equ	0xFE5
  5465                           fsr1h	equ	0xFE2
  5466                           fsr1l	equ	0xFE1
  5467                           indf2	equ	0xFDF
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function ___lwdiv *****************
  5475 ;; Defined at:
  5476 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  dividend        2   36[COMRAM] unsigned int 
  5479 ;;  divisor         2   38[COMRAM] unsigned int 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  quotient        2   40[COMRAM] unsigned int 
  5482 ;;  counter         1   42[COMRAM] unsigned char 
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  2   36[COMRAM] unsigned int 
  5485 ;; Registers used:
  5486 ;;		wreg, status,2, status,0
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5492 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;Total ram usage:        7 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    4
  5499 ;; This function calls:
  5500 ;;		Nothing
  5501 ;; This function is called by:
  5502 ;;		_printf
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text34
  5507  001054                     __ptext34:
  5508                           	opt stack 0
  5509  001054                     ___lwdiv:
  5510                           	opt stack 25
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;incstack = 0
  5514  001054  0E00               	movlw	0
  5515  001056  6E2A               	movwf	___lwdiv@quotient+1,c
  5516  001058  0E00               	movlw	0
  5517  00105A  6E29               	movwf	___lwdiv@quotient,c
  5518  00105C  5027               	movf	___lwdiv@divisor,w,c
  5519  00105E  1028               	iorwf	___lwdiv@divisor+1,w,c
  5520  001060  B4D8               	btfsc	status,2,c
  5521  001062  D01C               	goto	l861
  5522  001064  0E01               	movlw	1
  5523  001066  6E2B               	movwf	___lwdiv@counter,c
  5524  001068  D004               	goto	l2189
  5525  00106A                     l2187:
  5526  00106A  90D8               	bcf	status,0,c
  5527  00106C  3627               	rlcf	___lwdiv@divisor,f,c
  5528  00106E  3628               	rlcf	___lwdiv@divisor+1,f,c
  5529  001070  2A2B               	incf	___lwdiv@counter,f,c
  5530  001072                     l2189:
  5531  001072  AE28               	btfss	___lwdiv@divisor+1,7,c
  5532  001074  D7FA               	goto	l2187
  5533  001076                     l2191:
  5534  001076  90D8               	bcf	status,0,c
  5535  001078  3629               	rlcf	___lwdiv@quotient,f,c
  5536  00107A  362A               	rlcf	___lwdiv@quotient+1,f,c
  5537  00107C  5027               	movf	___lwdiv@divisor,w,c
  5538  00107E  5C25               	subwf	___lwdiv@dividend,w,c
  5539  001080  5028               	movf	___lwdiv@divisor+1,w,c
  5540  001082  5826               	subwfb	___lwdiv@dividend+1,w,c
  5541  001084  A0D8               	btfss	status,0,c
  5542  001086  D005               	goto	l2199
  5543  001088  5027               	movf	___lwdiv@divisor,w,c
  5544  00108A  5E25               	subwf	___lwdiv@dividend,f,c
  5545  00108C  5028               	movf	___lwdiv@divisor+1,w,c
  5546  00108E  5A26               	subwfb	___lwdiv@dividend+1,f,c
  5547  001090  8029               	bsf	___lwdiv@quotient,0,c
  5548  001092                     l2199:
  5549  001092  90D8               	bcf	status,0,c
  5550  001094  3228               	rrcf	___lwdiv@divisor+1,f,c
  5551  001096  3227               	rrcf	___lwdiv@divisor,f,c
  5552  001098  2E2B               	decfsz	___lwdiv@counter,f,c
  5553  00109A  D7ED               	goto	l2191
  5554  00109C                     l861:
  5555  00109C  C029  F025         	movff	___lwdiv@quotient,?___lwdiv
  5556  0010A0  C02A  F026         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5557  0010A4  0012               	return		;funcret
  5558  0010A6                     __end_of___lwdiv:
  5559                           	opt stack 0
  5560                           tblptru	equ	0xFF8
  5561                           tblptrh	equ	0xFF7
  5562                           tblptrl	equ	0xFF6
  5563                           tablat	equ	0xFF5
  5564                           prodh	equ	0xFF4
  5565                           prodl	equ	0xFF3
  5566                           intcon	equ	0xFF2
  5567                           intcon2	equ	0xFF1
  5568                           postinc0	equ	0xFEE
  5569                           wreg	equ	0xFE8
  5570                           indf1	equ	0xFE7
  5571                           postdec1	equ	0xFE5
  5572                           fsr1h	equ	0xFE2
  5573                           fsr1l	equ	0xFE1
  5574                           indf2	equ	0xFDF
  5575                           postinc2	equ	0xFDE
  5576                           postdec2	equ	0xFDD
  5577                           fsr2h	equ	0xFDA
  5578                           fsr2l	equ	0xFD9
  5579                           status	equ	0xFD8
  5580                           
  5581 ;; *************** function ___awmod *****************
  5582 ;; Defined at:
  5583 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  dividend        2    8[BANK0 ] int 
  5586 ;;  divisor         2   10[BANK0 ] int 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  sign            1   13[BANK0 ] unsigned char 
  5589 ;;  counter         1   12[BANK0 ] unsigned char 
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  2    8[BANK0 ] int 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5599 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5603 ;;Total ram usage:        6 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    4
  5606 ;; This function calls:
  5607 ;;		Nothing
  5608 ;; This function is called by:
  5609 ;;		_InitRadio
  5610 ;;		_main
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text35
  5615  000B88                     __ptext35:
  5616                           	opt stack 0
  5617  000B88                     ___awmod:
  5618                           	opt stack 26
  5619                           
  5620                           ;incstack = 0
  5621  000B88  0E00               	movlw	0
  5622  000B8A  0100               	movlb	0	; () banked
  5623  000B8C  6F96               	movwf	___awmod@sign& (0+255),b
  5624                           
  5625                           ; BSR set to: 0
  5626  000B8E  0100               	movlb	0	; () banked
  5627  000B90  AF92               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5628  000B92  D008               	goto	l3321
  5629                           
  5630                           ; BSR set to: 0
  5631  000B94  0100               	movlb	0	; () banked
  5632  000B96  6D91               	negf	___awmod@dividend& (0+255),b
  5633  000B98  1F92               	comf	(___awmod@dividend+1)& (0+255),f,b
  5634  000B9A  B0D8               	btfsc	status,0,c
  5635  000B9C  2B92               	incf	(___awmod@dividend+1)& (0+255),f,b
  5636                           
  5637                           ; BSR set to: 0
  5638  000B9E  0E01               	movlw	1
  5639  000BA0  0100               	movlb	0	; () banked
  5640  000BA2  6F96               	movwf	___awmod@sign& (0+255),b
  5641  000BA4                     l3321:
  5642                           
  5643                           ; BSR set to: 0
  5644  000BA4  0100               	movlb	0	; () banked
  5645  000BA6  AF94               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5646  000BA8  D005               	goto	l3325
  5647                           
  5648                           ; BSR set to: 0
  5649  000BAA  0100               	movlb	0	; () banked
  5650  000BAC  6D93               	negf	___awmod@divisor& (0+255),b
  5651  000BAE  1F94               	comf	(___awmod@divisor+1)& (0+255),f,b
  5652  000BB0  B0D8               	btfsc	status,0,c
  5653  000BB2  2B94               	incf	(___awmod@divisor+1)& (0+255),f,b
  5654  000BB4                     l3325:
  5655                           
  5656                           ; BSR set to: 0
  5657  000BB4  0100               	movlb	0	; () banked
  5658  000BB6  5193               	movf	___awmod@divisor& (0+255),w,b
  5659  000BB8  0100               	movlb	0	; () banked
  5660  000BBA  1194               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5661  000BBC  B4D8               	btfsc	status,2,c
  5662  000BBE  D026               	goto	l3341
  5663                           
  5664                           ; BSR set to: 0
  5665  000BC0  0E01               	movlw	1
  5666  000BC2  0100               	movlb	0	; () banked
  5667  000BC4  6F95               	movwf	___awmod@counter& (0+255),b
  5668  000BC6  D006               	goto	l3331
  5669  000BC8                     l3329:
  5670                           
  5671                           ; BSR set to: 0
  5672  000BC8  0100               	movlb	0	; () banked
  5673  000BCA  90D8               	bcf	status,0,c
  5674  000BCC  3793               	rlcf	___awmod@divisor& (0+255),f,b
  5675  000BCE  3794               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5676  000BD0  0100               	movlb	0	; () banked
  5677  000BD2  2B95               	incf	___awmod@counter& (0+255),f,b
  5678  000BD4                     l3331:
  5679                           
  5680                           ; BSR set to: 0
  5681  000BD4  0100               	movlb	0	; () banked
  5682  000BD6  AF94               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5683  000BD8  D7F7               	goto	l3329
  5684  000BDA                     l3333:
  5685                           
  5686                           ; BSR set to: 0
  5687  000BDA  0100               	movlb	0	; () banked
  5688  000BDC  5193               	movf	___awmod@divisor& (0+255),w,b
  5689  000BDE  0100               	movlb	0	; () banked
  5690  000BE0  5D91               	subwf	___awmod@dividend& (0+255),w,b
  5691  000BE2  0100               	movlb	0	; () banked
  5692  000BE4  5194               	movf	(___awmod@divisor+1)& (0+255),w,b
  5693  000BE6  0100               	movlb	0	; () banked
  5694  000BE8  5992               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5695  000BEA  A0D8               	btfss	status,0,c
  5696  000BEC  D008               	goto	l3337
  5697                           
  5698                           ; BSR set to: 0
  5699  000BEE  0100               	movlb	0	; () banked
  5700  000BF0  5193               	movf	___awmod@divisor& (0+255),w,b
  5701  000BF2  0100               	movlb	0	; () banked
  5702  000BF4  5F91               	subwf	___awmod@dividend& (0+255),f,b
  5703  000BF6  0100               	movlb	0	; () banked
  5704  000BF8  5194               	movf	(___awmod@divisor+1)& (0+255),w,b
  5705  000BFA  0100               	movlb	0	; () banked
  5706  000BFC  5B92               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5707  000BFE                     l3337:
  5708                           
  5709                           ; BSR set to: 0
  5710  000BFE  0100               	movlb	0	; () banked
  5711  000C00  90D8               	bcf	status,0,c
  5712  000C02  3394               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5713  000C04  3393               	rrcf	___awmod@divisor& (0+255),f,b
  5714                           
  5715                           ; BSR set to: 0
  5716  000C06  0100               	movlb	0	; () banked
  5717  000C08  2F95               	decfsz	___awmod@counter& (0+255),f,b
  5718  000C0A  D7E7               	goto	l3333
  5719  000C0C                     l3341:
  5720                           
  5721                           ; BSR set to: 0
  5722  000C0C  0100               	movlb	0	; () banked
  5723  000C0E  5196               	movf	___awmod@sign& (0+255),w,b
  5724  000C10  0100               	movlb	0	; () banked
  5725  000C12  B4D8               	btfsc	status,2,c
  5726  000C14  D005               	goto	l3345
  5727                           
  5728                           ; BSR set to: 0
  5729  000C16  0100               	movlb	0	; () banked
  5730  000C18  6D91               	negf	___awmod@dividend& (0+255),b
  5731  000C1A  1F92               	comf	(___awmod@dividend+1)& (0+255),f,b
  5732  000C1C  B0D8               	btfsc	status,0,c
  5733  000C1E  2B92               	incf	(___awmod@dividend+1)& (0+255),f,b
  5734  000C20                     l3345:
  5735                           
  5736                           ; BSR set to: 0
  5737  000C20  C091  F091         	movff	___awmod@dividend,?___awmod
  5738  000C24  C092  F092         	movff	___awmod@dividend+1,?___awmod+1
  5739  000C28  0012               	return	
  5740  000C2A                     __end_of___awmod:
  5741                           	opt stack 0
  5742                           tblptru	equ	0xFF8
  5743                           tblptrh	equ	0xFF7
  5744                           tblptrl	equ	0xFF6
  5745                           tablat	equ	0xFF5
  5746                           prodh	equ	0xFF4
  5747                           prodl	equ	0xFF3
  5748                           intcon	equ	0xFF2
  5749                           intcon2	equ	0xFF1
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           indf1	equ	0xFE7
  5753                           postdec1	equ	0xFE5
  5754                           fsr1h	equ	0xFE2
  5755                           fsr1l	equ	0xFE1
  5756                           indf2	equ	0xFDF
  5757                           postinc2	equ	0xFDE
  5758                           postdec2	equ	0xFDD
  5759                           fsr2h	equ	0xFDA
  5760                           fsr2l	equ	0xFD9
  5761                           status	equ	0xFD8
  5762                           
  5763 ;; *************** function _I2C_Read_Byte *****************
  5764 ;; Defined at:
  5765 ;;		line 124 in file "soft_i2c.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;  ack             1    wreg     unsigned char 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  ack             1   36[COMRAM] unsigned char 
  5770 ;;  i               1   38[COMRAM] unsigned char 
  5771 ;;  val             1   37[COMRAM] unsigned char 
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  1    wreg      unsigned char 
  5774 ;; Registers used:
  5775 ;;		wreg, status,2, status,0, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;Total ram usage:        3 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    5
  5788 ;; This function calls:
  5789 ;;		_I2C_SCL_CLEAR
  5790 ;;		_I2C_SCL_SET
  5791 ;;		_I2C_SDA_CLEAR
  5792 ;;		_I2C_SDA_IN_SET
  5793 ;;		_I2C_SDA_OUT_SET
  5794 ;;		_I2C_SDA_READ
  5795 ;;		_I2C_SDA_SET
  5796 ;; This function is called by:
  5797 ;;		_main
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text36
  5802  000C2A                     __ptext36:
  5803                           	opt stack 0
  5804  000C2A                     _I2C_Read_Byte:
  5805                           	opt stack 25
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;incstack = 0
  5809                           ;I2C_Read_Byte@ack stored from wreg
  5810  000C2A  6E25               	movwf	I2C_Read_Byte@ack,c
  5811                           
  5812                           ;soft_i2c.c: 125: char i;
  5813                           ;soft_i2c.c: 126: char val = 0;
  5814  000C2C  0E00               	movlw	0
  5815  000C2E  6E26               	movwf	I2C_Read_Byte@val,c
  5816                           
  5817                           ;soft_i2c.c: 127: I2C_SDA_IN_SET();
  5818  000C30  EC5F  F00A         	call	_I2C_SDA_IN_SET	;wreg free
  5819                           
  5820                           ;soft_i2c.c: 130: for (i = 0; i < 8; i++) {
  5821  000C34  0E00               	movlw	0
  5822  000C36  6E27               	movwf	I2C_Read_Byte@i,c
  5823  000C38                     l2927:
  5824  000C38  0E07               	movlw	7
  5825  000C3A  6427               	cpfsgt	I2C_Read_Byte@i,c
  5826  000C3C  D001               	goto	l2931
  5827  000C3E  D01F               	goto	l2955
  5828  000C40                     l2931:
  5829                           
  5830                           ;soft_i2c.c: 131: if (i != 0) {
  5831  000C40  5027               	movf	I2C_Read_Byte@i,w,c
  5832  000C42  B4D8               	btfsc	status,2,c
  5833  000C44  D002               	goto	l2935
  5834                           
  5835                           ;soft_i2c.c: 132: val <<= 1;
  5836  000C46  90D8               	bcf	status,0,c
  5837  000C48  3626               	rlcf	I2C_Read_Byte@val,f,c
  5838  000C4A                     l2935:
  5839                           
  5840                           ;soft_i2c.c: 133: }
  5841                           ;soft_i2c.c: 134: I2C_SCL_SET();
  5842  000C4A  EC63  F00A         	call	_I2C_SCL_SET	;wreg free
  5843                           
  5844                           ;soft_i2c.c: 135: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5845  000C4E  0E6A               	movlw	106
  5846  000C50                     u3147:
  5847  000C50  2EE8               	decfsz	wreg,f,c
  5848  000C52  D7FE               	goto	u3147
  5849  000C54  D000               	nop2		;nop
  5850                           
  5851                           ;soft_i2c.c: 136: if (I2C_SDA_READ() != 0) {
  5852  000C56  EC45  F00A         	call	_I2C_SDA_READ	;wreg free
  5853  000C5A  0900               	iorlw	0
  5854  000C5C  B4D8               	btfsc	status,2,c
  5855  000C5E  D002               	goto	l2943
  5856                           
  5857                           ;soft_i2c.c: 137: val |= 0x01;
  5858  000C60  8026               	bsf	I2C_Read_Byte@val,0,c
  5859                           
  5860                           ;soft_i2c.c: 138: } else {
  5861  000C62  D001               	goto	l2945
  5862  000C64                     l2943:
  5863                           
  5864                           ;soft_i2c.c: 139: val &= 0xFE;
  5865  000C64  9026               	bcf	I2C_Read_Byte@val,0,c
  5866  000C66                     l2945:
  5867                           
  5868                           ;soft_i2c.c: 141: }
  5869                           ;soft_i2c.c: 142: _delay((unsigned long)((10)*(64000000/4000000.0)));
  5870  000C66  0E35               	movlw	53
  5871  000C68                     u3157:
  5872  000C68  2EE8               	decfsz	wreg,f,c
  5873  000C6A  D7FE               	goto	u3157
  5874  000C6C  F000               	nop	
  5875                           
  5876                           ;soft_i2c.c: 143: I2C_SCL_CLEAR();
  5877  000C6E  EC65  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  5878                           
  5879                           ;soft_i2c.c: 144: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5880  000C72  0E6A               	movlw	106
  5881  000C74                     u3167:
  5882  000C74  2EE8               	decfsz	wreg,f,c
  5883  000C76  D7FE               	goto	u3167
  5884  000C78  D000               	nop2		;nop
  5885  000C7A  2A27               	incf	I2C_Read_Byte@i,f,c
  5886  000C7C  D7DD               	goto	l2927
  5887  000C7E                     l2955:
  5888                           
  5889                           ;soft_i2c.c: 145: }
  5890                           ;soft_i2c.c: 147: I2C_SDA_OUT_SET();
  5891  000C7E  EC5D  F00A         	call	_I2C_SDA_OUT_SET	;wreg free
  5892                           
  5893                           ;soft_i2c.c: 150: if (ack) {
  5894  000C82  5025               	movf	I2C_Read_Byte@ack,w,c
  5895  000C84  B4D8               	btfsc	status,2,c
  5896  000C86  D00E               	goto	l2965
  5897                           
  5898                           ;soft_i2c.c: 151: I2C_SDA_CLEAR();
  5899  000C88  EC61  F00A         	call	_I2C_SDA_CLEAR	;wreg free
  5900                           
  5901                           ;soft_i2c.c: 152: I2C_SCL_SET();
  5902  000C8C  EC63  F00A         	call	_I2C_SCL_SET	;wreg free
  5903                           
  5904                           ;soft_i2c.c: 153: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5905  000C90  0E6A               	movlw	106
  5906  000C92                     u3177:
  5907  000C92  2EE8               	decfsz	wreg,f,c
  5908  000C94  D7FE               	goto	u3177
  5909  000C96  D000               	nop2		;nop
  5910                           
  5911                           ;soft_i2c.c: 154: I2C_SCL_CLEAR();
  5912  000C98  EC65  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  5913                           
  5914                           ;soft_i2c.c: 155: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5915  000C9C  0E6A               	movlw	106
  5916  000C9E                     u3187:
  5917  000C9E  2EE8               	decfsz	wreg,f,c
  5918  000CA0  D7FE               	goto	u3187
  5919  000CA2  D00D               	goto	L2
  5920  000CA4                     l2965:
  5921                           
  5922                           ;soft_i2c.c: 157: I2C_SDA_SET();
  5923  000CA4  EC5B  F00A         	call	_I2C_SDA_SET	;wreg free
  5924                           
  5925                           ;soft_i2c.c: 158: I2C_SCL_SET();
  5926  000CA8  EC63  F00A         	call	_I2C_SCL_SET	;wreg free
  5927                           
  5928                           ;soft_i2c.c: 159: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5929  000CAC  0E6A               	movlw	106
  5930  000CAE                     u3197:
  5931  000CAE  2EE8               	decfsz	wreg,f,c
  5932  000CB0  D7FE               	goto	u3197
  5933  000CB2  D000               	nop2		;nop
  5934                           
  5935                           ;soft_i2c.c: 160: I2C_SCL_CLEAR();
  5936  000CB4  EC65  F00A         	call	_I2C_SCL_CLEAR	;wreg free
  5937                           
  5938                           ;soft_i2c.c: 161: _delay((unsigned long)((20)*(64000000/4000000.0)));
  5939  000CB8  0E6A               	movlw	106
  5940  000CBA                     u3207:
  5941  000CBA  2EE8               	decfsz	wreg,f,c
  5942  000CBC  D7FE               	goto	u3207
  5943  000CBE                     L2:
  5944  000CBE  D000               	nop2		;nop
  5945                           
  5946                           ;soft_i2c.c: 162: }
  5947                           ;soft_i2c.c: 164: return val;
  5948  000CC0  5026               	movf	I2C_Read_Byte@val,w,c
  5949  000CC2  0012               	return	
  5950  000CC4                     __end_of_I2C_Read_Byte:
  5951                           	opt stack 0
  5952                           tblptru	equ	0xFF8
  5953                           tblptrh	equ	0xFF7
  5954                           tblptrl	equ	0xFF6
  5955                           tablat	equ	0xFF5
  5956                           prodh	equ	0xFF4
  5957                           prodl	equ	0xFF3
  5958                           intcon	equ	0xFF2
  5959                           intcon2	equ	0xFF1
  5960                           postinc0	equ	0xFEE
  5961                           wreg	equ	0xFE8
  5962                           indf1	equ	0xFE7
  5963                           postdec1	equ	0xFE5
  5964                           fsr1h	equ	0xFE2
  5965                           fsr1l	equ	0xFE1
  5966                           indf2	equ	0xFDF
  5967                           postinc2	equ	0xFDE
  5968                           postdec2	equ	0xFDD
  5969                           fsr2h	equ	0xFDA
  5970                           fsr2l	equ	0xFD9
  5971                           status	equ	0xFD8
  5972                           
  5973 ;; *************** function _I2C_SDA_SET *****************
  5974 ;; Defined at:
  5975 ;;		line 11 in file "soft_i2c.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;		None
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;		None
  5980 ;; Return value:  Size  Location     Type
  5981 ;;                  1    wreg      void 
  5982 ;; Registers used:
  5983 ;;		None
  5984 ;; Tracked objects:
  5985 ;;		On entry : 0/0
  5986 ;;		On exit  : 0/0
  5987 ;;		Unchanged: 0/0
  5988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;Total ram usage:        0 bytes
  5994 ;; Hardware stack levels used:    1
  5995 ;; Hardware stack levels required when called:    4
  5996 ;; This function calls:
  5997 ;;		Nothing
  5998 ;; This function is called by:
  5999 ;;		_I2C_Init
  6000 ;;		_I2C_Start
  6001 ;;		_I2C_Stop
  6002 ;;		_I2C_Write_Byte
  6003 ;;		_I2C_Read_Byte
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text37
  6008  0014B6                     __ptext37:
  6009                           	opt stack 0
  6010  0014B6                     _I2C_SDA_SET:
  6011                           	opt stack 24
  6012                           
  6013                           ;soft_i2c.c: 12: LATC4 = 1;
  6014                           
  6015                           ;incstack = 0
  6016  0014B6  888B               	bsf	3979,4,c	;volatile
  6017  0014B8  0012               	return		;funcret
  6018  0014BA                     __end_of_I2C_SDA_SET:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodh	equ	0xFF4
  6025                           prodl	equ	0xFF3
  6026                           intcon	equ	0xFF2
  6027                           intcon2	equ	0xFF1
  6028                           postinc0	equ	0xFEE
  6029                           wreg	equ	0xFE8
  6030                           indf1	equ	0xFE7
  6031                           postdec1	equ	0xFE5
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           postdec2	equ	0xFDD
  6037                           fsr2h	equ	0xFDA
  6038                           fsr2l	equ	0xFD9
  6039                           status	equ	0xFD8
  6040                           
  6041 ;; *************** function _I2C_SDA_READ *****************
  6042 ;; Defined at:
  6043 ;;		line 39 in file "soft_i2c.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;		None
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;		None
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  1    wreg      unsigned char 
  6050 ;; Registers used:
  6051 ;;		wreg
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;Total ram usage:        0 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    4
  6064 ;; This function calls:
  6065 ;;		Nothing
  6066 ;; This function is called by:
  6067 ;;		_I2C_Read_Byte
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           	psect	text38
  6072  00148A                     __ptext38:
  6073                           	opt stack 0
  6074  00148A                     _I2C_SDA_READ:
  6075                           	opt stack 25
  6076                           
  6077                           ;soft_i2c.c: 40: return PORTCbits.RC4;
  6078                           
  6079                           ;incstack = 0
  6080  00148A  A882               	btfss	3970,4,c	;volatile
  6081  00148C  D002               	goto	u2140
  6082  00148E  0E01               	movlw	1
  6083  001490  0012               	return	
  6084  001492                     u2140:
  6085  001492  0E00               	movlw	0
  6086  001494  0012               	return	
  6087  001496                     __end_of_I2C_SDA_READ:
  6088                           	opt stack 0
  6089                           tblptru	equ	0xFF8
  6090                           tblptrh	equ	0xFF7
  6091                           tblptrl	equ	0xFF6
  6092                           tablat	equ	0xFF5
  6093                           prodh	equ	0xFF4
  6094                           prodl	equ	0xFF3
  6095                           intcon	equ	0xFF2
  6096                           intcon2	equ	0xFF1
  6097                           postinc0	equ	0xFEE
  6098                           wreg	equ	0xFE8
  6099                           indf1	equ	0xFE7
  6100                           postdec1	equ	0xFE5
  6101                           fsr1h	equ	0xFE2
  6102                           fsr1l	equ	0xFE1
  6103                           indf2	equ	0xFDF
  6104                           postinc2	equ	0xFDE
  6105                           postdec2	equ	0xFDD
  6106                           fsr2h	equ	0xFDA
  6107                           fsr2l	equ	0xFD9
  6108                           status	equ	0xFD8
  6109                           
  6110 ;; *************** function _I2C_SDA_OUT_SET *****************
  6111 ;; Defined at:
  6112 ;;		line 23 in file "soft_i2c.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;		None
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;		None
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      void 
  6119 ;; Registers used:
  6120 ;;		None
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;Total ram usage:        0 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    4
  6133 ;; This function calls:
  6134 ;;		Nothing
  6135 ;; This function is called by:
  6136 ;;		_I2C_Init
  6137 ;;		_I2C_Start
  6138 ;;		_I2C_Stop
  6139 ;;		_I2C_Write_Byte
  6140 ;;		_I2C_Read_Byte
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	text39
  6145  0014BA                     __ptext39:
  6146                           	opt stack 0
  6147  0014BA                     _I2C_SDA_OUT_SET:
  6148                           	opt stack 24
  6149                           
  6150                           ;soft_i2c.c: 24: TRISC4 = 0;
  6151                           
  6152                           ;incstack = 0
  6153  0014BA  9894               	bcf	3988,4,c	;volatile
  6154  0014BC  0012               	return		;funcret
  6155  0014BE                     __end_of_I2C_SDA_OUT_SET:
  6156                           	opt stack 0
  6157                           tblptru	equ	0xFF8
  6158                           tblptrh	equ	0xFF7
  6159                           tblptrl	equ	0xFF6
  6160                           tablat	equ	0xFF5
  6161                           prodh	equ	0xFF4
  6162                           prodl	equ	0xFF3
  6163                           intcon	equ	0xFF2
  6164                           intcon2	equ	0xFF1
  6165                           postinc0	equ	0xFEE
  6166                           wreg	equ	0xFE8
  6167                           indf1	equ	0xFE7
  6168                           postdec1	equ	0xFE5
  6169                           fsr1h	equ	0xFE2
  6170                           fsr1l	equ	0xFE1
  6171                           indf2	equ	0xFDF
  6172                           postinc2	equ	0xFDE
  6173                           postdec2	equ	0xFDD
  6174                           fsr2h	equ	0xFDA
  6175                           fsr2l	equ	0xFD9
  6176                           status	equ	0xFD8
  6177                           
  6178 ;; *************** function _I2C_SDA_IN_SET *****************
  6179 ;; Defined at:
  6180 ;;		line 19 in file "soft_i2c.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;		None
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;		None
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      void 
  6187 ;; Registers used:
  6188 ;;		None
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;Total ram usage:        0 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    4
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_I2C_Write_Byte
  6205 ;;		_I2C_Read_Byte
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text40
  6210  0014BE                     __ptext40:
  6211                           	opt stack 0
  6212  0014BE                     _I2C_SDA_IN_SET:
  6213                           	opt stack 24
  6214                           
  6215                           ;soft_i2c.c: 20: TRISC4 = 1;
  6216                           
  6217                           ;incstack = 0
  6218  0014BE  8894               	bsf	3988,4,c	;volatile
  6219  0014C0  0012               	return		;funcret
  6220  0014C2                     __end_of_I2C_SDA_IN_SET:
  6221                           	opt stack 0
  6222                           tblptru	equ	0xFF8
  6223                           tblptrh	equ	0xFF7
  6224                           tblptrl	equ	0xFF6
  6225                           tablat	equ	0xFF5
  6226                           prodh	equ	0xFF4
  6227                           prodl	equ	0xFF3
  6228                           intcon	equ	0xFF2
  6229                           intcon2	equ	0xFF1
  6230                           postinc0	equ	0xFEE
  6231                           wreg	equ	0xFE8
  6232                           indf1	equ	0xFE7
  6233                           postdec1	equ	0xFE5
  6234                           fsr1h	equ	0xFE2
  6235                           fsr1l	equ	0xFE1
  6236                           indf2	equ	0xFDF
  6237                           postinc2	equ	0xFDE
  6238                           postdec2	equ	0xFDD
  6239                           fsr2h	equ	0xFDA
  6240                           fsr2l	equ	0xFD9
  6241                           status	equ	0xFD8
  6242                           
  6243 ;; *************** function _I2C_SDA_CLEAR *****************
  6244 ;; Defined at:
  6245 ;;		line 15 in file "soft_i2c.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  1    wreg      void 
  6252 ;; Registers used:
  6253 ;;		None
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;Total ram usage:        0 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    4
  6266 ;; This function calls:
  6267 ;;		Nothing
  6268 ;; This function is called by:
  6269 ;;		_I2C_Start
  6270 ;;		_I2C_Write_Byte
  6271 ;;		_I2C_Read_Byte
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           	psect	text41
  6276  0014C2                     __ptext41:
  6277                           	opt stack 0
  6278  0014C2                     _I2C_SDA_CLEAR:
  6279                           	opt stack 24
  6280                           
  6281                           ;soft_i2c.c: 16: LATC4 = 0;
  6282                           
  6283                           ;incstack = 0
  6284  0014C2  988B               	bcf	3979,4,c	;volatile
  6285  0014C4  0012               	return		;funcret
  6286  0014C6                     __end_of_I2C_SDA_CLEAR:
  6287                           	opt stack 0
  6288                           tblptru	equ	0xFF8
  6289                           tblptrh	equ	0xFF7
  6290                           tblptrl	equ	0xFF6
  6291                           tablat	equ	0xFF5
  6292                           prodh	equ	0xFF4
  6293                           prodl	equ	0xFF3
  6294                           intcon	equ	0xFF2
  6295                           intcon2	equ	0xFF1
  6296                           postinc0	equ	0xFEE
  6297                           wreg	equ	0xFE8
  6298                           indf1	equ	0xFE7
  6299                           postdec1	equ	0xFE5
  6300                           fsr1h	equ	0xFE2
  6301                           fsr1l	equ	0xFE1
  6302                           indf2	equ	0xFDF
  6303                           postinc2	equ	0xFDE
  6304                           postdec2	equ	0xFDD
  6305                           fsr2h	equ	0xFDA
  6306                           fsr2l	equ	0xFD9
  6307                           status	equ	0xFD8
  6308                           
  6309 ;; *************** function _I2C_SCL_SET *****************
  6310 ;; Defined at:
  6311 ;;		line 27 in file "soft_i2c.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;		None
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;		None
  6316 ;; Return value:  Size  Location     Type
  6317 ;;                  1    wreg      void 
  6318 ;; Registers used:
  6319 ;;		None
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;Total ram usage:        0 bytes
  6330 ;; Hardware stack levels used:    1
  6331 ;; Hardware stack levels required when called:    4
  6332 ;; This function calls:
  6333 ;;		Nothing
  6334 ;; This function is called by:
  6335 ;;		_I2C_Init
  6336 ;;		_I2C_Start
  6337 ;;		_I2C_Stop
  6338 ;;		_I2C_Write_Byte
  6339 ;;		_I2C_Read_Byte
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           	psect	text42
  6344  0014C6                     __ptext42:
  6345                           	opt stack 0
  6346  0014C6                     _I2C_SCL_SET:
  6347                           	opt stack 24
  6348                           
  6349                           ;soft_i2c.c: 28: LATC3 = 1;
  6350                           
  6351                           ;incstack = 0
  6352  0014C6  868B               	bsf	3979,3,c	;volatile
  6353  0014C8  0012               	return		;funcret
  6354  0014CA                     __end_of_I2C_SCL_SET:
  6355                           	opt stack 0
  6356                           tblptru	equ	0xFF8
  6357                           tblptrh	equ	0xFF7
  6358                           tblptrl	equ	0xFF6
  6359                           tablat	equ	0xFF5
  6360                           prodh	equ	0xFF4
  6361                           prodl	equ	0xFF3
  6362                           intcon	equ	0xFF2
  6363                           intcon2	equ	0xFF1
  6364                           postinc0	equ	0xFEE
  6365                           wreg	equ	0xFE8
  6366                           indf1	equ	0xFE7
  6367                           postdec1	equ	0xFE5
  6368                           fsr1h	equ	0xFE2
  6369                           fsr1l	equ	0xFE1
  6370                           indf2	equ	0xFDF
  6371                           postinc2	equ	0xFDE
  6372                           postdec2	equ	0xFDD
  6373                           fsr2h	equ	0xFDA
  6374                           fsr2l	equ	0xFD9
  6375                           status	equ	0xFD8
  6376                           
  6377 ;; *************** function _I2C_SCL_CLEAR *****************
  6378 ;; Defined at:
  6379 ;;		line 31 in file "soft_i2c.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;		None
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;		None
  6384 ;; Return value:  Size  Location     Type
  6385 ;;                  1    wreg      void 
  6386 ;; Registers used:
  6387 ;;		None
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;Total ram usage:        0 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    4
  6400 ;; This function calls:
  6401 ;;		Nothing
  6402 ;; This function is called by:
  6403 ;;		_I2C_Start
  6404 ;;		_I2C_Write_Byte
  6405 ;;		_I2C_Read_Byte
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	text43
  6410  0014CA                     __ptext43:
  6411                           	opt stack 0
  6412  0014CA                     _I2C_SCL_CLEAR:
  6413                           	opt stack 24
  6414                           
  6415                           ;soft_i2c.c: 32: LATC3 = 0;
  6416                           
  6417                           ;incstack = 0
  6418  0014CA  968B               	bcf	3979,3,c	;volatile
  6419  0014CC  0012               	return		;funcret
  6420  0014CE                     __end_of_I2C_SCL_CLEAR:
  6421                           	opt stack 0
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           intcon2	equ	0xFF1
  6430                           postinc0	equ	0xFEE
  6431                           wreg	equ	0xFE8
  6432                           indf1	equ	0xFE7
  6433                           postdec1	equ	0xFE5
  6434                           fsr1h	equ	0xFE2
  6435                           fsr1l	equ	0xFE1
  6436                           indf2	equ	0xFDF
  6437                           postinc2	equ	0xFDE
  6438                           postdec2	equ	0xFDD
  6439                           fsr2h	equ	0xFDA
  6440                           fsr2l	equ	0xFD9
  6441                           status	equ	0xFD8
  6442                           
  6443 ;; *************** function _INTERRUPT_InterruptManager *****************
  6444 ;; Defined at:
  6445 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;		None
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;		None
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  1    wreg      void 
  6452 ;; Registers used:
  6453 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;Total ram usage:       14 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:    3
  6466 ;; This function calls:
  6467 ;;		_EUSART1_Receive_ISR
  6468 ;;		_EUSART1_Transmit_ISR
  6469 ;; This function is called by:
  6470 ;;		Interrupt level 2
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           	psect	intcode
  6475  000008                     __pintcode:
  6476                           	opt stack 0
  6477  000008                     _INTERRUPT_InterruptManager:
  6478                           	opt stack 22
  6479                           
  6480                           ;incstack = 0
  6481  000008  823B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6482  00000A  CFFA F017          	movff	pclath,??_INTERRUPT_InterruptManager
  6483  00000E  CFFB F018          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6484  000012  CFE9 F019          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6485  000016  CFEA F01A          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6486  00001A  CFE1 F01B          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6487  00001E  CFE2 F01C          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6488  000022  CFD9 F01D          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6489  000026  CFDA F01E          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6490  00002A  CFF3 F01F          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6491  00002E  CFF4 F020          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6492  000032  CFF6 F021          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6493  000036  CFF7 F022          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6494  00003A  CFF8 F023          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6495  00003E  CFF5 F024          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6496                           
  6497                           ;interrupt_manager.c: 77: if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6498  000042  B89D               	btfsc	3997,4,c	;volatile
  6499  000044  A89E               	btfss	3998,4,c	;volatile
  6500  000046  D003               	goto	i2l20
  6501                           
  6502                           ;interrupt_manager.c: 78: {
  6503                           ;interrupt_manager.c: 79: EUSART1_Transmit_ISR();
  6504  000048  EC49  F009         	call	_EUSART1_Transmit_ISR	;wreg free
  6505                           
  6506                           ;interrupt_manager.c: 80: }
  6507  00004C  D005               	goto	i2l24
  6508  00004E                     i2l20:
  6509                           
  6510                           ;interrupt_manager.c: 81: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6511  00004E  BA9D               	btfsc	3997,5,c	;volatile
  6512  000050  AA9E               	btfss	3998,5,c	;volatile
  6513  000052  D002               	goto	i2l24
  6514                           
  6515                           ;interrupt_manager.c: 82: {
  6516                           ;interrupt_manager.c: 83: EUSART1_Receive_ISR();
  6517  000054  ECBD  F004         	call	_EUSART1_Receive_ISR	;wreg free
  6518  000058                     i2l24:
  6519  000058  C024  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6520  00005C  C023  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6521  000060  C022  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6522  000064  C021  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6523  000068  C020  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6524  00006C  C01F  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6525  000070  C01E  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6526  000074  C01D  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6527  000078  C01C  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6528  00007C  C01B  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6529  000080  C01A  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6530  000084  C019  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6531  000088  C018  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6532  00008C  C017  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6533  000090  923B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6534  000092  0011               	retfie		f
  6535  000094                     __end_of_INTERRUPT_InterruptManager:
  6536                           	opt stack 0
  6537                           pclatu	equ	0xFFB
  6538                           pclath	equ	0xFFA
  6539                           tblptru	equ	0xFF8
  6540                           tblptrh	equ	0xFF7
  6541                           tblptrl	equ	0xFF6
  6542                           tablat	equ	0xFF5
  6543                           prodh	equ	0xFF4
  6544                           prodl	equ	0xFF3
  6545                           intcon	equ	0xFF2
  6546                           intcon2	equ	0xFF1
  6547                           postinc0	equ	0xFEE
  6548                           fsr0h	equ	0xFEA
  6549                           fsr0l	equ	0xFE9
  6550                           wreg	equ	0xFE8
  6551                           indf1	equ	0xFE7
  6552                           postdec1	equ	0xFE5
  6553                           fsr1h	equ	0xFE2
  6554                           fsr1l	equ	0xFE1
  6555                           indf2	equ	0xFDF
  6556                           postinc2	equ	0xFDE
  6557                           postdec2	equ	0xFDD
  6558                           fsr2h	equ	0xFDA
  6559                           fsr2l	equ	0xFD9
  6560                           status	equ	0xFD8
  6561                           
  6562 ;; *************** function _EUSART1_Transmit_ISR *****************
  6563 ;; Defined at:
  6564 ;;		line 175 in file "mcc_generated_files/eusart1.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;		None
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;		None
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      void 
  6571 ;; Registers used:
  6572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;Total ram usage:        0 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_INTERRUPT_InterruptManager
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text45
  6592  001292                     __ptext45:
  6593                           	opt stack 0
  6594  001292                     _EUSART1_Transmit_ISR:
  6595                           	opt stack 24
  6596                           
  6597                           ;eusart1.c: 179: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  6598                           
  6599                           ;incstack = 0
  6600  001292  0E80               	movlw	128
  6601  001294  603A               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  6602  001296  D012               	goto	i2l122
  6603                           
  6604                           ;eusart1.c: 180: {
  6605                           ;eusart1.c: 181: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  6606  001298  5032               	movf	_eusart1TxTail,w,c
  6607  00129A  0D01               	mullw	1
  6608  00129C  0E00               	movlw	low _eusart1TxBuffer
  6609  00129E  24F3               	addwf	prodl,w,c
  6610  0012A0  6ED9               	movwf	fsr2l,c
  6611  0012A2  0E01               	movlw	high _eusart1TxBuffer
  6612  0012A4  20F4               	addwfc	prodh,w,c
  6613  0012A6  6EDA               	movwf	fsr2h,c
  6614  0012A8  50DF               	movf	indf2,w,c
  6615  0012AA  6EAD               	movwf	4013,c	;volatile
  6616  0012AC  2A32               	incf	_eusart1TxTail,f,c
  6617                           
  6618                           ;eusart1.c: 182: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  6619  0012AE  0E7F               	movlw	127
  6620  0012B0  6432               	cpfsgt	_eusart1TxTail,c
  6621  0012B2  D002               	goto	i2l2791
  6622                           
  6623                           ;eusart1.c: 183: {
  6624                           ;eusart1.c: 184: eusart1TxTail = 0;
  6625  0012B4  0E00               	movlw	0
  6626  0012B6  6E32               	movwf	_eusart1TxTail,c
  6627  0012B8                     i2l2791:
  6628                           
  6629                           ;eusart1.c: 185: }
  6630                           ;eusart1.c: 186: eusart1TxBufferRemaining++;
  6631  0012B8  2A3A               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  6632                           
  6633                           ;eusart1.c: 187: }
  6634  0012BA  0012               	return	
  6635  0012BC                     i2l122:
  6636                           
  6637                           ;eusart1.c: 188: else
  6638                           ;eusart1.c: 189: {
  6639                           ;eusart1.c: 190: PIE1bits.TX1IE = 0;
  6640  0012BC  989D               	bcf	3997,4,c	;volatile
  6641  0012BE  0012               	return	
  6642  0012C0                     __end_of_EUSART1_Transmit_ISR:
  6643                           	opt stack 0
  6644                           pclatu	equ	0xFFB
  6645                           pclath	equ	0xFFA
  6646                           tblptru	equ	0xFF8
  6647                           tblptrh	equ	0xFF7
  6648                           tblptrl	equ	0xFF6
  6649                           tablat	equ	0xFF5
  6650                           prodh	equ	0xFF4
  6651                           prodl	equ	0xFF3
  6652                           intcon	equ	0xFF2
  6653                           intcon2	equ	0xFF1
  6654                           postinc0	equ	0xFEE
  6655                           fsr0h	equ	0xFEA
  6656                           fsr0l	equ	0xFE9
  6657                           wreg	equ	0xFE8
  6658                           indf1	equ	0xFE7
  6659                           postdec1	equ	0xFE5
  6660                           fsr1h	equ	0xFE2
  6661                           fsr1l	equ	0xFE1
  6662                           indf2	equ	0xFDF
  6663                           postinc2	equ	0xFDE
  6664                           postdec2	equ	0xFDD
  6665                           fsr2h	equ	0xFDA
  6666                           fsr2l	equ	0xFD9
  6667                           status	equ	0xFD8
  6668                           
  6669 ;; *************** function _EUSART1_Receive_ISR *****************
  6670 ;; Defined at:
  6671 ;;		line 194 in file "mcc_generated_files/eusart1.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;		None
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  state           2   20[COMRAM] int 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;Total ram usage:        3 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    2
  6692 ;; This function calls:
  6693 ;;		_EUSART1_Read
  6694 ;;		_strcmp
  6695 ;;		_strstr
  6696 ;; This function is called by:
  6697 ;;		_INTERRUPT_InterruptManager
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           	psect	text46
  6702  00097A                     __ptext46:
  6703                           	opt stack 0
  6704  00097A                     _EUSART1_Receive_ISR:
  6705                           	opt stack 22
  6706                           
  6707                           ;eusart1.c: 196: if(1 == RCSTA1bits.OERR)
  6708                           
  6709                           ;incstack = 0
  6710  00097A  A2AB               	btfss	4011,1,c	;volatile
  6711  00097C  D002               	goto	i2l2797
  6712                           
  6713                           ;eusart1.c: 197: {
  6714                           ;eusart1.c: 200: RCSTA1bits.CREN = 0;
  6715  00097E  98AB               	bcf	4011,4,c	;volatile
  6716                           
  6717                           ;eusart1.c: 201: RCSTA1bits.CREN = 1;
  6718  000980  88AB               	bsf	4011,4,c	;volatile
  6719  000982                     i2l2797:
  6720                           
  6721                           ;eusart1.c: 202: }
  6722                           ;eusart1.c: 207: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  6723  000982  502F               	movf	_eusart1RxHead,w,c
  6724  000984  0D01               	mullw	1
  6725  000986  0E00               	movlw	low _eusart1RxBuffer
  6726  000988  24F3               	addwf	prodl,w,c
  6727  00098A  6ED9               	movwf	fsr2l,c
  6728  00098C  0E02               	movlw	high _eusart1RxBuffer
  6729  00098E  20F4               	addwfc	prodh,w,c
  6730  000990  6EDA               	movwf	fsr2h,c
  6731  000992  CFAE FFDF          	movff	4014,indf2	;volatile
  6732  000996  2A2F               	incf	_eusart1RxHead,f,c
  6733                           
  6734                           ;eusart1.c: 208: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  6735  000998  0E7F               	movlw	127
  6736  00099A  642F               	cpfsgt	_eusart1RxHead,c
  6737  00099C  D002               	goto	i2l2805
  6738                           
  6739                           ;eusart1.c: 209: {
  6740                           ;eusart1.c: 210: eusart1RxHead = 0;
  6741  00099E  0E00               	movlw	0
  6742  0009A0  6E2F               	movwf	_eusart1RxHead,c
  6743  0009A2                     i2l2805:
  6744                           
  6745                           ;eusart1.c: 211: }
  6746                           ;eusart1.c: 212: eusart1RxCount++;
  6747  0009A2  2A2E               	incf	_eusart1RxCount,f,c	;volatile
  6748                           
  6749                           ;eusart1.c: 214: int state = 0;
  6750  0009A4  0E00               	movlw	0
  6751  0009A6  6E16               	movwf	EUSART1_Receive_ISR@state+1,c
  6752  0009A8  0E00               	movlw	0
  6753  0009AA  6E15               	movwf	EUSART1_Receive_ISR@state,c
  6754                           
  6755                           ;eusart1.c: 216: if(ready)return;
  6756  0009AC  5033               	movf	_ready,w,c	;volatile
  6757  0009AE  A4D8               	btfss	status,2,c
  6758  0009B0  0012               	return	
  6759  0009B2  D01C               	goto	i2l2821
  6760  0009B4                     i2l2813:
  6761                           
  6762                           ;eusart1.c: 219: line[index]=EUSART1_Read();
  6763  0009B4  EC01  F009         	call	_EUSART1_Read	;wreg free
  6764  0009B8  6E14               	movwf	??_EUSART1_Receive_ISR& (0+255),c
  6765  0009BA  0E80               	movlw	low _line
  6766  0009BC  242C               	addwf	_index,w,c
  6767  0009BE  6ED9               	movwf	fsr2l,c
  6768  0009C0  0E01               	movlw	high _line
  6769  0009C2  202D               	addwfc	_index+1,w,c
  6770  0009C4  6EDA               	movwf	fsr2h,c
  6771  0009C6  C014  FFDF         	movff	??_EUSART1_Receive_ISR,indf2
  6772                           
  6773                           ;eusart1.c: 220: if (line[index] == '\n'){
  6774  0009CA  0E80               	movlw	low _line
  6775  0009CC  242C               	addwf	_index,w,c
  6776  0009CE  6ED9               	movwf	fsr2l,c
  6777  0009D0  0E01               	movlw	high _line
  6778  0009D2  202D               	addwfc	_index+1,w,c
  6779  0009D4  6EDA               	movwf	fsr2h,c
  6780  0009D6  0E0A               	movlw	10
  6781  0009D8  18DE               	xorwf	postinc2,w,c
  6782  0009DA  A4D8               	btfss	status,2,c
  6783  0009DC  D005               	goto	i2l2819
  6784                           
  6785                           ;eusart1.c: 221: state=1;
  6786  0009DE  0E00               	movlw	0
  6787  0009E0  6E16               	movwf	EUSART1_Receive_ISR@state+1,c
  6788  0009E2  0E01               	movlw	1
  6789  0009E4  6E15               	movwf	EUSART1_Receive_ISR@state,c
  6790                           
  6791                           ;eusart1.c: 222: break;
  6792  0009E6  D005               	goto	i2l2823
  6793  0009E8                     i2l2819:
  6794                           
  6795                           ;eusart1.c: 223: }
  6796                           ;eusart1.c: 224: index++;
  6797  0009E8  4A2C               	infsnz	_index,f,c
  6798  0009EA  2A2D               	incf	_index+1,f,c
  6799  0009EC                     i2l2821:
  6800  0009EC  502E               	movf	_eusart1RxCount,w,c	;volatile
  6801  0009EE  A4D8               	btfss	status,2,c
  6802  0009F0  D7E1               	goto	i2l2813
  6803  0009F2                     i2l2823:
  6804                           
  6805                           ;eusart1.c: 225: }
  6806                           ;eusart1.c: 227: if(state==1){
  6807  0009F2  0415               	decf	EUSART1_Receive_ISR@state,w,c
  6808  0009F4  1016               	iorwf	EUSART1_Receive_ISR@state+1,w,c
  6809  0009F6  A4D8               	btfss	status,2,c
  6810  0009F8  0012               	return	
  6811                           
  6812                           ;eusart1.c: 228: line[--index] = '\0';
  6813  0009FA  062C               	decf	_index,f,c
  6814  0009FC  A0D8               	btfss	status,0,c
  6815  0009FE  062D               	decf	_index+1,f,c
  6816  000A00  0E80               	movlw	low _line
  6817  000A02  242C               	addwf	_index,w,c
  6818  000A04  6ED9               	movwf	fsr2l,c
  6819  000A06  0E01               	movlw	high _line
  6820  000A08  202D               	addwfc	_index+1,w,c
  6821  000A0A  6EDA               	movwf	fsr2h,c
  6822  000A0C  0E00               	movlw	0
  6823  000A0E  6EDF               	movwf	indf2,c
  6824                           
  6825                           ;eusart1.c: 229: uartState=0;
  6826  000A10  0E00               	movlw	0
  6827  000A12  6E34               	movwf	_uartState,c	;volatile
  6828                           
  6829                           ;eusart1.c: 230: if(!strcmp("radio_err",line)){
  6830  000A14  0EE5               	movlw	low STR_1
  6831  000A16  6E01               	movwf	strcmp@s1,c
  6832  000A18  0EFF               	movlw	high STR_1
  6833  000A1A  6E02               	movwf	strcmp@s1+1,c
  6834  000A1C  0E80               	movlw	low _line
  6835  000A1E  6E03               	movwf	strcmp@s2,c
  6836  000A20  0E01               	movlw	high _line
  6837  000A22  6E04               	movwf	strcmp@s2+1,c
  6838  000A24  EC62  F006         	call	_strcmp	;wreg free
  6839  000A28  5001               	movf	?_strcmp,w,c
  6840  000A2A  1002               	iorwf	?_strcmp+1,w,c
  6841  000A2C  A4D8               	btfss	status,2,c
  6842  000A2E  D002               	goto	i2l2833
  6843                           
  6844                           ;eusart1.c: 231: uartState=5;
  6845  000A30  0E05               	movlw	5
  6846  000A32  D02B               	goto	L5
  6847  000A34                     i2l2833:
  6848  000A34  0E80               	movlw	low _line
  6849  000A36  6E10               	movwf	strstr@s1,c
  6850  000A38  0E01               	movlw	high _line
  6851  000A3A  6E11               	movwf	strstr@s1+1,c
  6852  000A3C  0EEF               	movlw	low STR_2
  6853  000A3E  6E12               	movwf	strstr@s2,c
  6854  000A40  0EFF               	movlw	high STR_2
  6855  000A42  6E13               	movwf	strstr@s2+1,c
  6856  000A44  ECAA  F006         	call	_strstr	;wreg free
  6857  000A48  5010               	movf	?_strstr,w,c
  6858  000A4A  1011               	iorwf	?_strstr+1,w,c
  6859  000A4C  B4D8               	btfsc	status,2,c
  6860  000A4E  D00E               	goto	i2l2843
  6861                           
  6862                           ;eusart1.c: 233: if(line[10]=='4'&&line[11]=='3'){
  6863  000A50  0E34               	movlw	52
  6864  000A52  0101               	movlb	1	; () banked
  6865  000A54  198A               	xorwf	(_line+10)& (0+255),w,b	;volatile
  6866  000A56  A4D8               	btfss	status,2,c
  6867  000A58  D007               	goto	i2l2841
  6868                           
  6869                           ; BSR set to: 1
  6870  000A5A  0E33               	movlw	51
  6871  000A5C  0101               	movlb	1	; () banked
  6872  000A5E  198B               	xorwf	(_line+11)& (0+255),w,b	;volatile
  6873  000A60  A4D8               	btfss	status,2,c
  6874  000A62  D002               	goto	i2l2841
  6875                           
  6876                           ; BSR set to: 1
  6877                           ;eusart1.c: 234: uartState=4;
  6878  000A64  0E04               	movlw	4
  6879  000A66  D011               	goto	L5
  6880  000A68                     i2l2841:
  6881                           
  6882                           ; BSR set to: 1
  6883                           ;eusart1.c: 236: uartState=3;
  6884  000A68  0E03               	movlw	3
  6885  000A6A  D00F               	goto	L5
  6886  000A6C                     i2l2843:
  6887  000A6C  0E80               	movlw	low _line
  6888  000A6E  6E01               	movwf	strcmp@s1,c
  6889  000A70  0E01               	movlw	high _line
  6890  000A72  6E02               	movwf	strcmp@s1+1,c
  6891  000A74  0ED9               	movlw	low STR_3
  6892  000A76  6E03               	movwf	strcmp@s2,c
  6893  000A78  0EFF               	movlw	high STR_3
  6894  000A7A  6E04               	movwf	strcmp@s2+1,c
  6895  000A7C  EC62  F006         	call	_strcmp	;wreg free
  6896  000A80  5001               	movf	?_strcmp,w,c
  6897  000A82  1002               	iorwf	?_strcmp+1,w,c
  6898  000A84  A4D8               	btfss	status,2,c
  6899  000A86  D003               	goto	i2l2847
  6900  000A88  D010               	goto	i2l2849
  6901  000A8A                     L5:
  6902  000A8A  6E34               	movwf	_uartState,c	;volatile
  6903                           
  6904                           ;eusart1.c: 240: } else if (!strcmp(line, "ok") != (0)) {
  6905  000A8C  D010               	goto	i2l138
  6906  000A8E                     i2l2847:
  6907  000A8E  0E80               	movlw	low _line
  6908  000A90  6E01               	movwf	strcmp@s1,c
  6909  000A92  0E01               	movlw	high _line
  6910  000A94  6E02               	movwf	strcmp@s1+1,c
  6911  000A96  0EE2               	movlw	low (STR_3+9)
  6912  000A98  6E03               	movwf	strcmp@s2,c
  6913  000A9A  0EFF               	movlw	high (STR_3+9)
  6914  000A9C  6E04               	movwf	strcmp@s2+1,c
  6915  000A9E  EC62  F006         	call	_strcmp	;wreg free
  6916  000AA2  5001               	movf	?_strcmp,w,c
  6917  000AA4  1002               	iorwf	?_strcmp+1,w,c
  6918  000AA6  A4D8               	btfss	status,2,c
  6919  000AA8  D002               	goto	i2l138
  6920  000AAA                     i2l2849:
  6921                           
  6922                           ;eusart1.c: 241: uartState=1;
  6923  000AAA  0E01               	movlw	1
  6924  000AAC  D7EE               	goto	L5
  6925  000AAE                     i2l138:
  6926                           
  6927                           ;eusart1.c: 242: }
  6928                           ;eusart1.c: 243: index=0;
  6929  000AAE  0E00               	movlw	0
  6930  000AB0  6E2D               	movwf	_index+1,c
  6931  000AB2  0E00               	movlw	0
  6932  000AB4  6E2C               	movwf	_index,c
  6933                           
  6934                           ;eusart1.c: 244: ready=1;
  6935  000AB6  0E01               	movlw	1
  6936  000AB8  6E33               	movwf	_ready,c	;volatile
  6937  000ABA  0012               	return	
  6938  000ABC                     __end_of_EUSART1_Receive_ISR:
  6939                           	opt stack 0
  6940                           pclatu	equ	0xFFB
  6941                           pclath	equ	0xFFA
  6942                           tblptru	equ	0xFF8
  6943                           tblptrh	equ	0xFF7
  6944                           tblptrl	equ	0xFF6
  6945                           tablat	equ	0xFF5
  6946                           prodh	equ	0xFF4
  6947                           prodl	equ	0xFF3
  6948                           intcon	equ	0xFF2
  6949                           intcon2	equ	0xFF1
  6950                           postinc0	equ	0xFEE
  6951                           fsr0h	equ	0xFEA
  6952                           fsr0l	equ	0xFE9
  6953                           wreg	equ	0xFE8
  6954                           indf1	equ	0xFE7
  6955                           postdec1	equ	0xFE5
  6956                           fsr1h	equ	0xFE2
  6957                           fsr1l	equ	0xFE1
  6958                           indf2	equ	0xFDF
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function _strstr *****************
  6966 ;; Defined at:
  6967 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strstr.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  s1              2   15[COMRAM] PTR const unsigned char 
  6970 ;;		 -> NULL(0), line(128), 
  6971 ;;  s2              2   17[COMRAM] PTR const unsigned char 
  6972 ;;		 -> STR_2(9), 
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;		None
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  2   15[COMRAM] PTR unsigned char 
  6977 ;; Registers used:
  6978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;Total ram usage:        4 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    1
  6991 ;; This function calls:
  6992 ;;		_strchr
  6993 ;;		_strlen
  6994 ;;		_strncmp
  6995 ;; This function is called by:
  6996 ;;		_EUSART1_Receive_ISR
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text47
  7001  000D54                     __ptext47:
  7002                           	opt stack 0
  7003  000D54                     _strstr:
  7004                           	opt stack 22
  7005                           
  7006                           ;incstack = 0
  7007  000D54  D032               	goto	i2l2577
  7008  000D56                     i2l2569:
  7009  000D56  C010  F007         	movff	strstr@s1,strncmp@s1
  7010  000D5A  C011  F008         	movff	strstr@s1+1,strncmp@s1+1
  7011  000D5E  C012  F009         	movff	strstr@s2,strncmp@s2
  7012  000D62  C013  F00A         	movff	strstr@s2+1,strncmp@s2+1
  7013  000D66  C012  F001         	movff	strstr@s2,strlen@s
  7014  000D6A  C013  F002         	movff	strstr@s2+1,strlen@s+1
  7015  000D6E  EC75  F008         	call	_strlen	;wreg free
  7016  000D72  C001  F00B         	movff	?_strlen,strncmp@len
  7017  000D76  C002  F00C         	movff	?_strlen+1,strncmp@len+1
  7018  000D7A  ECED  F006         	call	_strncmp	;wreg free
  7019  000D7E  5007               	movf	?_strncmp,w,c
  7020  000D80  1008               	iorwf	?_strncmp+1,w,c
  7021  000D82  A4D8               	btfss	status,2,c
  7022  000D84  D005               	goto	i2l2575
  7023  000D86  C010  F010         	movff	strstr@s1,?_strstr
  7024  000D8A  C011  F011         	movff	strstr@s1+1,?_strstr+1
  7025  000D8E  0012               	return	
  7026  000D90                     i2l2575:
  7027  000D90  0E01               	movlw	1
  7028  000D92  2410               	addwf	strstr@s1,w,c
  7029  000D94  6E01               	movwf	strchr@ptr,c
  7030  000D96  0E00               	movlw	0
  7031  000D98  2011               	addwfc	strstr@s1+1,w,c
  7032  000D9A  6E02               	movwf	strchr@ptr+1,c
  7033  000D9C  C012  FFF6         	movff	strstr@s2,tblptrl
  7034  000DA0  C013  FFF7         	movff	strstr@s2+1,tblptrh
  7035  000DA4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7036  000DA4  6AF8               	clrf	tblptru,c
  7037  000DA6                     	endif
  7038  000DA6                     	if	0	;tblptru may be non-zero
  7039  000DA6                     	endif
  7040  000DA6  0008               	tblrd		*
  7041  000DA8  50F5               	movf	tablat,w,c
  7042  000DAA  6E03               	movwf	strchr@chr,c
  7043  000DAC  6A04               	clrf	strchr@chr+1,c
  7044  000DAE  ECB2  F008         	call	_strchr	;wreg free
  7045  000DB2  C001  F010         	movff	?_strchr,strstr@s1
  7046  000DB6  C002  F011         	movff	?_strchr+1,strstr@s1+1
  7047  000DBA                     i2l2577:
  7048  000DBA  5010               	movf	strstr@s1,w,c
  7049  000DBC  1011               	iorwf	strstr@s1+1,w,c
  7050  000DBE  B4D8               	btfsc	status,2,c
  7051  000DC0  D007               	goto	i2l2581
  7052  000DC2  C010  FFD9         	movff	strstr@s1,fsr2l
  7053  000DC6  C011  FFDA         	movff	strstr@s1+1,fsr2h
  7054  000DCA  50DF               	movf	indf2,w,c
  7055  000DCC  A4D8               	btfss	status,2,c
  7056  000DCE  D7C3               	goto	i2l2569
  7057  000DD0                     i2l2581:
  7058  000DD0  0E00               	movlw	0
  7059  000DD2  6E10               	movwf	?_strstr,c
  7060  000DD4  0E00               	movlw	0
  7061  000DD6  6E11               	movwf	?_strstr+1,c
  7062  000DD8  0012               	return	
  7063  000DDA                     __end_of_strstr:
  7064                           	opt stack 0
  7065                           pclatu	equ	0xFFB
  7066                           pclath	equ	0xFFA
  7067                           tblptru	equ	0xFF8
  7068                           tblptrh	equ	0xFF7
  7069                           tblptrl	equ	0xFF6
  7070                           tablat	equ	0xFF5
  7071                           prodh	equ	0xFF4
  7072                           prodl	equ	0xFF3
  7073                           intcon	equ	0xFF2
  7074                           intcon2	equ	0xFF1
  7075                           postinc0	equ	0xFEE
  7076                           fsr0h	equ	0xFEA
  7077                           fsr0l	equ	0xFE9
  7078                           wreg	equ	0xFE8
  7079                           indf1	equ	0xFE7
  7080                           postdec1	equ	0xFE5
  7081                           fsr1h	equ	0xFE2
  7082                           fsr1l	equ	0xFE1
  7083                           indf2	equ	0xFDF
  7084                           postinc2	equ	0xFDE
  7085                           postdec2	equ	0xFDD
  7086                           fsr2h	equ	0xFDA
  7087                           fsr2l	equ	0xFD9
  7088                           status	equ	0xFD8
  7089                           
  7090 ;; *************** function _strncmp *****************
  7091 ;; Defined at:
  7092 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strncmp.c"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;  s1              2    6[COMRAM] PTR const unsigned char 
  7095 ;;		 -> NULL(0), line(128), 
  7096 ;;  s2              2    8[COMRAM] PTR const unsigned char 
  7097 ;;		 -> STR_2(9), 
  7098 ;;  len             2   10[COMRAM] unsigned int 
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;		None
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  2    6[COMRAM] int 
  7103 ;; Registers used:
  7104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7110 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;Total ram usage:        9 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; This function calls:
  7117 ;;		Nothing
  7118 ;; This function is called by:
  7119 ;;		_strstr
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           	psect	text48
  7124  000DDA                     __ptext48:
  7125                           	opt stack 0
  7126  000DDA                     _strncmp:
  7127                           	opt stack 22
  7128                           
  7129                           ;incstack = 0
  7130  000DDA  D035               	goto	i2l2453
  7131  000DDC                     i2l2443:
  7132  000DDC  C007  FFD9         	movff	strncmp@s1,fsr2l
  7133  000DE0  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  7134  000DE4  50DF               	movf	indf2,w,c
  7135  000DE6  B4D8               	btfsc	status,2,c
  7136  000DE8  D010               	goto	i2l2447
  7137  000DEA  C007  FFD9         	movff	strncmp@s1,fsr2l
  7138  000DEE  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  7139  000DF2  50DF               	movf	indf2,w,c
  7140  000DF4  6E0D               	movwf	??_strncmp& (0+255),c
  7141  000DF6  C009  FFF6         	movff	strncmp@s2,tblptrl
  7142  000DFA  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  7143  000DFE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7144  000DFE  6AF8               	clrf	tblptru,c
  7145  000E00                     	endif
  7146  000E00                     	if	0	;tblptru may be non-zero
  7147  000E00                     	endif
  7148  000E00  0008               	tblrd		*
  7149  000E02  50F5               	movf	tablat,w,c
  7150  000E04  180D               	xorwf	??_strncmp,w,c
  7151  000E06  B4D8               	btfsc	status,2,c
  7152  000E08  D01A               	goto	i2l2451
  7153  000E0A                     i2l2447:
  7154  000E0A  C009  FFF6         	movff	strncmp@s2,tblptrl
  7155  000E0E  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  7156  000E12                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7157  000E12  6AF8               	clrf	tblptru,c
  7158  000E14                     	endif
  7159  000E14                     	if	0	;tblptru may be non-zero
  7160  000E14                     	endif
  7161  000E14  0008               	tblrd		*
  7162  000E16  50F5               	movf	tablat,w,c
  7163  000E18  6E0D               	movwf	??_strncmp& (0+255),c
  7164  000E1A  6A0E               	clrf	(??_strncmp+1)& (0+255),c
  7165  000E1C  1E0D               	comf	??_strncmp,f,c
  7166  000E1E  1E0E               	comf	??_strncmp+1,f,c
  7167  000E20  4A0D               	infsnz	??_strncmp,f,c
  7168  000E22  2A0E               	incf	??_strncmp+1,f,c
  7169  000E24  C007  FFD9         	movff	strncmp@s1,fsr2l
  7170  000E28  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  7171  000E2C  50DF               	movf	indf2,w,c
  7172  000E2E  6E0F               	movwf	(??_strncmp+2)& (0+255),c
  7173  000E30  500F               	movf	??_strncmp+2,w,c
  7174  000E32  240D               	addwf	??_strncmp,w,c
  7175  000E34  6E07               	movwf	?_strncmp,c
  7176  000E36  0E00               	movlw	0
  7177  000E38  200E               	addwfc	??_strncmp+1,w,c
  7178  000E3A  6E08               	movwf	?_strncmp+1,c
  7179  000E3C  0012               	return	
  7180  000E3E                     i2l2451:
  7181  000E3E  4A07               	infsnz	strncmp@s1,f,c
  7182  000E40  2A08               	incf	strncmp@s1+1,f,c
  7183  000E42  4A09               	infsnz	strncmp@s2,f,c
  7184  000E44  2A0A               	incf	strncmp@s2+1,f,c
  7185  000E46                     i2l2453:
  7186  000E46  060B               	decf	strncmp@len,f,c
  7187  000E48  A0D8               	btfss	status,0,c
  7188  000E4A  060C               	decf	strncmp@len+1,f,c
  7189  000E4C  280B               	incf	strncmp@len,w,c
  7190  000E4E  E1C6               	bnz	i2l2443
  7191  000E50  280C               	incf	strncmp@len+1,w,c
  7192  000E52  A4D8               	btfss	status,2,c
  7193  000E54  D7C3               	goto	i2l2443
  7194  000E56  0E00               	movlw	0
  7195  000E58  6E08               	movwf	?_strncmp+1,c
  7196  000E5A  0E00               	movlw	0
  7197  000E5C  6E07               	movwf	?_strncmp,c
  7198  000E5E  0012               	return	
  7199  000E60                     __end_of_strncmp:
  7200                           	opt stack 0
  7201                           pclatu	equ	0xFFB
  7202                           pclath	equ	0xFFA
  7203                           tblptru	equ	0xFF8
  7204                           tblptrh	equ	0xFF7
  7205                           tblptrl	equ	0xFF6
  7206                           tablat	equ	0xFF5
  7207                           prodh	equ	0xFF4
  7208                           prodl	equ	0xFF3
  7209                           intcon	equ	0xFF2
  7210                           intcon2	equ	0xFF1
  7211                           postinc0	equ	0xFEE
  7212                           fsr0h	equ	0xFEA
  7213                           fsr0l	equ	0xFE9
  7214                           wreg	equ	0xFE8
  7215                           indf1	equ	0xFE7
  7216                           postdec1	equ	0xFE5
  7217                           fsr1h	equ	0xFE2
  7218                           fsr1l	equ	0xFE1
  7219                           indf2	equ	0xFDF
  7220                           postinc2	equ	0xFDE
  7221                           postdec2	equ	0xFDD
  7222                           fsr2h	equ	0xFDA
  7223                           fsr2l	equ	0xFD9
  7224                           status	equ	0xFD8
  7225                           
  7226 ;; *************** function _strlen *****************
  7227 ;; Defined at:
  7228 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strlen.c"
  7229 ;; Parameters:    Size  Location     Type
  7230 ;;  s               2    0[COMRAM] PTR const unsigned char 
  7231 ;;		 -> STR_2(9), 
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  7234 ;;		 -> STR_2(9), 
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  2    0[COMRAM] unsigned int 
  7237 ;; Registers used:
  7238 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7244 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;Total ram usage:        6 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; This function calls:
  7251 ;;		Nothing
  7252 ;; This function is called by:
  7253 ;;		_strstr
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           	psect	text49
  7258  0010EA                     __ptext49:
  7259                           	opt stack 0
  7260  0010EA                     _strlen:
  7261                           	opt stack 22
  7262                           
  7263                           ;incstack = 0
  7264  0010EA  C001  F005         	movff	strlen@s,strlen@cp
  7265  0010EE  C002  F006         	movff	strlen@s+1,strlen@cp+1
  7266  0010F2  D002               	goto	i2l2435
  7267  0010F4                     i2l2433:
  7268  0010F4  4A05               	infsnz	strlen@cp,f,c
  7269  0010F6  2A06               	incf	strlen@cp+1,f,c
  7270  0010F8                     i2l2435:
  7271  0010F8  C005  FFF6         	movff	strlen@cp,tblptrl
  7272  0010FC  C006  FFF7         	movff	strlen@cp+1,tblptrh
  7273  001100                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7274  001100  6AF8               	clrf	tblptru,c
  7275  001102                     	endif
  7276  001102                     	if	0	;tblptru may be non-zero
  7277  001102                     	endif
  7278  001102  0008               	tblrd		*
  7279  001104  50F5               	movf	tablat,w,c
  7280  001106  0900               	iorlw	0
  7281  001108  A4D8               	btfss	status,2,c
  7282  00110A  D7F4               	goto	i2l2433
  7283  00110C  C001  F003         	movff	strlen@s,??_strlen
  7284  001110  C002  F004         	movff	strlen@s+1,??_strlen+1
  7285  001114  1E03               	comf	??_strlen,f,c
  7286  001116  1E04               	comf	??_strlen+1,f,c
  7287  001118  4A03               	infsnz	??_strlen,f,c
  7288  00111A  2A04               	incf	??_strlen+1,f,c
  7289  00111C  5005               	movf	strlen@cp,w,c
  7290  00111E  2403               	addwf	??_strlen,w,c
  7291  001120  6E01               	movwf	?_strlen,c
  7292  001122  5006               	movf	strlen@cp+1,w,c
  7293  001124  2004               	addwfc	??_strlen+1,w,c
  7294  001126  6E02               	movwf	?_strlen+1,c
  7295  001128  0012               	return	
  7296  00112A                     __end_of_strlen:
  7297                           	opt stack 0
  7298                           pclatu	equ	0xFFB
  7299                           pclath	equ	0xFFA
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           prodh	equ	0xFF4
  7305                           prodl	equ	0xFF3
  7306                           intcon	equ	0xFF2
  7307                           intcon2	equ	0xFF1
  7308                           postinc0	equ	0xFEE
  7309                           fsr0h	equ	0xFEA
  7310                           fsr0l	equ	0xFE9
  7311                           wreg	equ	0xFE8
  7312                           indf1	equ	0xFE7
  7313                           postdec1	equ	0xFE5
  7314                           fsr1h	equ	0xFE2
  7315                           fsr1l	equ	0xFE1
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           postdec2	equ	0xFDD
  7319                           fsr2h	equ	0xFDA
  7320                           fsr2l	equ	0xFD9
  7321                           status	equ	0xFD8
  7322                           
  7323 ;; *************** function _strchr *****************
  7324 ;; Defined at:
  7325 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strchr.c"
  7326 ;; Parameters:    Size  Location     Type
  7327 ;;  ptr             2    0[COMRAM] PTR const unsigned char 
  7328 ;;		 -> NULL(0), line(128), 
  7329 ;;  chr             2    2[COMRAM] int 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;		None
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  2    0[COMRAM] PTR unsigned char 
  7334 ;; Registers used:
  7335 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7341 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;Total ram usage:        5 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; This function calls:
  7348 ;;		Nothing
  7349 ;; This function is called by:
  7350 ;;		_strstr
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text50
  7355  001164                     __ptext50:
  7356                           	opt stack 0
  7357  001164                     _strchr:
  7358                           	opt stack 22
  7359  001164  C001  FFD9         	movff	strchr@ptr,fsr2l
  7360  001168  C002  FFDA         	movff	strchr@ptr+1,fsr2h
  7361  00116C  5003               	movf	strchr@chr,w,c
  7362  00116E  18DE               	xorwf	postinc2,w,c
  7363  001170  A4D8               	btfss	status,2,c
  7364  001172  D005               	goto	i2l2465
  7365  001174  C001  F001         	movff	strchr@ptr,?_strchr
  7366  001178  C002  F002         	movff	strchr@ptr+1,?_strchr+1
  7367  00117C  0012               	return	
  7368  00117E                     i2l2465:
  7369  00117E  C001  FFD9         	movff	strchr@ptr,fsr2l
  7370  001182  C002  FFDA         	movff	strchr@ptr+1,fsr2h
  7371  001186  4A01               	infsnz	strchr@ptr,f,c
  7372  001188  2A02               	incf	strchr@ptr+1,f,c
  7373  00118A  50DF               	movf	indf2,w,c
  7374  00118C  A4D8               	btfss	status,2,c
  7375  00118E  D7EA               	goto	i2l2459
  7376  001190  0E00               	movlw	0
  7377  001192  6E01               	movwf	?_strchr,c
  7378  001194  0E00               	movlw	0
  7379  001196  6E02               	movwf	?_strchr+1,c
  7380  001198  0012               	return	
  7381  00119A                     __end_of_strchr:
  7382                           	opt stack 0
  7383                           pclatu	equ	0xFFB
  7384                           pclath	equ	0xFFA
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           intcon	equ	0xFF2
  7392                           intcon2	equ	0xFF1
  7393                           postinc0	equ	0xFEE
  7394                           fsr0h	equ	0xFEA
  7395                           fsr0l	equ	0xFE9
  7396                           wreg	equ	0xFE8
  7397                           indf1	equ	0xFE7
  7398                           postdec1	equ	0xFE5
  7399                           fsr1h	equ	0xFE2
  7400                           fsr1l	equ	0xFE1
  7401                           indf2	equ	0xFDF
  7402                           postinc2	equ	0xFDE
  7403                           postdec2	equ	0xFDD
  7404                           fsr2h	equ	0xFDA
  7405                           fsr2l	equ	0xFD9
  7406                           status	equ	0xFD8
  7407                           
  7408 ;; *************** function _strcmp *****************
  7409 ;; Defined at:
  7410 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strcmp.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  7413 ;;		 -> STR_1(10), line(128), 
  7414 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  7415 ;;		 -> STR_4(3), STR_3(12), line(128), 
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;  r               1    5[COMRAM] char 
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  2    0[COMRAM] int 
  7420 ;; Registers used:
  7421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7429 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;Total ram usage:        6 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; This function calls:
  7434 ;;		Nothing
  7435 ;; This function is called by:
  7436 ;;		_EUSART1_Receive_ISR
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text51
  7441  000CC4                     __ptext51:
  7442                           	opt stack 0
  7443  000CC4                     _strcmp:
  7444                           	opt stack 23
  7445                           
  7446                           ;incstack = 0
  7447  000CC4  D004               	goto	i2l2559
  7448  000CC6                     i2l2557:
  7449  000CC6  4A01               	infsnz	strcmp@s1,f,c
  7450  000CC8  2A02               	incf	strcmp@s1+1,f,c
  7451  000CCA  4A03               	infsnz	strcmp@s2,f,c
  7452  000CCC  2A04               	incf	strcmp@s2+1,f,c
  7453  000CCE                     i2l2559:
  7454  000CCE  C001  FFF6         	movff	strcmp@s1,tblptrl
  7455  000CD2  C002  FFF7         	movff	strcmp@s1+1,tblptrh
  7456  000CD6  0E00               	movlw	low (__mediumconst shr (0+16))
  7457  000CD8  6EF8               	movwf	tblptru,c
  7458  000CDA  0E0F               	movlw	(high __ramtop+-1)
  7459  000CDC  64F7               	cpfsgt	tblptrh,c
  7460  000CDE  D003               	bra	i2u187_47
  7461  000CE0  0008               	tblrd		*
  7462  000CE2  50F5               	movf	tablat,w,c
  7463  000CE4  D005               	bra	i2u187_40
  7464  000CE6                     i2u187_47:
  7465  000CE6  CFF6 FFE1          	movff	tblptrl,fsr1l
  7466  000CEA  CFF7 FFE2          	movff	tblptrh,fsr1h
  7467  000CEE  50E7               	movf	indf1,w,c
  7468  000CF0                     i2u187_40:
  7469  000CF0  6E05               	movwf	??_strcmp& (0+255),c
  7470  000CF2  C003  FFF6         	movff	strcmp@s2,tblptrl
  7471  000CF6  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  7472  000CFA  0E00               	movlw	low (__mediumconst shr (0+16))
  7473  000CFC  6EF8               	movwf	tblptru,c
  7474  000CFE  0E0F               	movlw	(high __ramtop+-1)
  7475  000D00  64F7               	cpfsgt	tblptrh,c
  7476  000D02  D003               	bra	i2u188_47
  7477  000D04  0008               	tblrd		*
  7478  000D06  50F5               	movf	tablat,w,c
  7479  000D08  D005               	bra	i2u188_40
  7480  000D0A                     i2u188_47:
  7481  000D0A  CFF6 FFE1          	movff	tblptrl,fsr1l
  7482  000D0E  CFF7 FFE2          	movff	tblptrh,fsr1h
  7483  000D12  50E7               	movf	indf1,w,c
  7484  000D14                     i2u188_40:
  7485  000D14  0800               	sublw	0
  7486  000D16  2405               	addwf	??_strcmp,w,c
  7487  000D18  6E06               	movwf	strcmp@r,c
  7488  000D1A  5006               	movf	strcmp@r,w,c
  7489  000D1C  A4D8               	btfss	status,2,c
  7490  000D1E  D014               	goto	i2l2563
  7491  000D20  C001  FFF6         	movff	strcmp@s1,tblptrl
  7492  000D24  C002  FFF7         	movff	strcmp@s1+1,tblptrh
  7493  000D28  0E00               	movlw	low (__mediumconst shr (0+16))
  7494  000D2A  6EF8               	movwf	tblptru,c
  7495  000D2C  0E0F               	movlw	(high __ramtop+-1)
  7496  000D2E  64F7               	cpfsgt	tblptrh,c
  7497  000D30  D003               	bra	i2u190_47
  7498  000D32  0008               	tblrd		*
  7499  000D34  50F5               	movf	tablat,w,c
  7500  000D36  D005               	bra	i2u190_40
  7501  000D38                     i2u190_47:
  7502  000D38  CFF6 FFE1          	movff	tblptrl,fsr1l
  7503  000D3C  CFF7 FFE2          	movff	tblptrh,fsr1h
  7504  000D40  50E7               	movf	indf1,w,c
  7505  000D42                     i2u190_40:
  7506  000D42  0900               	iorlw	0
  7507  000D44  A4D8               	btfss	status,2,c
  7508  000D46  D7BF               	goto	i2l2557
  7509  000D48                     i2l2563:
  7510  000D48  5006               	movf	strcmp@r,w,c
  7511  000D4A  6E01               	movwf	?_strcmp,c
  7512  000D4C  6A02               	clrf	?_strcmp+1,c
  7513  000D4E  BE01               	btfsc	?_strcmp,7,c
  7514  000D50  0602               	decf	?_strcmp+1,f,c
  7515  000D52  0012               	return	
  7516  000D54                     __end_of_strcmp:
  7517                           	opt stack 0
  7518                           pclatu	equ	0xFFB
  7519                           pclath	equ	0xFFA
  7520                           tblptru	equ	0xFF8
  7521                           tblptrh	equ	0xFF7
  7522                           tblptrl	equ	0xFF6
  7523                           tablat	equ	0xFF5
  7524                           prodh	equ	0xFF4
  7525                           prodl	equ	0xFF3
  7526                           intcon	equ	0xFF2
  7527                           intcon2	equ	0xFF1
  7528                           postinc0	equ	0xFEE
  7529                           fsr0h	equ	0xFEA
  7530                           fsr0l	equ	0xFE9
  7531                           wreg	equ	0xFE8
  7532                           indf1	equ	0xFE7
  7533                           postdec1	equ	0xFE5
  7534                           fsr1h	equ	0xFE2
  7535                           fsr1l	equ	0xFE1
  7536                           indf2	equ	0xFDF
  7537                           postinc2	equ	0xFDE
  7538                           postdec2	equ	0xFDD
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543 ;; *************** function _EUSART1_Read *****************
  7544 ;; Defined at:
  7545 ;;		line 121 in file "mcc_generated_files/eusart1.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;		None
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;  readValue       1    0[COMRAM] unsigned char 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  1    wreg      unsigned char 
  7552 ;; Registers used:
  7553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;Total ram usage:        1 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; This function calls:
  7566 ;;		Nothing
  7567 ;; This function is called by:
  7568 ;;		_EUSART1_Receive_ISR
  7569 ;;		_getch
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           	psect	text52
  7574  001202                     __ptext52:
  7575                           	opt stack 0
  7576  001202                     _EUSART1_Read:
  7577                           	opt stack 23
  7578                           
  7579                           ;eusart1.c: 123: uint8_t readValue = 0;
  7580                           
  7581                           ;incstack = 0
  7582  001202  0E00               	movlw	0
  7583  001204  6E01               	movwf	EUSART1_Read@readValue,c
  7584  001206                     i2l2537:
  7585  001206  502E               	movf	_eusart1RxCount,w,c	;volatile
  7586  001208  B4D8               	btfsc	status,2,c
  7587  00120A  D7FD               	goto	i2l2537
  7588                           
  7589                           ;eusart1.c: 127: }
  7590                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7591  00120C  9A9D               	bcf	3997,5,c	;volatile
  7592                           
  7593                           ;eusart1.c: 131: readValue = eusart1RxBuffer[eusart1RxTail++];
  7594  00120E  5030               	movf	_eusart1RxTail,w,c
  7595  001210  0D01               	mullw	1
  7596  001212  0E00               	movlw	low _eusart1RxBuffer
  7597  001214  24F3               	addwf	prodl,w,c
  7598  001216  6ED9               	movwf	fsr2l,c
  7599  001218  0E02               	movlw	high _eusart1RxBuffer
  7600  00121A  20F4               	addwfc	prodh,w,c
  7601  00121C  6EDA               	movwf	fsr2h,c
  7602  00121E  50DF               	movf	indf2,w,c
  7603  001220  6E01               	movwf	EUSART1_Read@readValue,c
  7604  001222  2A30               	incf	_eusart1RxTail,f,c
  7605                           
  7606                           ;eusart1.c: 132: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7607  001224  0E7F               	movlw	127
  7608  001226  6430               	cpfsgt	_eusart1RxTail,c
  7609  001228  D002               	goto	i2l2547
  7610                           
  7611                           ;eusart1.c: 133: {
  7612                           ;eusart1.c: 134: eusart1RxTail = 0;
  7613  00122A  0E00               	movlw	0
  7614  00122C  6E30               	movwf	_eusart1RxTail,c
  7615  00122E                     i2l2547:
  7616                           
  7617                           ;eusart1.c: 135: }
  7618                           ;eusart1.c: 136: eusart1RxCount--;
  7619  00122E  062E               	decf	_eusart1RxCount,f,c	;volatile
  7620                           
  7621                           ;eusart1.c: 137: PIE1bits.RC1IE = 1;
  7622  001230  8A9D               	bsf	3997,5,c	;volatile
  7623                           
  7624                           ;eusart1.c: 139: return readValue;
  7625  001232  5001               	movf	EUSART1_Read@readValue,w,c
  7626  001234  0012               	return	
  7627  001236                     __end_of_EUSART1_Read:
  7628                           	opt stack 0
  7629                           pclatu	equ	0xFFB
  7630                           pclath	equ	0xFFA
  7631                           tblptru	equ	0xFF8
  7632                           tblptrh	equ	0xFF7
  7633                           tblptrl	equ	0xFF6
  7634                           tablat	equ	0xFF5
  7635                           prodh	equ	0xFF4
  7636                           prodl	equ	0xFF3
  7637                           intcon	equ	0xFF2
  7638                           intcon2	equ	0xFF1
  7639                           postinc0	equ	0xFEE
  7640                           fsr0h	equ	0xFEA
  7641                           fsr0l	equ	0xFE9
  7642                           wreg	equ	0xFE8
  7643                           indf1	equ	0xFE7
  7644                           postdec1	equ	0xFE5
  7645                           fsr1h	equ	0xFE2
  7646                           fsr1l	equ	0xFE1
  7647                           indf2	equ	0xFDF
  7648                           postinc2	equ	0xFDE
  7649                           postdec2	equ	0xFDD
  7650                           fsr2h	equ	0xFDA
  7651                           fsr2l	equ	0xFD9
  7652                           status	equ	0xFD8
  7653                           pclatu	equ	0xFFB
  7654                           pclath	equ	0xFFA
  7655                           tblptru	equ	0xFF8
  7656                           tblptrh	equ	0xFF7
  7657                           tblptrl	equ	0xFF6
  7658                           tablat	equ	0xFF5
  7659                           prodh	equ	0xFF4
  7660                           prodl	equ	0xFF3
  7661                           intcon	equ	0xFF2
  7662                           intcon2	equ	0xFF1
  7663                           postinc0	equ	0xFEE
  7664                           fsr0h	equ	0xFEA
  7665                           fsr0l	equ	0xFE9
  7666                           wreg	equ	0xFE8
  7667                           indf1	equ	0xFE7
  7668                           postdec1	equ	0xFE5
  7669                           fsr1h	equ	0xFE2
  7670                           fsr1l	equ	0xFE1
  7671                           indf2	equ	0xFDF
  7672                           postinc2	equ	0xFDE
  7673                           postdec2	equ	0xFDD
  7674                           fsr2h	equ	0xFDA
  7675                           fsr2l	equ	0xFD9
  7676                           status	equ	0xFD8
  7677                           
  7678                           	psect	rparam
  7679  0000                     pclatu	equ	0xFFB
  7680                           pclath	equ	0xFFA
  7681                           tblptru	equ	0xFF8
  7682                           tblptrh	equ	0xFF7
  7683                           tblptrl	equ	0xFF6
  7684                           tablat	equ	0xFF5
  7685                           prodh	equ	0xFF4
  7686                           prodl	equ	0xFF3
  7687                           intcon	equ	0xFF2
  7688                           intcon2	equ	0xFF1
  7689                           postinc0	equ	0xFEE
  7690                           fsr0h	equ	0xFEA
  7691                           fsr0l	equ	0xFE9
  7692                           wreg	equ	0xFE8
  7693                           indf1	equ	0xFE7
  7694                           postdec1	equ	0xFE5
  7695                           fsr1h	equ	0xFE2
  7696                           fsr1l	equ	0xFE1
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           fsr2h	equ	0xFDA
  7701                           fsr2l	equ	0xFD9
  7702                           status	equ	0xFD8
  7703                           
  7704                           	psect	temp
  7705  00003B                     btemp:
  7706                           	opt stack 0
  7707  00003B                     	ds	1
  7708  0000                     int$flags	set	btemp
  7709                           pclatu	equ	0xFFB
  7710                           pclath	equ	0xFFA
  7711                           tblptru	equ	0xFF8
  7712                           tblptrh	equ	0xFF7
  7713                           tblptrl	equ	0xFF6
  7714                           tablat	equ	0xFF5
  7715                           prodh	equ	0xFF4
  7716                           prodl	equ	0xFF3
  7717                           intcon	equ	0xFF2
  7718                           intcon2	equ	0xFF1
  7719                           postinc0	equ	0xFEE
  7720                           fsr0h	equ	0xFEA
  7721                           fsr0l	equ	0xFE9
  7722                           wreg	equ	0xFE8
  7723                           indf1	equ	0xFE7
  7724                           postdec1	equ	0xFE5
  7725                           fsr1h	equ	0xFE2
  7726                           fsr1l	equ	0xFE1
  7727                           indf2	equ	0xFDF
  7728                           postinc2	equ	0xFDE
  7729                           postdec2	equ	0xFDD
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8


Data Sizes:
    Strings     338
    Constant    18
    Data        4
    BSS         435
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      58
    BANK0           160     40      81
    BANK1           256      0     256
    BANK2           256      0     128
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 40
		 -> uuid(BANK0[40]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 128
		 -> line(BANK1[128]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> uuid(BANK0[40]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> uuid(BANK0[40]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_4(CODE[3]), STR_3(CODE[12]), line(BANK1[128]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_1(CODE[10]), line(BANK1[128]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_21(CODE[7]), uuid(BANK0[40]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_20(CODE[36]), STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), 
		 -> STR_16(CODE[19]), STR_15(CODE[19]), STR_14(CODE[19]), STR_13(CODE[12]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[15]), STR_9(CODE[15]), 
		 -> STR_8(CODE[15]), STR_7(CODE[14]), STR_6(CODE[12]), STR_5(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> uuid(BANK0[40]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), line(BANK1[128]), 


Critical Paths under _main in COMRAM

    _main->_wait_5ms
    _InitSensor->_I2C_Write_Byte
    _InitRadio->_wait_5ms
    _wait_5ms->_rand
    _strtol->_isalpha
    _isalpha->_isupper
    _rand->___lmul
    _printf->___lwdiv
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    ___awmod->_rand

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Receive_ISR->_strstr
    _strstr->_strncmp
    _strncmp->_strlen

Critical Paths under _main in BANK0

    _main->_InitRadio
    _InitRadio->_printf
    _wait_5ms->___awmod
    _strtol->___lmul
    _srand->_strtol
    _rand->___lmul
    _getUUID->_printf
    _printf->___lwmod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   18982
                                             37 BANK0      3     3      0
                      _I2C_Read_Byte
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
                          _InitRadio
                         _InitSensor
                  _SYSTEM_Initialize
                            ___awmod
                             _printf
                               _rand
                          _read_line
                           _wait_5ms
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                   _EPWM1_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSensor                                           0     0      0      69
                           _I2C_Init
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       2     2      0      69
                                             36 COMRAM     2     2      0
                      _I2C_SCL_CLEAR
                        _I2C_SCL_SET
                      _I2C_SDA_CLEAR
                     _I2C_SDA_IN_SET
                    _I2C_SDA_OUT_SET
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
                        _I2C_SCL_SET
                    _I2C_SDA_OUT_SET
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
                      _I2C_SCL_CLEAR
                        _I2C_SCL_SET
                      _I2C_SDA_CLEAR
                    _I2C_SDA_OUT_SET
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             1     1      0       0
                                             36 COMRAM     1     1      0
                    _I2C_SCL_OUT_SET
                        _I2C_SCL_SET
                    _I2C_SDA_OUT_SET
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (3) _I2C_SCL_OUT_SET                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitRadio                                            2     2      0   12647
                                             35 BANK0      2     2      0
                            ___awmod
                            _getUUID
                             _printf
                               _rand
                          _read_line
                              _srand
                             _strtol
                           _wait_5ms
 ---------------------------------------------------------------------------------
 (1) _wait_5ms                                             6     4      2     376
                                             42 COMRAM     1     1      0
                                             14 BANK0      5     3      2
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _strtol                                              16    10      6    2165
                                              8 BANK0     16    10      6
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _toupper                                              1     1      0      67
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isspace                                              3     3      0      90
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _isalpha                                              3     3      0     158
                                             39 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (4) _isupper                                              3     3      0      68
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      86
                                             24 BANK0      2     0      2
                             _strtol (ARG)
 ---------------------------------------------------------------------------------
 (1) _rand                                                 2     0      2     558
                                             40 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     558
                                             36 COMRAM     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) _getUUID                                              0     0      0    4445
                             _printf
                          _read_line
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     203
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _read_line                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    22     12    4242
                                              5 BANK0     30    18     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             37 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      44
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             36 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     741
                                              8 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _I2C_Read_Byte                                        3     3      0     116
                                             36 COMRAM     3     3      0
                      _I2C_SCL_CLEAR
                        _I2C_SCL_SET
                      _I2C_SDA_CLEAR
                     _I2C_SDA_IN_SET
                    _I2C_SDA_OUT_SET
                       _I2C_SDA_READ
                        _I2C_SDA_SET
 ---------------------------------------------------------------------------------
 (3) _I2C_SDA_SET                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_SDA_READ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SDA_OUT_SET                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SDA_IN_SET                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SDA_CLEAR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SCL_SET                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SCL_CLEAR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1524
                                             22 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  3     3      0    1524
                                             19 COMRAM     3     3      0
                       _EUSART1_Read
                             _strcmp
                             _strstr
 ---------------------------------------------------------------------------------
 (8) _strstr                                               4     0      4    1001
                                             15 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (9) _strncmp                                              9     3      6     326
                                              6 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (9) _strlen                                               6     4      2     154
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (9) _strchr                                               5     1      4     216
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _strcmp                                               6     2      4     475
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Read                                         1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Read_Byte
     _I2C_SCL_CLEAR
     _I2C_SCL_SET
     _I2C_SDA_CLEAR
     _I2C_SDA_IN_SET
     _I2C_SDA_OUT_SET
     _I2C_SDA_READ
     _I2C_SDA_SET
   _I2C_Start
     _I2C_SCL_CLEAR
     _I2C_SCL_SET
     _I2C_SDA_CLEAR
     _I2C_SDA_OUT_SET
     _I2C_SDA_SET
   _I2C_Stop
     _I2C_SCL_SET
     _I2C_SDA_OUT_SET
     _I2C_SDA_SET
   _I2C_Write_Byte
     _I2C_SCL_CLEAR
     _I2C_SCL_SET
     _I2C_SDA_CLEAR
     _I2C_SDA_IN_SET
     _I2C_SDA_OUT_SET
     _I2C_SDA_SET
   _InitRadio
     ___awmod
       _rand (ARG)
         ___lmul
     _getUUID
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART1_Write
       _read_line
       _strcpy
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART1_Write
     _rand
       ___lmul
     _read_line
     _srand
       _strtol (ARG)
         ___lmul
         _isalpha
           _isupper
         _isdigit
         _isspace
         _toupper
     _strtol
       ___lmul
       _isalpha
         _isupper
       _isdigit
       _isspace
       _toupper
     _wait_5ms
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
   _InitSensor
     _I2C_Init
       _I2C_SCL_OUT_SET
       _I2C_SCL_SET
       _I2C_SDA_OUT_SET
       _I2C_SDA_SET
     _I2C_Start
       _I2C_SCL_CLEAR
       _I2C_SCL_SET
       _I2C_SDA_CLEAR
       _I2C_SDA_OUT_SET
       _I2C_SDA_SET
     _I2C_Stop
       _I2C_SCL_SET
       _I2C_SDA_OUT_SET
       _I2C_SDA_SET
     _I2C_Write_Byte
       _I2C_SCL_CLEAR
       _I2C_SCL_SET
       _I2C_SDA_CLEAR
       _I2C_SDA_IN_SET
       _I2C_SDA_OUT_SET
       _I2C_SDA_SET
   _SYSTEM_Initialize
     _EPWM1_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
   ___awmod
     _rand (ARG)
       ___lmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART1_Write
   _rand
     ___lmul
   _read_line
   _wait_5ms
     ___awmod (ARG)
       _rand (ARG)
         ___lmul
     _rand (ARG)
       ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Read
     _strcmp
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      80       9       50.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      51       5       50.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      3A       1       61.7%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     20B      12        0.0%
DATA                 0      0     20B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Mon Apr 11 09:34:53 2016

               __size_of_I2C_SCL_SET 0004             _eusart1TxBufferRemaining 003A  
                 __size_of_I2C_Start 002E                  ___wmul@multiplicand 0027  
                  I2C_Write_Byte@byt 0025                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l110 113C  
                                l402 02E2                                  l284 10C0  
                                l356 0E72                                  l861 109C  
                                l871 0FF6                         __CFG_CPB$OFF 000000  
                                _PR2 000FBB                         __CFG_CPD$OFF 000000  
                                _inc 0060                                  _val 0035  
                       ___awmod@sign 0096                      _TMR2_Initialize 1450  
           __size_of_I2C_SCL_OUT_SET 0004                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                               l1073 07CA                                 l3101 028A  
                               l3041 0FE8                                 l3033 0FB2  
                               l2145 112C                                 l3201 056A  
                               l3121 0336                                 l3105 02A2  
                               l2233 147E                                 l3035 0FBE  
                               l2171 141A                                 l3123 033C  
                               l3051 00BA                                 l3203 0576  
                               l2403 126E                                 l3211 0EFE  
                               l2227 13FC                                 l3037 0FC4  
                               l2157 115E                                 l3117 031A  
                               l3053 00CC                                 l2405 1276  
                               l2191 1076                                 l2159 1160  
                               l3135 0378                                 l3151 03BA  
                               l3071 0184                                 l3063 010A  
                               l3047 00A6                                 l3207 0EE0  
                               l3321 0BA4                                 l3137 037E  
                               l3153 03CC                                 l3081 01BC  
                               l3073 018A                                 l3057 00D6  
                               l2505 144C                                 l3241 05E0  
                               l3217 10AC                                 l3331 0BD4  
                               l2187 106A                                 l3171 044A  
                               l3163 0426                                 l3091 0234  
                               l3083 01C8                                 l3243 05E8  
                               l3227 0596                                 l3333 0BDA  
                               l3341 0C0C                                 l3325 0BB4  
                               l2189 1072                                 l3165 0430  
                               l3093 0240                                 l3085 01CE  
                               l3245 05F2                                 l3405 0ACC  
                               l2199 1092                                 l3191 04F8  
                               l3183 048C                                 l3159 03EE  
                               l3095 0246                                 l3263 064E  
                               l2711 0E82                                 l2703 0E6A  
                               l3345 0C20                                 l3337 0BFE  
                               l3329 0BC8                                 l3177 0466  
                               l3097 025E                                 l2481 135A  
                               l3281 06B6                                 l3273 0684  
                               l3249 0602                                 l3179 0472  
                               l3187 04A0                                 l2491 1326  
                               l3259 063A                                 l3189 04A6  
                               l3197 0550                                 l3285 06C8  
                               l3277 069A                                 l3269 066E  
                               l3199 0562                                 l2495 1334  
                               l2479 1356                                 l3295 075A  
                               l2727 0EAE                                 l2931 0C40  
                               l3299 078A                                 l2943 0C64  
                               l2935 0C4A                                 l2927 0C38  
                               l2945 0C66                                 l2955 0C7E  
                               l2965 0CA4                                 STR_1 FFE5  
                               STR_2 FFEF                                 STR_3 FFD9  
                               STR_4 FFE2                                 STR_5 FF66  
                               STR_6 FFCD                                 STR_7 FFB3  
                               STR_8 FF86                                 STR_9 FFA4  
                               u2140 1492                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u3017 0E7C                                 u3107 1250  
                               u3027 0E88                                 u3117 125C  
                               u3037 0E94                                 u2510 0208  
                               u3207 0CBA                                 u3127 13BE  
                               u3047 0EA0                                 u3137 10B4  
                               u3057 0EB8                                 u3147 0C50  
                               u3067 0EC4                                 u3157 0C68  
                               u2517 01FE                                 u3077 13D2  
                               u2550 0280                                 u3167 0C74  
                               u3087 13DE                                 u3177 0C92  
                               u3097 1244                                 u3187 0C9E  
                               u3197 0CAE                                 u2557 0276  
                               i2l20 004E                                 i2l24 0058  
                               _TMR2 000FBC                         _I2C_SDA_READ 148A  
                               _WPUB 000F61                        _EUSART1_Write 112A  
                               _main 0ABC                                 _line 0180  
                               _rand 1000                        ?_EUSART1_Read 0001  
                   __end_of_I2C_Init 13C8                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 003B  
                               _uuid 0061                        __CFG_BORV$190 000000  
                   __end_of_I2C_Stop 13E6                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0094                        __CFG_IESO$OFF 000000  
                       ___param_bank 000010       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 1470                                ?_main 0001  
                              ?_rand 0029                                STR_10 FF95  
                              STR_11 FF43                                STR_12 FF76  
                              STR_20 FEAD                                STR_21 FFF8  
                              STR_13 FFC1                                STR_22 FF55  
                              STR_14 FEE4                                STR_15 FED1  
                              STR_16 FEF7                                STR_17 FF0A  
                              STR_18 FF30                                STR_19 FF1D  
                    __end_of___awmod 0C2A                                _T2CON 000FBA  
                              _LATC3 007C5B                                _LATC4 007C5C  
                     __CFG_DEBUG$OFF 000000                      __end_of___lwdiv 10A6  
                    __end_of___lwmod 1000                                i2l122 12BC  
                      _I2C_SDA_CLEAR 14C2                                i2l138 0AAE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                      __end_of_getUUID 1314  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                  ___lmul@multiplicand 008D  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 1292  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        _I2C_SCL_CLEAR 14CA  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers FEA5               __size_of_I2C_Read_Byte 009A  
                              _index 002C                      __end_of_isalpha 133C  
                              _ready 0033                      __end_of_isdigit 1422  
                              _randx 0036                   __CFG_MCLRE$EXTMCLR 000000  
                              _srand 1470                                _putch 14A0  
                    __end_of_isspace 1362                    __end_of_I2C_Start 1264  
                     ?_EUSART1_Write 0001                      __end_of_isupper 1404  
                              tablat 000FF5                       ??_EUSART1_Read 0001  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                    _TMR2_StartTimer 14AE                      __end_of_strncmp 0E60  
                    __end_of_toupper 1450                       __CFG_PBADEN$ON 000000  
                    __initialization 0F3C                           _InitSensor 12C0  
         __end_of_EUSART1_Initialize 1202                         __end_of_main 0B88  
                       __end_of_rand 1054                    ??_I2C_SDA_OUT_SET 0025  
            __end_of_TMR2_Initialize 1462          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 002C                       ?_I2C_SDA_CLEAR 0001  
                             ??_rand 002B                        __activetblptr 000003  
              ?_EUSART1_Transmit_ISR 0001                       ?_I2C_SCL_CLEAR 0001  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                             ?_srand 00A1                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                    ??_I2C_SCL_OUT_SET 0025  
                             i2l2433 10F4                               i2l2435 10F8  
                             i2l2451 0E3E                               i2l2443 0DDC  
                             i2l2453 0E46                       __CFG_WDTEN$OFF 000000  
                             i2l2447 0E0A                               i2l2537 1206  
                             i2l2465 117E                               i2l2547 122E  
                             i2l2563 0D48                               i2l2459 1164  
                             i2l2557 0CC6                               i2l2581 0DD0  
                             i2l2813 09B4                               i2l2821 09EC  
                             i2l2805 09A2                               i2l2559 0CCE  
                             i2l2575 0D90                               i2l2823 09F2  
                             i2l2569 0D56                               i2l2577 0DBA  
                             i2l2841 0A68                               i2l2833 0A34  
                             i2l2843 0A6C                               i2l2819 09E8  
                             i2l2847 0A8E                               i2l2791 12B8  
                             i2l2849 0AAA                               i2l2797 0982  
                             _RCREG1 000FAE                               _RCSTA1 000FAB  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                 __size_of_InitRadio 019E                               _TRISC3 007CA3  
                             _TRISC4 007CA4                               _TXREG1 000FAD  
                     _I2C_SDA_IN_SET 14BE                               _TXSTA1 000FAC  
                     __CFG_XINST$OFF 000000                         _CCPTMRS0bits 000F49  
                      _I2C_Read_Byte 0C2A                               ___lmul 0ED0  
                             ___wmul 1362                       __CFG_STVREN$ON 000000  
                          ??___awmod 002B                            ??___lwdiv 0029  
                          ??___lwmod 002C                               clear_0 0F42  
                             clear_1 0F50                               clear_2 0F62  
                             clear_3 0F6E                      ___awmod@divisor 0093  
                          ??_getUUID 002C                      ___awmod@counter 0095  
                             _printf 0098                               _strchr 1164  
                             _strcmp 0CC4                               _strcpy 1264  
                             _strlen 10EA                               _strtol 0596  
                             _strstr 0D54                     __end_of_wait_5ms 10EA  
                       __pdataCOMRAM 0036                            ??_isalpha 0028  
                          ??_isdigit 0025                            ?_I2C_Init 0001  
                          ?_I2C_Stop 0001                         __mediumconst FE9A  
                          ??_isspace 0025                               tblptrh 000FF7  
                          ??_isupper 0025                               tblptrl 000FF6  
                             tblptru 000FF8                               srand@x 00A1  
                    ??_EUSART1_Write 0025              __end_of_TMR2_StartTimer 14B2  
                    _eusart1RxBuffer 0200                            ??_strncmp 000D  
                          ??_toupper 0025        __size_of_INTERRUPT_Initialize 000A  
                    _eusart1TxBuffer 0100               __end_of_I2C_SDA_IN_SET 14C2  
                  _SYSTEM_Initialize 1422                           __accesstop 0060  
            __end_of__initialization 0F94                      I2C_Write_Byte@i 0026  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
                     ?_I2C_Read_Byte 0001                    ?_EPWM1_Initialize 0001  
                     __pcstackCOMRAM 0001                          ?_InitSensor 0001  
                ??_SYSTEM_Initialize 0025                   ??_EPWM1_Initialize 0025  
                      __end_of_srand 147E                      ??_I2C_SDA_CLEAR 0025  
                      __end_of_putch 14AA                     ?_TMR2_Initialize 0001  
                  __end_of_InitRadio 097A                 __end_of_EUSART1_Read 1236  
                    ??_I2C_SCL_CLEAR 0025               ??_EUSART1_Transmit_ISR 0001  
                         ??_I2C_Init 0025                           ??_I2C_Stop 0025  
        __end_of_EUSART1_Receive_ISR 0ABC            __end_of_SYSTEM_Initialize 143C  
                            ??_srand 002B                              ??_putch 0026  
                      _eusart1RxHead 002F                        _eusart1TxHead 0031  
                      _eusart1RxTail 0030                           __pbssBANK0 0060  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                      _eusart1TxTail 0032                      ?_I2C_SDA_IN_SET 0001  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 003A  
                      ??_I2C_SDA_SET 0025                        ??_I2C_SCL_SET 0025  
                 __size_of_read_line 000C                   __CFG_CCP2MX$PORTC1 000000  
                            ?___lmul 0089                              ?___wmul 0025  
                 __CFG_CCP3MX$PORTB5 000000                              _CCP1CON 000FBD  
                            _ECCP1AS 000FB6              __size_of_I2C_Write_Byte 0070  
                     ___lmul@product 0025                              ?_printf 008E  
                            ?_strchr 0001                              ?_strcmp 0001  
                            ?_strcpy 0025                              ?_strlen 0001  
                            ?_strtol 0091                       I2C_Read_Byte@i 0027  
                            ?_strstr 0010                              _OSCCON2 000FD2  
                            _OSCTUNE 000F9B                              _PWM1CON 000FB7  
                            _SPBRGH1 000FB0                     ?_TMR2_StartTimer 0001  
                __size_of_InitSensor 002A                      _I2C_SDA_OUT_SET 14BA  
                          _I2C_Start 1236                      ??_I2C_Read_Byte 0025  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                            ?_wait_5ms 0097  
                __end_of_I2C_SDA_SET 14BA                      __size_of___lmul 006C  
                            ___awmod 0B88                      __size_of___wmul 0026  
                __end_of_I2C_SCL_SET 14CA                              ___lwdiv 1054  
                            ___lwmod 0F9E                              __pcinit 0F3C  
                            _getUUID 12EA                              __ramtop 1000  
                            __ptext0 0ABC                              __ptext1 1422  
                            __ptext2 1450                              __ptext3 14AE  
                            __ptext4 119A                              __ptext5 1462  
                            __ptext6 1496                              __ptext7 11CE  
                            __ptext8 1388                              __ptext9 12C0  
                   I2C_Read_Byte@ack 0025                      __size_of_printf 04FE  
                   I2C_Read_Byte@val 0026                      __size_of_strchr 0036  
                    __size_of_strcmp 0090                      __size_of_strcpy 002E  
                    __size_of_strlen 0040                    __end_of_hexpowers FEAD  
                    _I2C_SCL_OUT_SET 14B2                      __size_of_strtol 0246  
                    __size_of_strstr 0086                              _dpowers FE9B  
              _OSCILLATOR_Initialize 1462                            _T2CONbits 000FBA  
                            _isalpha 1314                              _isdigit 1404  
                   ___awmod@dividend 0091                    __end_of_read_line 148A  
                 _EUSART1_Initialize 11CE             ??_PIN_MANAGER_Initialize 0025  
                            _isspace 133C                              _isupper 13E6  
                            main@crc 00AE           __size_of_SYSTEM_Initialize 001A  
                            main@lsb 00B0                              main@msb 00AF  
                            _strncmp 0DDA                              _toupper 143C  
               end_of_initialization 0F94                  ?_EUSART1_Initialize 0001  
                         ?_I2C_Start 0001                           ??_wait_5ms 0099  
                            printf@c 00AB                              printf@f 008E  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
              __size_of_EUSART1_Read 0034                 ??_EUSART1_Initialize 0025  
                            strcmp@r 0006                              strlen@s 0001  
                            strtol@a 009C                              strtol@c 00A0  
                            strtol@s 0091                            _PORTCbits 000F82  
                       strtol@endptr 0093              __end_of_I2C_SDA_OUT_SET 14BE  
                  __size_of_I2C_Init 0020                    __size_of_I2C_Stop 001E  
                EUSART1_Write@txData 0025                          printf@width 00A9  
                       _EUSART1_Read 1202                          _I2C_SDA_SET 14B6  
                        _I2C_SCL_SET 14C6                         ??_InitSensor 0027  
       __end_of_INTERRUPT_Initialize 14A0              __end_of_I2C_SCL_OUT_SET 14B6  
                     _I2C_Write_Byte 0E60                       __end_of___lmul 0F3C  
                     __end_of___wmul 1388                        __pidataCOMRAM 14AA  
             ?_OSCILLATOR_Initialize 0001                       __end_of_printf 0596  
                     __end_of_strchr 119A                       __end_of_strcmp 0D54  
                     __end_of_strcpy 1292                       __end_of_strlen 112A  
                     __end_of_strtol 07DC                       __end_of_strstr 0DDA  
                start_initialization 0F3C            __size_of_EPWM1_Initialize 0020  
                          _InitRadio 07DC                     ??_I2C_SDA_IN_SET 0025  
    __size_of_PIN_MANAGER_Initialize 0034                          putch@txData 0026  
                 __end_of_InitSensor 12EA                __end_of_EUSART1_Write 1164  
                      ?_I2C_SDA_READ 0001                          ??_I2C_Start 0025  
             __end_of_I2C_Write_Byte 0ED0                             ??___lmul 0025  
                           ??___wmul 0029                             ??_printf 009A  
              __end_of_I2C_SDA_CLEAR 14C6                             ??_strchr 0005  
                           ??_strcmp 0005                             ??_strcpy 0029  
                           ??_strlen 0003                             ??_strtol 0097  
                     _eusart1RxCount 002E                             ??_strstr 0014  
                        __pbssCOMRAM 002C                __end_of_I2C_SCL_CLEAR 14CE  
      __size_of_EUSART1_Transmit_ISR 002E                        __pcstackBANK0 0089  
                         ?_InitRadio 0001                         _isalpha$1478 0029  
           __size_of_TMR2_Initialize 0012                     ?_I2C_SDA_OUT_SET 0001  
                       _isdigit$1236 0026                       ??_I2C_SDA_READ 0025  
       __size_of_EUSART1_Receive_ISR 0142                     ___lwdiv@dividend 0025  
             _PIN_MANAGER_Initialize 119A                      ?_I2C_Write_Byte 0001  
                          __pintcode 0008                        __pmediumconst FE9A  
                           ?___awmod 0091                    __size_of_wait_5ms 0044  
                   ?_I2C_SCL_OUT_SET 0001                             ?___lwdiv 0025  
                           ?___lwmod 0089                             ?_getUUID 0001  
       ??_INTERRUPT_InterruptManager 0017                     __CFG_PRICLKEN$ON 000000  
                           _BAUDCON1 000FB8                             ?_isalpha 0001  
                           ?_isdigit 0001                             _I2C_Init 13A8  
                           _I2C_Stop 13C8                             ?_isspace 0001  
                           ?_isupper 0001             EUSART1_Receive_ISR@state 0015  
                          _hexpowers FEA5                     ___lwdiv@quotient 0029  
                           ?_strncmp 0007                            _read_line 147E  
                           ?_toupper 0001                       __size_of_srand 000E  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 1496  
                     ___wmul@product 0029                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D             __size_of_TMR2_StartTimer 0004  
__size_of_INTERRUPT_InterruptManager 008C                             i2u190_40 0D42  
                           i2u190_47 0D38                             _PIR1bits 000F9E  
                           i2u187_40 0CF0                             i2u187_47 0CE6  
                           i2u188_40 0D14                             i2u188_47 0D0A  
              __end_of_I2C_Read_Byte 0CC4                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                            _uartState 0034  
                           _PSTR1CON 000FB9                    ___wmul@multiplier 0025  
                         printf@flag 00A8                           printf@prec 009F  
                   _EPWM1_Initialize 1388                       InitRadio@delay 00AC  
                        ??_InitRadio 002C                         _isspace$1481 0026  
                  ___lmul@multiplier 0089                          _INTCON2bits 000FF1  
                         ?_read_line 0001                            copy_data0 0F88  
              ?_INTERRUPT_Initialize 0001                    ??_TMR2_Initialize 0025  
              EUSART1_Read@readValue 0001                         ?_I2C_SDA_SET 0001  
                       ?_I2C_SCL_SET 0001                             __Hrparam 0000  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTB5 000000              ??_OSCILLATOR_Initialize 0025  
               __end_of_I2C_SDA_READ 1496                     __size_of___awmod 00A2  
        __size_of_EUSART1_Initialize 0034                     __size_of___lwdiv 0052  
                   __size_of___lwmod 0062                     __size_of_getUUID 002A  
                         _ANSELCbits 000F3A                         _isupper$1484 0026  
                   __size_of_isalpha 0028                     __size_of_isdigit 001E  
                    ___lwdiv@divisor 0027                     __size_of_isspace 0026  
                    ___lwdiv@counter 002B                             __ptext10 0E60  
                           __ptext11 13C8                             __ptext20 1314  
                           __ptext12 1236                             __ptext21 13E6  
                           __ptext13 13A8                             __ptext30 112A  
                           __ptext22 1470                             __ptext14 14B2  
                           __ptext31 1404                             __ptext23 1000  
                           __ptext15 07DC                             __ptext40 14BE  
                           __ptext32 1362                             __ptext24 0ED0  
                           __ptext16 10A6                             __ptext41 14C2  
                           __ptext33 0F9E                             __ptext25 12EA  
                           __ptext17 0596                             __ptext50 1164  
                           __ptext42 14C6                             __ptext34 1054  
                           __ptext26 1264                             __ptext18 143C  
                           __ptext51 0CC4                             __ptext43 14CA  
                           __ptext35 0B88                             __ptext27 147E  
                           __ptext19 133C                             __ptext52 1202  
                           __ptext36 0C2A                             __ptext28 0098  
                           __ptext45 1292                             __ptext37 14B6  
                           __ptext29 14A0                             __ptext46 097A  
                           __ptext38 148A                             __ptext47 0D54  
                           __ptext39 14BA                             __ptext48 0DDA  
                           __ptext49 10EA                     __size_of_isupper 001E  
                   __size_of_strncmp 0086                     __size_of_toupper 0014  
                         strcpy@from 0027                        __size_of_main 00CC  
                      __size_of_rand 0054                            wait_5ms@i 002B  
                          wait_5ms@j 0097                           strncmp@len 000B  
                           _wait_5ms 10A6                             int$flags 003B  
                         strtol@base 0095                           strtol@sign 009B  
                  ??_TMR2_StartTimer 0025   __end_of_INTERRUPT_InterruptManager 0094  
         _INTERRUPT_InterruptManager 0008                            printf@idx 009E  
                          printf@len 00A4                            printf@val 00A6  
                _EUSART1_Receive_ISR 097A                           _INTCONbits 000FF2  
                           isalpha@c 002A                             isdigit@c 0027  
             ??_INTERRUPT_Initialize 0025                          ??_read_line 0025  
                           intlevel2 0000                 ?_EUSART1_Receive_ISR 0001  
                          strchr@chr 0003                     ___lwmod@dividend 0089  
                          strchr@ptr 0001                             isspace@c 0027  
            ?_PIN_MANAGER_Initialize 0001                     ??_I2C_Write_Byte 0025  
                         _RCSTA1bits 000FAB                             isupper@c 0027  
       __end_of_EUSART1_Transmit_ISR 12C0                            strncmp@s1 0007  
                          strncmp@s2 0009                             printf@ap 00A2  
                           printf@cp 00A0               __size_of_EUSART1_Write 003A  
                           strcmp@s1 0001                             strcmp@s2 0003  
                    ___lwmod@divisor 008B                             strcpy@cp 0029  
                           strlen@cp 0005                             strcpy@to 0025  
                    ___lwmod@counter 008D                             toupper@c 0025  
                  __CFG_T3CMX$PORTC0 000000                             strstr@s1 0010  
                           strstr@s2 0012                ??_EUSART1_Receive_ISR 0014  
     __end_of_PIN_MANAGER_Initialize 11CE                    __CFG_FOSC$INTIO67 000000  
            __size_of_I2C_SDA_IN_SET 0004             __size_of_I2C_SDA_OUT_SET 0004  
             __size_of_I2C_SDA_CLEAR 0004                __size_of_I2C_SDA_READ 000C  
           __end_of_EPWM1_Initialize 13A8                 __size_of_I2C_SDA_SET 0004  
             __size_of_I2C_SCL_CLEAR 0004  
